<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>学不动也要学！探究Fragment延迟加载的前世今生</title>
    <link href="/2020/01/02/24.%E5%AD%A6%E4%B8%8D%E5%8A%A8%E4%B9%9F%E8%A6%81%E5%AD%A6%EF%BC%81%E6%8E%A2%E7%A9%B6Fragment%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BD%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/"/>
    <url>/2020/01/02/24.%E5%AD%A6%E4%B8%8D%E5%8A%A8%E4%B9%9F%E8%A6%81%E5%AD%A6%EF%BC%81%E6%8E%A2%E7%A9%B6Fragment%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BD%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/</url>
    
    <content type="html"><![CDATA[<p>上周在<a href="https://juejin.im/post/5df4aabe6fb9a0161104c8eb">《学不动也要学！深入了解ViewPager2》</a>一篇文章的留言中，大家普遍对于Fragment懒加载的问题比较关心。其实，对于Fragment懒加载问题的处理由来已久，网上不乏相关的优秀文章。但是，由于Fragment生命周期的原因使得懒加载问题的处理并不是那么的优雅。显然，Google也意识到了问题所在。因此，在Androidx的库中对于Fragment的生命周期状态的控制进行了深度优化，使得我们更容易的去管控Fragment的生命周期，也使得我们更容易的去处理懒加载问题。但是，前提条件是我们要了解Google对于Fragment做了哪些优化。那么就让我们借此机会一起来探究一下吧！（ <strong><em>懒加载称作延迟加载我觉得更贴切一些，所以下文就统称为延迟加载了。</em></strong> ）</p><h2 id="一、Fragment延迟加载的前世"><a href="#一、Fragment延迟加载的前世" class="headerlink" title="一、Fragment延迟加载的前世"></a>一、Fragment延迟加载的前世</h2><p>虽然本篇文章是对于Fragment新特性的探究，但是我觉得写文章总要有个因果。也为了照顾一下还不太了解什么是延迟加载的同学。我们还是先来了解一下延迟加载，顺便回顾一下Fragment延迟加载的旧方案。</p><h3 id="1-为什么要对Fragment做延迟加载"><a href="#1-为什么要对Fragment做延迟加载" class="headerlink" title="1.为什么要对Fragment做延迟加载?"></a>1.为什么要对Fragment做延迟加载?</h3><p>首先，我们要搞清楚一个问题。“Fragment延迟加载“中的“延迟”并不指的是延迟加载Fragment，而是延迟加载Fragment中的数据。对于Fragment的使用通常我们会结合ViewPager。在<a href="https://juejin.im/post/5df4aabe6fb9a0161104c8eb">《学不动也要学！深入了解ViewPager2》</a>一文中我们也提到ViewPager的预加载问题。ViewPager会默认在当前页面的左右两边至少预加载一个页面以保证ViewPager的流畅性。我们假设在ViewPager的所有Fragment中都存在网络请求。当我们打开这个页面的时候由于ViewPager的预加载原因，即使在其它Fragment不可见的情况下也会去进行网络请求加载数据。而如果此时用户根本就没有去滑动ViewPager就退出了应用或者切换到了其他页面。那么对于这个不可见的Fragment中的网络请求岂不是既浪费了流量也浪费了手机和服务器的性能？</p><p>那么此时有的同学就有问题了。你就不能在Fragment显示的时候去加载数据吗?问的好！在解答之前我们先来看下Fragment的生命周期<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS8xMi8yOS8xNmY1MGFlMTUwMGM3ZDFk?x-oss-process=image/format,png" alt="在这里插入图片描述"><br>想必这张图大家应该都非常熟悉了。当Fragment被预加载的时候，此Fragment的生命周期会从onAttach执行到onResume。显然我们无法通过Fragment的生命周期来控制Fragment的延迟加载。那么该怎么办呢？我们且往下看。</p><h3 id="2-如何处理Fragment的延迟加载？"><a href="#2-如何处理Fragment的延迟加载？" class="headerlink" title="2.如何处理Fragment的延迟加载？"></a>2.如何处理Fragment的延迟加载？</h3><p>通过上一小节的分析我们知道想要在Fragment的生命周期中处理延迟加载的问题显然是走不通的。所以想要处理Fragment的延迟加载就需要另想它法了。还好，在Fragment中为我们提供了一个setUserVisibleHint(isVisibleToUser: Boolean)的方法，这个方法中有一个isVisibleToUser的boolean类型的参数，其意义表示当前的Fragment是否对用户可见。因此，对于Fragment的延迟加载我们便可以通过这个方法来展开。<br>既然要使用setUserVisibleHint(isVisibleToUser: Boolean)那么就应该知道这个方法的调用时机。我们写一个ViewPager嵌套Fragment的例子来打印下日志：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS8xMi8yOS8xNmY1MWE0N2UzMDg1Mzdk?x-oss-process=image/format,png"><br><em>注：上图打印的日志中”position:0“表示当前Fragment，“position:1”表示预加载的Fragment，下同。</em></p><p>可见该方法是在Fragment的onAttach之前就已经被调用了。因此，对于延迟加载我们可以在setUserVisibleHint(isVisibleToUser: Boolean)方法及onViewCreated(view: View, savedInstanceState: Bundle?)添加标志位来控制是否加载数据。我们来看下代码：</p><pre><code class="hljs kotlin"><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BaseLazyFragment</span> : <span class="hljs-type">Fragment</span></span>() &#123;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 当前Fragment状态是否可见</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> isVisibleToUser: <span class="hljs-built_in">Boolean</span> = <span class="hljs-literal">false</span>    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 是否已创建View</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> isViewCreated: <span class="hljs-built_in">Boolean</span> = <span class="hljs-literal">false</span>    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 是否第一次加载数据</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> isFirstLoad = <span class="hljs-literal">true</span>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">setUserVisibleHint</span><span class="hljs-params">(isVisibleToUser: <span class="hljs-type">Boolean</span>)</span></span> &#123;        <span class="hljs-keyword">super</span>.setUserVisibleHint(isVisibleToUser)        <span class="hljs-keyword">this</span>.isVisibleToUser = isVisibleToUser        onLazyLoad()    &#125;    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onLazyLoad</span><span class="hljs-params">()</span></span> &#123;        <span class="hljs-keyword">if</span> (isVisibleToUser &amp;&amp; isViewCreated &amp;&amp; isFirstLoad) &#123;            isFirstLoad = <span class="hljs-literal">false</span>            lazyLoad()        &#125;    &#125;    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onViewCreated</span><span class="hljs-params">(view: <span class="hljs-type">View</span>, savedInstanceState: <span class="hljs-type">Bundle</span>?)</span></span> &#123;        <span class="hljs-keyword">super</span>.onViewCreated(view, savedInstanceState)        isViewCreated = <span class="hljs-literal">true</span>        onLazyLoad()    &#125;    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">abstract</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">lazyLoad</span><span class="hljs-params">()</span></span>&#125;</code></pre><p>我们通过在Fragment中添加了三个标志位实现了延迟加载的功能。我们到TestFragment尝试一下：</p><pre><code class="hljs kotlin"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestFragment</span> : <span class="hljs-type">BaseLazyFragment</span></span>() &#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> position: <span class="hljs-built_in">Int</span> = <span class="hljs-number">0</span>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">setUserVisibleHint</span><span class="hljs-params">(isVisibleToUser: <span class="hljs-type">Boolean</span>)</span></span> &#123;        <span class="hljs-keyword">super</span>.setUserVisibleHint(isVisibleToUser)        <span class="hljs-keyword">val</span> bundle = arguments        position = bundle!!.getInt(KEY_POSITION)    &#125;    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onCreateView</span><span class="hljs-params">(inflater: <span class="hljs-type">LayoutInflater</span>, container: <span class="hljs-type">ViewGroup</span>?, savedInstanceState: <span class="hljs-type">Bundle</span>?)</span></span>: View? &#123;        <span class="hljs-keyword">val</span> cardView = CardView(inflater, container)        cardView.bind(Card.fromBundle(arguments!!),position)        <span class="hljs-keyword">return</span> cardView.view    &#125;    <span class="hljs-keyword">companion</span> <span class="hljs-keyword">object</span> &#123;        <span class="hljs-keyword">private</span> <span class="hljs-keyword">const</span> <span class="hljs-keyword">val</span> KEY_POSITION = <span class="hljs-string">&quot;position&quot;</span>        <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">getInstance</span><span class="hljs-params">(card: <span class="hljs-type">Card</span>, position: <span class="hljs-type">Int</span>)</span></span>: TestFragment &#123;            <span class="hljs-keyword">val</span> fragment = TestFragment()            <span class="hljs-keyword">val</span> bundle = card.toBundle()            bundle.putInt(KEY_POSITION, position)            fragment.arguments = bundle            <span class="hljs-keyword">return</span> fragment        &#125;    &#125;    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">lazyLoad</span><span class="hljs-params">()</span></span> &#123;        showToast(<span class="hljs-string">&quot;Fragment<span class="hljs-variable">$position</span> is loading data&quot;</span>)    &#125;    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">showToast</span><span class="hljs-params">(content: <span class="hljs-type">String</span>)</span></span> &#123;        Toast.makeText(context, content, Toast.LENGTH_SHORT).show()    &#125;&#125;</code></pre><p>我们来看下效果：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS8xMi8yOS8xNmY1MGFlMTUwMjk5Njk2?x-oss-process=image/format,png" alt="在这里插入图片描述"><br>嗯！立竿见影，只有当Fragment完全显示出来的时候loading data的操作才被执行。这种延迟加载的方案在Androidx 1.1.0版本以前被广泛应用。而在Androidx 1.1.0版本中，Google对于Fragment进行了优化处理，使得延迟加载也有了新的解决方案。</p><h2 id="二、Fragment的setMaxLifecycle探究"><a href="#二、Fragment的setMaxLifecycle探究" class="headerlink" title="二、Fragment的setMaxLifecycle探究"></a>二、Fragment的setMaxLifecycle探究</h2><p>上一节中我们讲到因为ViewPager的预加载机制以及Fragment的生命周期无法得以控制，我们不得不通过setUserVisibleHint(isVisibleToUser: Boolean)和onViewCreated(view: View, savedInstanceState: Bundle?)方法以及添加三个标志位来处理延迟加载，显然这样的代码并不优雅。</p><p>当我们将Android项目迁移到Androidx并将androidx版本升级到1.1.0之后发现，我们第一节中用到的setUserVisibleHint(isVisibleToUser: Boolean)方法已被标记为废弃了！<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS8xMi8yOS8xNmY1MGFlMTUwNWY2NjU0?x-oss-process=image/format,png" alt="在这里插入图片描述"></p><pre><code class="hljs java"> <span class="hljs-comment">/**</span><span class="hljs-comment"> * ... 省略其它注释</span><span class="hljs-comment"> * <span class="hljs-doctag">@deprecated</span> Use &#123;<span class="hljs-doctag">@link</span> FragmentTransaction#setMaxLifecycle(Fragment, Lifecycle.State)&#125;</span><span class="hljs-comment"> * instead.</span><span class="hljs-comment"> */</span><span class="hljs-meta">@Deprecated</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUserVisibleHint</span><span class="hljs-params">(<span class="hljs-keyword">boolean</span> isVisibleToUser)</span> </span>&#123;    <span class="hljs-keyword">if</span> (!mUserVisibleHint &amp;&amp; isVisibleToUser &amp;&amp; mState &lt; STARTED            &amp;&amp; mFragmentManager != <span class="hljs-keyword">null</span> &amp;&amp; isAdded() &amp;&amp; mIsCreated) &#123;        mFragmentManager.performPendingDeferredStart(<span class="hljs-keyword">this</span>);    &#125;    mUserVisibleHint = isVisibleToUser;    mDeferStart = mState &lt; STARTED &amp;&amp; !isVisibleToUser;    <span class="hljs-keyword">if</span> (mSavedFragmentState != <span class="hljs-keyword">null</span>) &#123;        <span class="hljs-comment">// Ensure that if the user visible hint is set before the Fragment has</span>        <span class="hljs-comment">// restored its state that we don&#x27;t lose the new value</span>        mSavedUserVisibleHint = isVisibleToUser;    &#125;&#125;</code></pre><p>并且从注释中可以看到使用 FragmentTransaction#setMaxLifecycle(Fragment, Lifecycle.State)方法来替换setUserVisibleHint方法。setMaxLifecycle实在Androidx 1.1.0中新增加的一个方法。setMaxLifecycle从名字上来看意思是设置一个最大的生命周期，因为这个方法是在FragmentTransaction中，因此我们可以知道应该是为Fragment来设置一个最大的生命周期。我们来看下setMaxLifecycle的源码：</p><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment">    * Set a ceiling for the state of an active fragment in this FragmentManager. If fragment is</span><span class="hljs-comment">    * already above the received state, it will be forced down to the correct state.</span><span class="hljs-comment">    *</span><span class="hljs-comment">    * &lt;p&gt;The fragment provided must currently be added to the FragmentManager to have it&#x27;s</span><span class="hljs-comment">    * Lifecycle state capped, or previously added as part of this transaction. The</span><span class="hljs-comment">    * &#123;<span class="hljs-doctag">@link</span> Lifecycle.State&#125; passed in must at least be &#123;<span class="hljs-doctag">@link</span> Lifecycle.State#CREATED&#125;, otherwise</span><span class="hljs-comment">    * an &#123;<span class="hljs-doctag">@link</span> IllegalArgumentException&#125; will be thrown.&lt;/p&gt;</span><span class="hljs-comment">    *</span><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> fragment the fragment to have it&#x27;s state capped.</span><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> state the ceiling state for the fragment.</span><span class="hljs-comment">    * <span class="hljs-doctag">@return</span> the same FragmentTransaction instance</span><span class="hljs-comment">    */</span>   <span class="hljs-meta">@NonNull</span>   <span class="hljs-function"><span class="hljs-keyword">public</span> FragmentTransaction <span class="hljs-title">setMaxLifecycle</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> Fragment fragment,</span></span><span class="hljs-function"><span class="hljs-params">           <span class="hljs-meta">@NonNull</span> Lifecycle.State state)</span> </span>&#123;       addOp(<span class="hljs-keyword">new</span> Op(OP_SET_MAX_LIFECYCLE, fragment, state));       <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;   &#125;</code></pre><p>这个方法接收一个Fragment参数和一个Lifecycle的状态参数。Lifecycle是jetpack中很重要的一个库，它具有对Activity和Fragment生命周期感知能力，相信很多同学都应该对Lifecycle都略知一二。在Lifecycle的State中定义了五种生命周期状态，如下：</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> State &#123;        <span class="hljs-comment">/**</span><span class="hljs-comment">         * Destroyed state for a LifecycleOwner. After this event, this Lifecycle will not dispatch</span><span class="hljs-comment">         * any more events. For instance, for an &#123;<span class="hljs-doctag">@link</span> android.app.Activity&#125;, this state is reached</span><span class="hljs-comment">         * &lt;b&gt;right before&lt;/b&gt; Activity&#x27;s &#123;<span class="hljs-doctag">@link</span> android.app.Activity#onDestroy() onDestroy&#125; call.</span><span class="hljs-comment">         */</span>        DESTROYED,        <span class="hljs-comment">/**</span><span class="hljs-comment">         * Initialized state for a LifecycleOwner. For an &#123;<span class="hljs-doctag">@link</span> android.app.Activity&#125;, this is</span><span class="hljs-comment">         * the state when it is constructed but has not received</span><span class="hljs-comment">         * &#123;<span class="hljs-doctag">@link</span> android.app.Activity#onCreate(android.os.Bundle) onCreate&#125; yet.</span><span class="hljs-comment">         */</span>        INITIALIZED,        <span class="hljs-comment">/**</span><span class="hljs-comment">         * Created state for a LifecycleOwner. For an &#123;<span class="hljs-doctag">@link</span> android.app.Activity&#125;, this state</span><span class="hljs-comment">         * is reached in two cases:</span><span class="hljs-comment">         * &lt;ul&gt;</span><span class="hljs-comment">         *     &lt;li&gt;after &#123;<span class="hljs-doctag">@link</span> android.app.Activity#onCreate(android.os.Bundle) onCreate&#125; call;</span><span class="hljs-comment">         *     &lt;li&gt;&lt;b&gt;right before&lt;/b&gt; &#123;<span class="hljs-doctag">@link</span> android.app.Activity#onStop() onStop&#125; call.</span><span class="hljs-comment">         * &lt;/ul&gt;</span><span class="hljs-comment">         */</span>        CREATED,        <span class="hljs-comment">/**</span><span class="hljs-comment">         * Started state for a LifecycleOwner. For an &#123;<span class="hljs-doctag">@link</span> android.app.Activity&#125;, this state</span><span class="hljs-comment">         * is reached in two cases:</span><span class="hljs-comment">         * &lt;ul&gt;</span><span class="hljs-comment">         *     &lt;li&gt;after &#123;<span class="hljs-doctag">@link</span> android.app.Activity#onStart() onStart&#125; call;</span><span class="hljs-comment">         *     &lt;li&gt;&lt;b&gt;right before&lt;/b&gt; &#123;<span class="hljs-doctag">@link</span> android.app.Activity#onPause() onPause&#125; call.</span><span class="hljs-comment">         * &lt;/ul&gt;</span><span class="hljs-comment">         */</span>        STARTED,        <span class="hljs-comment">/**</span><span class="hljs-comment">         * Resumed state for a LifecycleOwner. For an &#123;<span class="hljs-doctag">@link</span> android.app.Activity&#125;, this state</span><span class="hljs-comment">         * is reached after &#123;<span class="hljs-doctag">@link</span> android.app.Activity#onResume() onResume&#125; is called.</span><span class="hljs-comment">         */</span>        RESUMED;        <span class="hljs-comment">/**</span><span class="hljs-comment">         * Compares if this State is greater or equal to the given &#123;<span class="hljs-doctag">@code</span> state&#125;.</span><span class="hljs-comment">         *</span><span class="hljs-comment">         * <span class="hljs-doctag">@param</span> state State to compare with</span><span class="hljs-comment">         * <span class="hljs-doctag">@return</span> true if this State is greater or equal to the given &#123;<span class="hljs-doctag">@code</span> state&#125;</span><span class="hljs-comment">         */</span>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isAtLeast</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> State state)</span> </span>&#123;            <span class="hljs-keyword">return</span> compareTo(state) &gt;= <span class="hljs-number">0</span>;        &#125;    &#125;</code></pre><p>而在setMaxLifecycle中接收的生命周期状态要求不能低于CREATED，否则会抛出一个IllegalArgumentException的异常。当传入参数为DESTROYED或者INITIALIZED时则会抛出如下图的异常：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS8xMi8yOS8xNmY1MWE1NjA5MjMzYjFi?x-oss-process=image/format,png"><br>因此除去这两个生命周期外，仅剩下CREATED、STARTED、RESUMED三个生命周期状态的参数可用，那么接下来我们就逐个来研究这三个参数的效果。</p><h3 id="1-不设置setMaxLifecycle"><a href="#1-不设置setMaxLifecycle" class="headerlink" title="1.不设置setMaxLifecycle"></a>1.不设置setMaxLifecycle</h3><p>我们先来看下在不设置setMaxLifecycle的时候添加一个Fragment的状态，以便和后边的情况进行对比。首先我们在Activity中添加一个Fragment，代码如下：</p><pre><code class="hljs kotlin">fragment = TestLifecycleFragment.getInstance(Card.DECK[<span class="hljs-number">0</span>], <span class="hljs-number">0</span>)       <span class="hljs-keyword">val</span> fragmentTransaction = supportFragmentManager.beginTransaction()       fragmentTransaction.add(R.id.ll_fragment, fragment)       fragmentTransaction.commit()</code></pre><p>启动Activity，我们将该Fragment生命周期的日志打印出来如下：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS8xMi8yOS8xNmY1MGFlMTVhODk1NDBi?x-oss-process=image/format,png" alt="在这里插入图片描述"><br>可以看到这个Fragment生命周期从onAttach一直执行到了onResume。并且在Activity中成功显示出了Fragment</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS8xMi8yOS8xNmY1MWE1YzJhYjRkY2Y2?x-oss-process=image/format,png"></p><h3 id="2-setMaxLifecycle与CREATED"><a href="#2-setMaxLifecycle与CREATED" class="headerlink" title="2.setMaxLifecycle与CREATED"></a>2.setMaxLifecycle与CREATED</h3><p>接下来，我们将maxLifecycle设置为CREATED：</p><pre><code class="hljs kotlin">fragment = TestLifecycleFragment.getInstance(Card.DECK[<span class="hljs-number">0</span>], <span class="hljs-number">0</span>)<span class="hljs-keyword">val</span> fragmentTransaction = supportFragmentManager.beginTransaction()fragmentTransaction.add(R.id.ll_fragment, fragment)fragmentTransaction.setMaxLifecycle(fragment, Lifecycle.State.CREATED)fragmentTransaction.commit()</code></pre><p>再来看日志输出：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS8xMi8yOS8xNmY1MGFlMTgzYmMxMTI5?x-oss-process=image/format,png" alt="在这里插入图片描述"><br>可以看到该Fragment的生命周期仅仅执行到了onCreate就没再往下执行了。并且Activity中没有加载出来当前Fragment。</p><p>那么现在问题来了，假设Fragment已经执行到了onResume,此时再为Fragment设置一个CREATED的最大生命周期会出现什么样的情况呢？我们通过日志来验证一下：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS8xMi8yOS8xNmY1MWE3MWQ4MGY3NGFl?x-oss-process=image/format,png"><br>从日志中可以看到已经执行了onResume的Fragment，将其最大生命周期设置为CREATED后会执行onPause-&gt;onStop-&gt;onDestoryView。也就是回退到了onCreate的状态。</p><h3 id="3-setMaxLifecycle与STARTED"><a href="#3-setMaxLifecycle与STARTED" class="headerlink" title="3.setMaxLifecycle与STARTED"></a>3.setMaxLifecycle与STARTED</h3><p>接下来，我们将maxLifecycle设置为STARTED：</p><pre><code class="hljs kotlin">fragment = TestLifecycleFragment.getInstance(Card.DECK[<span class="hljs-number">0</span>], <span class="hljs-number">0</span>)<span class="hljs-keyword">val</span> fragmentTransaction = supportFragmentManager.beginTransaction()fragmentTransaction.add(R.id.ll_fragment, fragment)fragmentTransaction.setMaxLifecycle(fragment, Lifecycle.State.STARTED)fragmentTransaction.commit()</code></pre><p>日志输出如下：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS8xMi8yOS8xNmY1MGFlMTk1Mjk3NDJl?x-oss-process=image/format,png" alt="在这里插入图片描述"><br>可以看到Fragment的生命周期执行到了onStart,并且Activity中成功显示出了当前fragment。</p><p>同样，假设Fragment已经执行到了onResume方法再为其设置最大生命周期为STARTED会怎样呢？来看日志：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS8xMi8yOS8xNmY1MGFlMTljODdiOGIy?x-oss-process=image/format,png" alt="在这里插入图片描述"><br>可以看到，设置最大生命周期STARTED后Fragment执行了onPause方法，也就是生命周期退回到了onStart。</p><h3 id="4-setMaxLifecycle与RESUMED"><a href="#4-setMaxLifecycle与RESUMED" class="headerlink" title="4.setMaxLifecycle与RESUMED"></a>4.setMaxLifecycle与RESUMED</h3><p>最后，我们将maxLifecycle设置为RESUMED：</p><pre><code class="hljs kotlin">fragment = TestLifecycleFragment.getInstance(Card.DECK[<span class="hljs-number">0</span>], <span class="hljs-number">0</span>)<span class="hljs-keyword">val</span> fragmentTransaction = supportFragmentManager.beginTransaction()fragmentTransaction.add(R.id.ll_fragment, fragment)fragmentTransaction.setMaxLifecycle(fragment, Lifecycle.State.RESUMED)fragmentTransaction.commit()</code></pre><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS8xMi8yOS8xNmY1MGFlMTljOTViZjM1?x-oss-process=image/format,png" alt="在这里插入图片描述"><br>可以看到此时和第一种情况一样的效果,Fragment的生命周期执行到了onResume。</p><p>而对于已经执行了onResume后的Fragment，再去设置最大生命周期为RESUMED会怎么样呢？因为当前Fragment已经是RESUMED状态了,所以不会再去执行任何代码。</p><p>到这里我们可以得出一个结论：</p><blockquote><p><strong>通过setMaxLifecycle方法可以精确控制Fragment生命周期的状态，如果Fragment的生命周期状态小于被设置的最大生命周期，则当前Fragment的生命周期会执行到被设置的最大生命周期，反之，如果Fragment的生命周期状态大于被设置的最大生命周期，那么则会回退到被设置的最大生命周期。</strong></p></blockquote><p>有了这一结论，在ViewPager中便可以对Fragment的生命周期进行控制，以此来更方便的实现延迟加载功能了。</p><h2 id="三、Fragment延迟加载的今生"><a href="#三、Fragment延迟加载的今生" class="headerlink" title="三、Fragment延迟加载的今生"></a>三、Fragment延迟加载的今生</h2><h3 id="1、延迟加载新方案之于ViewPager"><a href="#1、延迟加载新方案之于ViewPager" class="headerlink" title="1、延迟加载新方案之于ViewPager"></a>1、延迟加载新方案之于ViewPager</h3><p>通过上一小节的分析我们知道了可以通过setMaxLifecycle来设置Fragment的最大生命周期，从而可以实现ViewPager中Fragment的延迟加载。当然，关于生命周期状态处理的操作无需我们自己实现，在Androidx 1.1.0版本中的FragmentStatePagerAdapter已经帮我们实现了，只需要在使用时候传进去相应的参数即可。</p><p>FragmentStatePagerAdapter的构造方法接收两个参数，如下：</p><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment">  * Constructor for &#123;<span class="hljs-doctag">@link</span> FragmentStatePagerAdapter&#125;.</span><span class="hljs-comment">  *</span><span class="hljs-comment">  * If &#123;<span class="hljs-doctag">@link</span> #BEHAVIOR_RESUME_ONLY_CURRENT_FRAGMENT&#125; is passed in, then only the current</span><span class="hljs-comment">  * Fragment is in the &#123;<span class="hljs-doctag">@link</span> Lifecycle.State#RESUMED&#125; state, while all other fragments are</span><span class="hljs-comment">  * capped at &#123;<span class="hljs-doctag">@link</span> Lifecycle.State#STARTED&#125;. If &#123;<span class="hljs-doctag">@link</span> #BEHAVIOR_SET_USER_VISIBLE_HINT&#125; is</span><span class="hljs-comment">  * passed, all fragments are in the &#123;<span class="hljs-doctag">@link</span> Lifecycle.State#RESUMED&#125; state and there will be</span><span class="hljs-comment">  * callbacks to &#123;<span class="hljs-doctag">@link</span> Fragment#setUserVisibleHint(boolean)&#125;.</span><span class="hljs-comment">  *</span><span class="hljs-comment">  * <span class="hljs-doctag">@param</span> fm fragment manager that will interact with this adapter</span><span class="hljs-comment">  * <span class="hljs-doctag">@param</span> behavior determines if only current fragments are in a resumed state</span><span class="hljs-comment">  */</span> <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">FragmentStatePagerAdapter</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> FragmentManager fm,</span></span><span class="hljs-function"><span class="hljs-params">         <span class="hljs-meta">@Behavior</span> <span class="hljs-keyword">int</span> behavior)</span> </span>&#123;     mFragmentManager = fm;     mBehavior = behavior; &#125;</code></pre><p>第一个FragmentManager 参数不必多说，第二个参数时一个枚举类型的Behavior参数，其可选值如下：</p><pre><code class="hljs kotlin"><span class="hljs-meta">@Retention(RetentionPolicy.SOURCE)</span><span class="hljs-meta">@IntDef(&#123;BEHAVIOR_SET_USER_VISIBLE_HINT, BEHAVIOR_RESUME_ONLY_CURRENT_FRAGMENT&#125;)</span><span class="hljs-keyword">private</span> <span class="hljs-meta">@interface</span> Behavior &#123; &#125;</code></pre><p>当behavior为BEHAVIOR_SET_USER_VISIBLE_HINT时，Fragment改变的时候，setUserVisibleHint方法会被调用，也就是这个参数其实是为了兼容以前的老代码。并且BEHAVIOR_SET_USER_VISIBLE_HINT参数已经被置为废弃。所以我们的可选参数只剩下了BEHAVIOR_RESUME_ONLY_CURRENT_FRAGMENT。</p><p>当behavior为BEHAVIOR_RESUME_ONLY_CURRENT_FRAGMENT时意味着只有当前显示的Fragment会被执行到onResume，而其它Fragment的生命周期都只会执行到onStart.</p><p>这一功能时如何实现的呢？我们追随BEHAVIOR_RESUME_ONLY_CURRENT_FRAGMENT的脚步找到了setPrimaryItem方法，这个方法的作用是设置ViewPager当前显示的Item，其源码如下：</p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setPrimaryItem</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> ViewGroup container, <span class="hljs-keyword">int</span> position, <span class="hljs-meta">@NonNull</span> Object object)</span> </span>&#123;        Fragment fragment = (Fragment)object;        <span class="hljs-keyword">if</span> (fragment != mCurrentPrimaryItem) &#123;            <span class="hljs-keyword">if</span> (mCurrentPrimaryItem != <span class="hljs-keyword">null</span>) &#123;                mCurrentPrimaryItem.setMenuVisibility(<span class="hljs-keyword">false</span>);                <span class="hljs-keyword">if</span> (mBehavior == BEHAVIOR_RESUME_ONLY_CURRENT_FRAGMENT) &#123;                    <span class="hljs-keyword">if</span> (mCurTransaction == <span class="hljs-keyword">null</span>) &#123;                        mCurTransaction = mFragmentManager.beginTransaction();                    &#125;                    mCurTransaction.setMaxLifecycle(mCurrentPrimaryItem, Lifecycle.State.STARTED);                &#125; <span class="hljs-keyword">else</span> &#123;                    mCurrentPrimaryItem.setUserVisibleHint(<span class="hljs-keyword">false</span>);                &#125;            &#125;            fragment.setMenuVisibility(<span class="hljs-keyword">true</span>);            <span class="hljs-keyword">if</span> (mBehavior == BEHAVIOR_RESUME_ONLY_CURRENT_FRAGMENT) &#123;                <span class="hljs-keyword">if</span> (mCurTransaction == <span class="hljs-keyword">null</span>) &#123;                    mCurTransaction = mFragmentManager.beginTransaction();                &#125;                mCurTransaction.setMaxLifecycle(fragment, Lifecycle.State.RESUMED);            &#125; <span class="hljs-keyword">else</span> &#123;                fragment.setUserVisibleHint(<span class="hljs-keyword">true</span>);            &#125;            mCurrentPrimaryItem = fragment;        &#125;    &#125;</code></pre><p>这段代码非常简单易懂，mCurrentPrimaryItem是当前正在显示的item，fragment是接下来要显示的item。可以看到当mBehavior 为BEHAVIOR_RESUME_ONLY_CURRENT_FRAGMENT时，mCurrentPrimaryItem的最大生命周期被设置为了STARTED，而fragment的最大生命周期则被设置为了RESUMED。而当mBehavior为BEHAVIOR_SET_USER_VISIBLE_HINT时仍然会调用setUserVisibleHint方法，这种情况就不再讨论，因为BEHAVIOR_SET_USER_VISIBLE_HINT也已经被废弃掉了。<br>那么我们着重来分析一下BEHAVIOR_RESUME_ONLY_CURRENT_FRAGMENT时的情况：</p><p><strong>mCurrentPrimaryItem是当前显示的Fragment，所以该Fragment必然已经执行到了onResume方法，而此时为其设置了最大生命周期STARTED，那么mCurrentPrimaryItem必然会执行onPause退回到STARTED状态。<br>而fragment当前生命周期状态为onStart，当为其设置了RESUME的最大生命周期状态后,fragment必然会执行onResume方法进入RESUMED状态。</strong></p><p>知道了这一结论后，我们再去进行懒加载的控制是不是就异常简单了？此时我们只需要一个flag去标志是否是第一次加载数据就可以了。因此，懒加载的实现可以如下：</p><pre><code class="hljs kotlin"><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestLifecycleFragment</span> : <span class="hljs-type">Fragment</span></span>() &#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> isFirstLoad = <span class="hljs-literal">true</span>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onResume</span><span class="hljs-params">()</span></span> &#123;        <span class="hljs-keyword">super</span>.onResume()        <span class="hljs-keyword">if</span> (isFirstLoad) &#123;        isFirstLoad = <span class="hljs-literal">false</span>            loadData()        &#125;    &#125;    <span class="hljs-keyword">abstract</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">loadData</span><span class="hljs-params">()</span></span>&#125;</code></pre><h3 id="2、延迟加载之于ViewPager2"><a href="#2、延迟加载之于ViewPager2" class="headerlink" title="2、延迟加载之于ViewPager2"></a>2、延迟加载之于ViewPager2</h3><p>上篇文章<a href="https://juejin.im/post/5df4aabe6fb9a0161104c8eb">《学不动也要学！深入了解ViewPager2》</a>中我们对ViewPager2有了比较深入的了解,其中在讲解ViewPager2的offScreenPageLimit时候得出过这样一个结论:</p><blockquote><p>ViewPager2的offScreenPageLimit默认值为OFFSCREEN_PAGE_LIMIT_DEFAULT,当setOffscreenPageLimit为OFFSCREEN_PAGE_LIMIT_DEFAULT时候会使用RecyclerView的缓存机制。默认只会加载当前显示的Fragment,而不会像ViewPager一样至少预加载一个item.当切换到下一个item的时候，当前Fragment会执行onPause方法，而下一个Fragment则会从onCreate一直执行到onResume。当再次滑动回第一个页面的时候当前页面同样会执行onPuase，而第一个页面会执行onResume。</p></blockquote><p>也就是说在ViewPager2中，默认关闭了预加载机制。没有了预加载机制再谈延迟加载其实也没有任何意义了。所以关于ViewPager2的延迟加载也就不用多说了吧？只需要将网络请求放到onStart中即可。相信随着ViewPager2的普及延迟加载的概念也会慢慢淡出开发者的视线。</p><p><strong>2020/1/4补充：</strong></p><p>如果为ViewPager2设置了offScreenPageLimit(1)那结果会是怎样的呢？我们来看日志：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC8xLzQvMTZmNzA3MTBjOTY1M2Y1Nw?x-oss-process=image/format,png"><br>从日志中可以看到ViewPager2预加载了一个Fragment，并且预加载的Fragment的生命周期仅仅执行到了onStart。所以此处我们可以猜测在FragmentStateAdapter中一定设置了setMaxLifecycle(fragment, STARTED)，具体源码不再贴出，大家可以自行查看。因此，此时处理懒加载问题其实和ViewPager的懒加载新方案如出一辙了，仅仅需要添加一个boolean值即可。</p><h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h2><p>本篇文章对于Fragment的延迟加载进行了深入的探究，并且了解了在Androidx 1.1.0版本中对Fragment最大生命周期状态的控制，从而探究出了Fragment延迟加载的新方案。对于ViewPager2，因其默认不会进行预加载因此也就意味着我们无需处理ViewPager2的延迟加载问题。好了，这一篇花费了我两个周末（其实是上周末写了一半偷了个懒）的文章到此就结束了，如果你从中学有所收获那么请你不要吝啬留下你的赞。</p><p><a href="https://github.com/zhpanvip/ViewPagerSample">本文涉及源码</a></p><h3 id="好库推荐"><a href="#好库推荐" class="headerlink" title="好库推荐"></a>好库推荐</h3><p>给大家推荐一下<a href="https://github.com/zhpanvip/BannerViewPager">BannerViewPager</a>。这是一个基于ViewPager实现的具有强大功能的无限轮播库。腾讯视频、QQ音乐、酷狗音乐、支付宝、天猫、淘宝、优酷视频、喜马拉雅、网易云音乐、哔哩哔哩等APP的Banner样式以及指示器样式都可以通过<a href="https://github.com/zhpanvip/BannerViewPager">BannerViewPager</a>实现 。欢迎大家到github关注<a href="https://github.com/zhpanvip/BannerViewPager">BannerViewPager</a>！</p>]]></content>
    
    
    
    <tags>
      
      <tag>Fragment</tag>
      
      <tag>懒加载</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>学不动也要学！深入了解ViewPager2</title>
    <link href="/2019/12/14/23.%E5%AD%A6%E4%B8%8D%E5%8A%A8%E4%B9%9F%E8%A6%81%E5%AD%A6%EF%BC%81%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3ViewPager2/"/>
    <url>/2019/12/14/23.%E5%AD%A6%E4%B8%8D%E5%8A%A8%E4%B9%9F%E8%A6%81%E5%AD%A6%EF%BC%81%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3ViewPager2/</url>
    
    <content type="html"><![CDATA[<p>就在上个月20号(2019年11月20号)，期待已久的ViewPager2 正式版终于发布了！不知道你是否已经蠢蠢欲动着手用ViewPager2去改造你项目的ViewPager了？什么？你还不知道ViewPager2？那么请你马上系好安全带，本篇文章将带你一览ViewPager2的风采。</p><h2 id="一、ViewPager2的新特性"><a href="#一、ViewPager2的新特性" class="headerlink" title="一、ViewPager2的新特性"></a>一、ViewPager2的新特性</h2><p>ViewPager2从名字就可以看出来它是ViewPager的升级版，既然是升级版那么它相比ViewPager有哪些新功能和哪些API变化呢？我们接着往下看。</p><h3 id="1-ViewPager2新特性"><a href="#1-ViewPager2新特性" class="headerlink" title="1.ViewPager2新特性"></a>1.ViewPager2新特性</h3><ul><li>基于RecyclerView实现。这意味着RecyclerView的优点将会被ViewPager2所继承。</li><li>支持竖直滑动。只需要一个参数就可以改变滑动方向。</li><li>支持关闭用户输入。通过setUserInputEnabled来设置是否禁止用户滑动页面。</li><li>支持通过编程方式滚动。通过fakeDragBy(offsetPx)代码模拟用户滑动页面。</li><li>CompositePageTransformer 支持同时添加多个PageTransformer。</li><li>支持DiffUtil ，可以添加数据集合改变的item动画。</li><li>支持RTL (right-to-left)布局。我觉得这个功能对国内开发者来说可能用处不大..</li></ul><h3 id="2-相比ViewPager变化的API"><a href="#2-相比ViewPager变化的API" class="headerlink" title="2.相比ViewPager变化的API"></a>2.相比ViewPager变化的API</h3><p>ViewPager2相比ViewPager做了哪些改变呢？研究了一番之后我大概列出以下几点：</p><ul><li>ViewPager2与ViewPager同是继承自ViewGrop，但是ViewPager2被声明成了final。意味着我们不可能再像ViewPager一样通过继承来修改ViewPager2的代码。</li><li>FragmentStatePagerAdapter被FragmentStateAdapter 替代</li><li>PagerAdapter被RecyclerView.Adapter替代</li><li>addPageChangeListener被registerOnPageChangeCallback。我们知道ViewPager的addPageChangeListener接收的是一个OnPageChangeListener的接口，而这个接口中有三个方法，当想要监听页面变化时需要重写这三个方法。而ViewPager2的registerOnPageChangeCallback方法接收的是一个叫OnPageChangeCallback的抽象类，因此我们可以选择性的重写需要的方法即可。</li><li>移除了setPargeMargin方法。</li></ul><p>以上所罗列的新特性和API可能并不完整，如有疏漏可以留言补充。</p><h2 id="二、开启ViewPager2之旅"><a href="#二、开启ViewPager2之旅" class="headerlink" title="二、开启ViewPager2之旅"></a>二、开启ViewPager2之旅</h2><p>ViewPager2位于androidx包下，也就是它不像ViewPager一样被内置在系统源码中。因此，使用ViewPager2需要额外的添加依赖库。另外，android support中不包含ViewPager，也就是要使用ViewPager2必须迁移到androidx才可以。</p><h3 id="1-添加依赖，目前ViewPager2的最新版本是1-0-0："><a href="#1-添加依赖，目前ViewPager2的最新版本是1-0-0：" class="headerlink" title="1.添加依赖，目前ViewPager2的最新版本是1.0.0："></a>1.添加依赖，目前ViewPager2的最新版本是1.0.0：</h3><pre><code class="hljs java">dependencies &#123;    implementation <span class="hljs-string">&quot;androidx.viewpager2:viewpager2:1.0.0&quot;</span>&#125;</code></pre><h3 id="2-ViewPager2布局文件："><a href="#2-ViewPager2布局文件：" class="headerlink" title="2.ViewPager2布局文件："></a>2.ViewPager2布局文件：</h3><pre><code class="hljs java">&lt;androidx.viewpager2.widget.ViewPager2       android:id=<span class="hljs-string">&quot;@+id/view_pager&quot;</span>       android:layout_width=<span class="hljs-string">&quot;match_parent&quot;</span>       android:layout_height=<span class="hljs-string">&quot;match_parent&quot;</span>       app:layout_constraintBottom_toBottomOf=<span class="hljs-string">&quot;parent&quot;</span>       app:layout_constraintLeft_toLeftOf=<span class="hljs-string">&quot;parent&quot;</span>       app:layout_constraintRight_toRightOf=<span class="hljs-string">&quot;parent&quot;</span>       app:layout_constraintTop_toTopOf=<span class="hljs-string">&quot;parent&quot;</span> /&gt;</code></pre><h3 id="3-ViewPager2的Adapter"><a href="#3-ViewPager2的Adapter" class="headerlink" title="3.ViewPager2的Adapter"></a>3.ViewPager2的Adapter</h3><p>因为ViewPager2内部封装的是RecyclerView，因此它的Adapter也就是RecyclerView的Adapter。</p><pre><code class="hljs kotlin"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyAdapter</span> : <span class="hljs-type">RecyclerView.Adapter</span>&lt;<span class="hljs-type">MyAdapter.PagerViewHolder</span>&gt;</span>() &#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> mList: List&lt;<span class="hljs-built_in">Int</span>&gt; = ArrayList()    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onCreateViewHolder</span><span class="hljs-params">(parent: <span class="hljs-type">ViewGroup</span>, viewType: <span class="hljs-type">Int</span>)</span></span>: PagerViewHolder &#123;        <span class="hljs-keyword">val</span> itemView = LayoutInflater.from(parent.context).inflate(R.layout.item_page, parent, <span class="hljs-literal">false</span>)        <span class="hljs-keyword">return</span> PagerViewHolder(itemView)    &#125;    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onBindViewHolder</span><span class="hljs-params">(holder: <span class="hljs-type">PagerViewHolder</span>, position: <span class="hljs-type">Int</span>)</span></span> &#123;        holder.bindData(mList[position])    &#125;    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">setList</span><span class="hljs-params">(list: <span class="hljs-type">List</span>&lt;<span class="hljs-type">Int</span>&gt;)</span></span> &#123;        mList = list    &#125;    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">getItemCount</span><span class="hljs-params">()</span></span>: <span class="hljs-built_in">Int</span> &#123;        <span class="hljs-keyword">return</span> mList.size    &#125;<span class="hljs-comment">//ViewHolder需要继承RecycleView.ViewHolder</span>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PagerViewHolder</span></span>(itemView: View) : RecyclerView.ViewHolder(itemView) &#123;        <span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> mTextView: TextView = itemView.findViewById(R.id.tv_text)        <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> colors = arrayOf(<span class="hljs-string">&quot;#CCFF99&quot;</span>,<span class="hljs-string">&quot;#41F1E5&quot;</span>,<span class="hljs-string">&quot;#8D41F1&quot;</span>,<span class="hljs-string">&quot;#FF99CC&quot;</span>)        <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">bindData</span><span class="hljs-params">(i: <span class="hljs-type">Int</span>)</span></span> &#123;            mTextView.text = i.toString()            mTextView.setBackgroundColor(Color.parseColor(colors[i]))        &#125;    &#125;&#125;</code></pre><p>item_page中代码如下：</p><pre><code class="hljs kotlin">&lt;LinearLayout xmlns:android=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span>    android:layout_width=<span class="hljs-string">&quot;match_parent&quot;</span>    android:layout_height=<span class="hljs-string">&quot;match_parent&quot;</span>    android:gravity=<span class="hljs-string">&quot;center&quot;</span>&gt;    &lt;TextView        android:id=<span class="hljs-string">&quot;@+id/tv_text&quot;</span>        android:background=<span class="hljs-string">&quot;@color/colorPrimaryDark&quot;</span>        android:layout_width=<span class="hljs-string">&quot;match_parent&quot;</span>        android:layout_height=<span class="hljs-string">&quot;280dp&quot;</span>        android:gravity=<span class="hljs-string">&quot;center&quot;</span>        android:textColor=<span class="hljs-string">&quot;#ffffff&quot;</span>        android:textSize=<span class="hljs-string">&quot;22sp&quot;</span> /&gt;&lt;/LinearLayout&gt;</code></pre><h3 id="4-在Activity中为ViewPager设置Adapter："><a href="#4-在Activity中为ViewPager设置Adapter：" class="headerlink" title="4.在Activity中为ViewPager设置Adapter："></a>4.在Activity中为ViewPager设置Adapter：</h3><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> viewPager2 = findViewById&lt;ViewPager2&gt;(R.id.view_pager)      <span class="hljs-keyword">val</span> myAdapter = MyAdapter()      myAdapter.setList(<span class="hljs-keyword">data</span>)      viewPager2.adapter = myAdapter</code></pre><p>很简单就完成了一个ViewPager的功能，来看下效果怎么样：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS8xMi8xNC8xNmYwM2JhZjJkMDAzYzli?x-oss-process=image/format,png" alt="在这里插入图片描述"></p><h3 id="5-ViewPager2竖直滑动"><a href="#5-ViewPager2竖直滑动" class="headerlink" title="5.ViewPager2竖直滑动"></a>5.ViewPager2竖直滑动</h3><p>接下来我们通过一行代码为其设置竖直滑动</p><pre><code class="hljs kotlin">viewPager2.orientation = ViewPager2.ORIENTATION_VERTICAL</code></pre><p>竖直滑动用ViewPager是很难实现的，而通过ViewPager2只需要设置一个参数即可。来看下效果：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS8xMi8xNC8xNmYwM2JhZjJjZTdiNTI4?x-oss-process=image/format,png" alt="在这里插入图片描述"></p><h3 id="6-页面滑动事件监听"><a href="#6-页面滑动事件监听" class="headerlink" title="6.页面滑动事件监听"></a>6.页面滑动事件监听</h3><p>上文已经提到过了，我们为ViewPager设置页面滑动的监听事件需要重写三个方法，而为ViewPager2设置监听事件只需要重写需要的方法即可，因为ViewPager2中OnPageChangeCallback是一个抽象类。</p><pre><code class="hljs kotlin">viewPager2.registerOnPageChangeCallback(<span class="hljs-keyword">object</span> : ViewPager2.OnPageChangeCallback() &#123;            <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onPageSelected</span><span class="hljs-params">(position: <span class="hljs-type">Int</span>)</span></span> &#123;                <span class="hljs-keyword">super</span>.onPageSelected(position)                Toast.makeText(<span class="hljs-keyword">this</span><span class="hljs-symbol">@MainActivity</span>, <span class="hljs-string">&quot;page selected <span class="hljs-variable">$position</span>&quot;</span>, Toast.LENGTH_SHORT).show()            &#125;        &#125;)</code></pre><h3 id="7-setUserInputEnabled与fakeDragBy"><a href="#7-setUserInputEnabled与fakeDragBy" class="headerlink" title="7.setUserInputEnabled与fakeDragBy"></a>7.setUserInputEnabled与fakeDragBy</h3><p>我们知道，在使用ViewPager的时候想要禁止用户滑动需要重写ViewPager的onInterceptTouchEvent。而ViewPager2被声明为了final，我们无法再去继承ViewPager2。那么我们应该怎么禁止ViewPager2的滑动呢？其实在ViewPager2中已经为我们提供了这个功能，只需要通过setUserInputEnabled即可实现。</p><pre><code class="hljs kotlin">viewPager2.isUserInputEnabled = <span class="hljs-literal">false</span></code></pre><p>同时ViewPager2新增了一个fakeDragBy的方法。通过这个方法可以来模拟拖拽。在使用fakeDragBy前需要先beginFakeDrag方法来开启模拟拖拽。fakeDragBy会返回一个boolean值，true表示有fake drag正在执行，而返回false表示当前没有fake drag在执行。我们通过代码来尝试下：</p><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">fakeDragBy</span><span class="hljs-params">(view: <span class="hljs-type">View</span>)</span></span> &#123;        viewPager2.beginFakeDrag()        <span class="hljs-keyword">if</span> (viewPager2.fakeDragBy(-<span class="hljs-number">310f</span>))            viewPager2.endFakeDrag()    &#125;</code></pre><p>需要注意到是fakeDragBy接受一个float的参数，当参数值为正数时表示向前一个页面滑动，当值为负数时表示向下一个页面滑动。<br>下面来看下效果图：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS8xMi8xNC8xNmYwM2JhZjJlZmY2ZWY4?x-oss-process=image/format,png" alt="在这里插入图片描述"><br>演示图中禁止了用户输入，通过按钮点击可以模拟用户滑动。</p><h2 id="三、ViewPager2的PageTransformer"><a href="#三、ViewPager2的PageTransformer" class="headerlink" title="三、ViewPager2的PageTransformer"></a>三、ViewPager2的PageTransformer</h2><p>相比ViewPager，ViewPager2的Transformer功能有了很大的扩展。ViewPager2不仅可以通过PageTransformer用来设置页面动画，还可以用PageTransformer设置页面间距以及同时添加多个PageTransformer。接下来我们就来认识下ViewPager2的PageTransformer吧！</p><h3 id="1-setPageMargin"><a href="#1-setPageMargin" class="headerlink" title="1.setPageMargin"></a>1.setPageMargin</h3><p>在第一章中我们提到了ViewPager2移除了setPageMargin方法，那么怎么为ViewPager2设置页面间距呢？其实在ViewPager2中为我们提供了MarginPageTransformer，我们可以通过ViewPager2的setPageTransformer方法来设置页面间距。代码如下：</p><pre><code class="hljs kotlin">viewPager2.setPageTransformer(MarginPageTransformer(resources.getDimension(R.dimen.dp_10).toInt()))</code></pre><p>上述代码我们为ViewPager2设置了10dp的页面间距。效果如下：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS8xMi8xNC8xNmYwM2JhZjJkMmQzODkw?x-oss-process=image/format,png" alt="在这里插入图片描述"></p><h3 id="2-认识CompositePageTransformer"><a href="#2-认识CompositePageTransformer" class="headerlink" title="2.认识CompositePageTransformer"></a>2.认识CompositePageTransformer</h3><p>这个时候我们应该有个疑问，为ViewPager2设置了页面间距后如果还想设置页面动画的Transformer怎么办呢？这时候就该CompositePageTransformer出场了。从名字上也可以看出来它是一个组合的PageTransformer。没错，CompositePageTransformer实现了PageTransformer接口，同时在其内部维护了一个List集合，我们可以将多个PageTransformer添加到CompositePageTransformer中。</p><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> compositePageTransformer = CompositePageTransformer()       compositePageTransformer.addTransformer(ScaleInTransformer())       compositePageTransformer.addTransformer(MarginPageTransformer(resources.getDimension(R.dimen.dp_10).toInt()))       viewPager2.setPageTransformer(compositePageTransformer)</code></pre><p>上述代码中我们通过CompositePageTransformer为ViewPager设置了MarginPageTransformer和一个页面缩放的ScaleInTransformer。来看下效果：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS8xMi8xNC8xNmYwM2JhZjJmNGQ0MzA1?x-oss-process=image/format,png" alt="在这里插入图片描述"></p><h3 id="3-ViewPager2中的PageTransformer"><a href="#3-ViewPager2中的PageTransformer" class="headerlink" title="3.ViewPager2中的PageTransformer"></a>3.ViewPager2中的PageTransformer</h3><p>PageTransformer是一个位于ViewPager2中的接口，因此ViewPager2的PageTransformer是独立于ViewPager的，它与ViewPager的PageTransformer没有任何关系。虽然如此，却不必担心。因为ViewPager2的PageTransformer和ViewPager的PageTransformer实现方式一模一样。我们看下上一小节中用到的ScaleInTransformer：</p><pre><code class="hljs kotlin"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ScaleInTransformer</span> : <span class="hljs-type">ViewPager2.PageTransformer &#123;</span></span>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> mMinScale = DEFAULT_MIN_SCALE    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">transformPage</span><span class="hljs-params">(view: <span class="hljs-type">View</span>, position: <span class="hljs-type">Float</span>)</span></span> &#123;        view.elevation = -abs(position)        <span class="hljs-keyword">val</span> pageWidth = view.width        <span class="hljs-keyword">val</span> pageHeight = view.height        view.pivotY = (pageHeight / <span class="hljs-number">2</span>).toFloat()        view.pivotX = (pageWidth / <span class="hljs-number">2</span>).toFloat()        <span class="hljs-keyword">if</span> (position &lt; -<span class="hljs-number">1</span>) &#123;            view.scaleX = mMinScale            view.scaleY = mMinScale            view.pivotX = pageWidth.toFloat()        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (position &lt;= <span class="hljs-number">1</span>) &#123;            <span class="hljs-keyword">if</span> (position &lt; <span class="hljs-number">0</span>) &#123;                <span class="hljs-keyword">val</span> scaleFactor = (<span class="hljs-number">1</span> + position) * (<span class="hljs-number">1</span> - mMinScale) + mMinScale                view.scaleX = scaleFactor                view.scaleY = scaleFactor                view.pivotX = pageWidth * (DEFAULT_CENTER + DEFAULT_CENTER * -position)            &#125; <span class="hljs-keyword">else</span> &#123;                <span class="hljs-keyword">val</span> scaleFactor = (<span class="hljs-number">1</span> - position) * (<span class="hljs-number">1</span> - mMinScale) + mMinScale                view.scaleX = scaleFactor                view.scaleY = scaleFactor                view.pivotX = pageWidth * ((<span class="hljs-number">1</span> - position) * DEFAULT_CENTER)            &#125;        &#125; <span class="hljs-keyword">else</span> &#123;            view.pivotX = <span class="hljs-number">0f</span>            view.scaleX = mMinScale            view.scaleY = mMinScale        &#125;    &#125;    <span class="hljs-keyword">companion</span> <span class="hljs-keyword">object</span> &#123;        <span class="hljs-keyword">const</span> <span class="hljs-keyword">val</span> DEFAULT_MIN_SCALE = <span class="hljs-number">0.85f</span>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">val</span> DEFAULT_CENTER = <span class="hljs-number">0.5f</span>    &#125;&#125;</code></pre><h3 id="4-ViewPager2的一屏多页效果"><a href="#4-ViewPager2的一屏多页效果" class="headerlink" title="4.ViewPager2的一屏多页效果"></a>4.ViewPager2的一屏多页效果</h3><p>在ViewPager2的官方Sample上看到了ViewPager2的一屏多页可以通过为RecyclerView设置Padding来实现。代码如下：</p><pre><code class="hljs kotlin">viewPager2.apply &#123;             offscreenPageLimit=<span class="hljs-number">1</span>           <span class="hljs-keyword">val</span> recyclerView= getChildAt(<span class="hljs-number">0</span>) <span class="hljs-keyword">as</span> RecyclerView            recyclerView.apply &#123;                <span class="hljs-keyword">val</span> padding = resources.getDimensionPixelOffset(R.dimen.dp_10) +                        resources.getDimensionPixelOffset(R.dimen.dp_10)                <span class="hljs-comment">// setting padding on inner RecyclerView puts overscroll effect in the right place</span>                setPadding(padding, <span class="hljs-number">0</span>, padding, <span class="hljs-number">0</span>)                clipToPadding = <span class="hljs-literal">false</span>            &#125;        &#125;<span class="hljs-keyword">val</span> compositePageTransformer = CompositePageTransformer()compositePageTransformer.addTransformer(ScaleInTransformer())compositePageTransformer.addTransformer(MarginPageTransformer(resources.getDimension(R.dimen.dp_10).toInt()))viewPager2.setPageTransformer(compositePageTransformer)</code></pre><p>最后，我们来看下效果<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS8xMi8xNC8xNmYwM2JhZjJmNGZmYTgw?x-oss-process=image/format,png" alt="在这里插入图片描述"></p><h2 id="四、ViewPager2与Fragment"><a href="#四、ViewPager2与Fragment" class="headerlink" title="四、ViewPager2与Fragment"></a>四、ViewPager2与Fragment</h2><p>我们前面也已经提到了ViewPager2中新增的FragmentStateAdapter 替代了ViewPager的FragmentStatePagerAdapter。那么来我们就用ViewPager2来实现一个Activity中嵌套Fragment的实例。</p><h3 id="1-Activity的layout中添加ViewPager2"><a href="#1-Activity的layout中添加ViewPager2" class="headerlink" title="1.Activity的layout中添加ViewPager2"></a>1.Activity的layout中添加ViewPager2</h3><pre><code class="hljs kotlin">&lt;androidx.viewpager2.widget.ViewPager2           android:id=<span class="hljs-string">&quot;@+id/vp_fragment&quot;</span>           android:layout_width=<span class="hljs-string">&quot;match_parent&quot;</span>           android:layout_height=<span class="hljs-string">&quot;match_parent&quot;</span>           android:layout_above=<span class="hljs-string">&quot;@id/rg_tab&quot;</span> /&gt;</code></pre><h3 id="2-实现FragmentStateAdapter"><a href="#2-实现FragmentStateAdapter" class="headerlink" title="2.实现FragmentStateAdapter"></a>2.实现FragmentStateAdapter</h3><pre><code class="hljs kotlin"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AdapterFragmentPager</span></span>(fragmentActivity: FragmentActivity) : FragmentStateAdapter(fragmentActivity) &#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> fragments: SparseArray&lt;BaseFragment&gt; = SparseArray()    <span class="hljs-keyword">init</span> &#123;        fragments.put(PAGE_HOME, HomeFragment.getInstance())        fragments.put(PAGE_FIND, PageFragment.getInstance())        fragments.put(PAGE_INDICATOR, IndicatorFragment.getInstance())        fragments.put(PAGE_OTHERS, OthersFragment.getInstance())    &#125;    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">createFragment</span><span class="hljs-params">(position: <span class="hljs-type">Int</span>)</span></span>: Fragment &#123;        <span class="hljs-keyword">var</span> fragment: Fragment        <span class="hljs-keyword">when</span> (position) &#123;            PAGE_HOME -&gt; &#123;                <span class="hljs-keyword">if</span> (fragments.<span class="hljs-keyword">get</span>(PAGE_HOME) == <span class="hljs-literal">null</span>) &#123;                    fragment = HomeFragment.getInstance();                    fragments.put(PAGE_HOME, fragment)                &#125; <span class="hljs-keyword">else</span> &#123;                    fragment = fragments.<span class="hljs-keyword">get</span>(PAGE_HOME)                &#125;            &#125;            PAGE_FIND -&gt; &#123;                <span class="hljs-keyword">if</span> (fragments.<span class="hljs-keyword">get</span>(PAGE_FIND) == <span class="hljs-literal">null</span>) &#123;                    fragment = PageFragment.getInstance();                    fragments.put(PAGE_FIND, fragment)                &#125; <span class="hljs-keyword">else</span> &#123;                    fragment = fragments.<span class="hljs-keyword">get</span>(PAGE_FIND)                &#125;            &#125;            PAGE_INDICATOR -&gt; &#123;                <span class="hljs-keyword">if</span> (fragments.<span class="hljs-keyword">get</span>(PAGE_INDICATOR) == <span class="hljs-literal">null</span>) &#123;                    fragment = IndicatorFragment.getInstance();                    fragments.put(PAGE_INDICATOR, fragment)                &#125; <span class="hljs-keyword">else</span> &#123;                    fragment = fragments.<span class="hljs-keyword">get</span>(PAGE_INDICATOR)                &#125;            &#125;            PAGE_OTHERS -&gt; &#123;                <span class="hljs-keyword">if</span> (fragments.<span class="hljs-keyword">get</span>(PAGE_OTHERS) == <span class="hljs-literal">null</span>) &#123;                    fragment = OthersFragment.getInstance();                    fragments.put(PAGE_OTHERS, fragment)                &#125; <span class="hljs-keyword">else</span> &#123;                    fragment = fragments.<span class="hljs-keyword">get</span>(PAGE_OTHERS)                &#125;            &#125;            <span class="hljs-keyword">else</span> -&gt; &#123;                <span class="hljs-keyword">if</span> (fragments.<span class="hljs-keyword">get</span>(PAGE_HOME) == <span class="hljs-literal">null</span>) &#123;                    fragment = HomeFragment.getInstance();                    fragments.put(PAGE_HOME, fragment)                &#125; <span class="hljs-keyword">else</span> &#123;                    fragment = fragments.<span class="hljs-keyword">get</span>(PAGE_HOME)                &#125;            &#125;        &#125;        <span class="hljs-keyword">return</span> fragment    &#125;    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">getItemCount</span><span class="hljs-params">()</span></span>: <span class="hljs-built_in">Int</span> &#123;        <span class="hljs-keyword">return</span> fragments.size()    &#125;    <span class="hljs-keyword">companion</span> <span class="hljs-keyword">object</span> &#123;        <span class="hljs-keyword">const</span> <span class="hljs-keyword">val</span> PAGE_HOME = <span class="hljs-number">0</span>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">val</span> PAGE_FIND = <span class="hljs-number">1</span>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">val</span> PAGE_INDICATOR = <span class="hljs-number">2</span>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">val</span> PAGE_OTHERS = <span class="hljs-number">3</span>    &#125;&#125;</code></pre><h3 id="3-在Activity中为ViewPager2设置FragmentStateAdapter"><a href="#3-在Activity中为ViewPager2设置FragmentStateAdapter" class="headerlink" title="3.在Activity中为ViewPager2设置FragmentStateAdapter"></a>3.在Activity中为ViewPager2设置FragmentStateAdapter</h3><pre><code class="hljs kotlin">vp_fragment.adapter = AdapterFragmentPager(<span class="hljs-keyword">this</span>)       vp_fragment.offscreenPageLimit = <span class="hljs-number">3</span>       vp_fragment.isUserInputEnabled=<span class="hljs-literal">false</span></code></pre><h2 id="五、ViewPager2与TabLayout"><a href="#五、ViewPager2与TabLayout" class="headerlink" title="五、ViewPager2与TabLayout"></a>五、ViewPager2与TabLayout</h2><p>TabLayout也是项目中经常用到的一个控件，它通常会与ViewPager一起出现。那么对于ViewPager2应该怎么使用Tablayout呢？这需要我们认识一个新类TabLayoutMediator，这个类是在material-1.2.0中新增的一个类，目前material包的最新版本是1.2.0-alpha03，因此需要我们单独引入这个包，依赖如下：</p><pre><code class="hljs kotlin">implementation <span class="hljs-string">&#x27;com.google.android.material:material:1.2.0-alpha03&#x27;</span></code></pre><p>TabLayoutMediator的构造方法接收三个参数，第一个参数为TabLayout；第二个参数为ViewPager2；第三个参数是TabConfigurationStrategy，这是一个接口，该接口中有一个方法onConfigureTab(@NonNull TabLayout.Tab tab, int position),第一个参数是当前Tab,第二个当前position，源码如下：</p><pre><code class="hljs kotlin"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">TabConfigurationStrategy</span> </span>&#123;  <span class="hljs-comment">/**</span><span class="hljs-comment">   * Called to configure the tab for the page at the specified position. Typically calls &#123;<span class="hljs-doctag">@link</span></span><span class="hljs-comment">   * TabLayout.Tab#setText(CharSequence)&#125;, but any form of styling can be applied.</span><span class="hljs-comment">   *</span><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> tab The Tab which should be configured to represent the title of the item at the given</span><span class="hljs-comment">   *     position in the data set.</span><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> position The position of the item within the adapter&#x27;s data set.</span><span class="hljs-comment">   */</span>  void onConfigureTab(<span class="hljs-meta">@NonNull</span> TabLayout.Tab tab, int position);&#125;</code></pre><p> 接下来我们便可以通过TabLayoutMediator将TabLayout与ViewPager2关联起来了： </p><pre><code class="hljs kotlin">TabLayoutMediator(tab_layout, view_pager) &#123; tab, position -&gt;            <span class="hljs-comment">//  为Tab设置Text</span>            tab.text = Card.DECK[position].toString()        &#125;.attach()</code></pre><p>使用起来非常简单，实现效果如下图所示：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC8xLzEzLzE2ZjllZTk3OTMyYWU1Njk?x-oss-process=image/format,png"></p><h2 id="六、小结"><a href="#六、小结" class="headerlink" title="六、小结"></a>六、小结</h2><p>本篇文章我们认识了ViewPager2的新特性以及其用法。总得来说ViewPager2相比ViewPager不管在性能上还是在功能上都有了很大的提升。因此，我相信在不久的未来ViewPager2必定会取代ViewPager。那么，你是否已经考虑将ViewPager2用到你的项目中了呢？</p><p>最后再来给大家推荐一下<a href="https://github.com/zhpanvip/BannerViewPager">BannerViewPager</a>。这是一个基于ViewPager实现的具有强大功能的无限轮播库。在未来，我会在BannerViewPager 3.0版本中用ViewPager2来重构代码。欢迎大家到GitHub关注<a href="https://github.com/zhpanvip/BannerViewPager">BannerViewPager</a> 。</p><p><a href="https://download.csdn.net/download/qq_20521573/12032894">本文涉及源码下载</a></p><p>第四节中ViewPager2与Fragment的代码见：</p><p><a href="https://github.com/zhpanvip/BannerViewPager">BannerViewPager</a> </p>]]></content>
    
    
    
    <tags>
      
      <tag>ViewPager2</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>干货满满，整理给程序员的15款开发利器</title>
    <link href="/2019/12/05/22.%E5%B9%B2%E8%B4%A7%E6%BB%A1%E6%BB%A1%EF%BC%8C%E6%95%B4%E7%90%86%E7%BB%99%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%8415%E6%AC%BE%E5%BC%80%E5%8F%91%E5%88%A9%E5%99%A8/"/>
    <url>/2019/12/05/22.%E5%B9%B2%E8%B4%A7%E6%BB%A1%E6%BB%A1%EF%BC%8C%E6%95%B4%E7%90%86%E7%BB%99%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%8415%E6%AC%BE%E5%BC%80%E5%8F%91%E5%88%A9%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<p>今天给大家分享一些开发者必备的神器，这些都是笔者在几年的工作中收集到的，对于开发者非常有用的小工具。我将这些工具分为了四个部分来介绍，分别时—图片篇、文档篇、开发篇和插件篇。文章会对于各个小工具的功能及用途做一个简单介绍，并会给出星级评分，当然评分只能作为参考，因为不同工具对于不同的人有不同的重要性，这些评分是站在笔者角度来分析的。</p><h2 id="一、图片篇"><a href="#一、图片篇" class="headerlink" title="一、图片篇"></a>一、图片篇</h2><h3 id="1-GIF神器–ezgif"><a href="#1-GIF神器–ezgif" class="headerlink" title="1.GIF神器–ezgif"></a><a href="https://ezgif.com/video-to-gif">1.GIF神器–ezgif</a></h3><p>星级评分：<font color=orange >★★★★★</font><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS8xMi80LzE2ZWQxNGQxMzcxNzQ1NTE?x-oss-process=image/format,png"><br>这是一个国外站点，从名字上就可以看出这是一个Gif相关的网站。这个网站绝对称得上是一个神器，它不仅可以将视频转换为GIF，还支持GIF图片的编辑、制作、裁剪，修改尺寸、美化甚至还可以GIF转视频、倒放等等众多功能。最重要的一点是完全免费！！！所以这个工具的评分直怼到五分毫不为过。想要了解更多还是大家亲自体验！</p><h3 id="2-图片压缩神器–TinyPNG"><a href="#2-图片压缩神器–TinyPNG" class="headerlink" title="2.图片压缩神器–TinyPNG"></a><a href="https://tinypng.com/">2.图片压缩神器–TinyPNG</a></h3><p>星级评分：<font color=orange >★★★★★</font><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS8xMi80LzE2ZWQxNGRhYTY0YTFlNTU?x-oss-process=image/format,png"><br>这是一个图片无损压缩的小工具，同样来自国外。通常在App开发过程中我们都会格外注意App包的内存，拿Android的一个30M的Apk来说可能有一半以上的内存都是图片。而TinyPNG提供了批量压缩打包下载的强大功能。同时，这个网站还提供了MAC和Windows的桌面程序（桌面端限每月500张）。下图是一张Mac桌面端的截图：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS8xMi80LzE2ZWQxNGUwZjU2MjNkZmI?x-oss-process=image/format,png"><br>可以看到我们从UI拿到的图片，经过TinyPng压缩后体积减少了78.2%-91.1%。但压缩前和压缩后图片的质量肉眼几乎看不出任何差别！这对前端开发同学来说堪称神器。五星毫无悬念！</p><h3 id="3-在线作图–ProcessOn"><a href="#3-在线作图–ProcessOn" class="headerlink" title="3.在线作图–ProcessOn"></a><a href="https://www.processon.com/;jsessionid=64008D63D312671F43AE9D007BB51386.jvm1">3.在线作图–ProcessOn</a></h3><p>星级评分：<font color=orange >★★★★☆</font></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS8xMi80LzE2ZWQxNGU1YmYwMTEyMTk?x-oss-process=image/format,png"><br>这是一款免费的在线作图工具，支持流程图、思维导图、原型图、UML、网络拓扑图等。这个网站可以说应用广泛，各行各业都可能会用得到。贴一张使用ProcessOn制作的思维导图仅供参考：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS8xMi80LzE2ZWQxNGI5YmQ3MWI4MjU?x-oss-process=image/format,png" alt="在这里插入图片描述"><br>注：图片来源ProcessOn<br>虽然这个网站声称是免费作图，但免费是由一定限制的，每个账号做多可以免费保存十个文件。这也是和前两个网站相比唯一的缺点，毕竟公司也要生存，有盈利才能生存嘛，收费不为过！星级评分四颗星！</p><h3 id="4-Android-9阴影图生成器–Android-Shadow-Generator"><a href="#4-Android-9阴影图生成器–Android-Shadow-Generator" class="headerlink" title="4.Android .9阴影图生成器–Android Shadow Generator"></a><a href="https://inloop.github.io/shadow4android/">4.Android .9阴影图生成器–Android Shadow Generator</a></h3><p>星级评分：<font color=orange >★★★☆☆</font><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS8xMi80LzE2ZWQxNGI5YmZmZmY3MjU?x-oss-process=image/format,png" alt="在这里插入图片描述"><br>Android开发的同学都应该比较熟悉.9图，它是一种可以拉伸的图片。同时，做Android开发的同学也应该知道做阴影效果的痛苦。而Android Shadow Generator这个网站就提供了一个可以生成带阴影的.9图。通过这个工具不仅可以定义阴影的大小还可以顶指圆角、颜色等等。但是这个工具使用的局限性比较大，对于Android开发者来说是个不错的福利。三颗星拿走！</p><h3 id="5-业界大佬–PhotoShop"><a href="#5-业界大佬–PhotoShop" class="headerlink" title="5.业界大佬–PhotoShop"></a><a href="https://www.adobe.com/cn/products/photoshop/free-trial-download.html">5.业界大佬–PhotoShop</a></h3><p>星级评分：<font color=orange >★★★★★</font></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS8xMi80LzE2ZWQxNGU5M2JkNjNlYTg?x-oss-process=image/format,png"><br>这个软件应该不用我去做过多解释了吧，毕竟它的名气可以说无人不知无人不晓。作为一款专业的图像处理软件，想要掌握它并不是一件容易的事，但是作为一个开发人员并不需要掌握太高深的技能，了解一些简单技巧就足以应对常见问题了。没有五颗星说不过去吧？</p><h2 id="二、文档篇"><a href="#二、文档篇" class="headerlink" title="二、文档篇"></a>二、文档篇</h2><h3 id="1-PDF神器–Easy-PDF"><a href="#1-PDF神器–Easy-PDF" class="headerlink" title="1.PDF神器–Easy PDF"></a><a href="https://easypdf.com/cn">1.PDF神器–Easy PDF</a></h3><p>星级评分：<font color=orange >★★★★★</font><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS8xMi80LzE2ZWQxNGVkYWMwZTVmZGU?x-oss-process=image/format,png"><br>EasyPDF–又一款神器横空出世，它提供了强大的PDF转换功能，可以PDF转Word、PDF转PPT、Word转PDF…各种PDF转换功能应有尽有。最重要的一点是免费！！！五星还有什么说的么？</p><h3 id="2-在线文档编辑器–腾讯文档"><a href="#2-在线文档编辑器–腾讯文档" class="headerlink" title="2.在线文档编辑器–腾讯文档"></a><a href="https://docs.qq.com/desktop">2.在线文档编辑器–腾讯文档</a></h3><p>星级评分：<font color=orange >★★★★☆</font></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS8xMi80LzE2ZWQxNTQ5YWI0NTZkM2E?x-oss-process=image/format,png"><br>这是一个免费的在线文档编辑器,提供了在线编辑Word、Excel、PPT等文档，同时可以将文档分享给好友还可以授权好友共同编辑文档。是一个很不错的文档编辑工具。四颗星物有所值。</p><h3 id="4-Markdown编辑器–MarkdownPad"><a href="#4-Markdown编辑器–MarkdownPad" class="headerlink" title="4.Markdown编辑器–MarkdownPad"></a><a href="http://markdownpad.com/">4.Markdown编辑器–MarkdownPad</a></h3><p>星级评分：<font color=orange >★★★☆☆</font></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS8xMi80LzE2ZWQxNjFiNjM5MWUzNDU?x-oss-process=image/format,png"></p><p>MarkdownPad是一款桌面端的Markdown编辑器，对于经常使用Markdown写博客的开发者来说是一款很好用的工具。但是由于是国外的站点，下载比较慢，且安装好后在Windows上需要协同awesomium才能正常使用。由于使用局限性，且有很多在线的Markdown编辑器，譬如掘金、CSDN、简书(不推荐程序员使用简书，原因你懂的..)等，所以这个工具给三颗星吧。</p><p>另外，放一个百度云的MarkdownPad下载链接，包含了awesomium。</p><p><a href="https://pan.baidu.com/s/1fZm_d6ZfXesnx4_wnuMm6g">MarkdownPad下载</a></p><h2 id="三、开发篇"><a href="#三、开发篇" class="headerlink" title="三、开发篇"></a>三、开发篇</h2><h3 id="1-Postman"><a href="#1-Postman" class="headerlink" title="1.Postman"></a><a href="https://www.getpostman.com/">1.Postman</a></h3><p>星级评分：<font color=orange >★★★★★</font></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS8xMi80LzE2ZWQxNzQ5NzQzYTU1ZGY?x-oss-process=image/format,png"></p><p>这是一个开发者的神器，不管是前端人员还是后端人员都要必备的一个软件。对于前端人员来说跟后台联调时可以通过postman来模拟请求，可以自定义添加params、authorization、headers、body等，实在是一个开发利器。星级评分五颗星！</p><h3 id="2-JSON处理工具–Bejson"><a href="#2-JSON处理工具–Bejson" class="headerlink" title="2.JSON处理工具–Bejson"></a><a href="https://www.bejson.com/">2.JSON处理工具–Bejson</a></h3><p>星级评分：<font color=orange >★★★★☆</font></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS8xMi80LzE2ZWQxNzRkMmI4OTJkMDg?x-oss-process=image/format,png"></p><p>这是一款Json格式化的工具，非常贴心好用。切换到Json-&gt;Json视图模式下查看json非常清晰，一目了然。也是四星值得推荐的工具。</p><h2 id="四、插件篇"><a href="#四、插件篇" class="headerlink" title="四、插件篇"></a>四、插件篇</h2><h3 id="1-Octotree"><a href="#1-Octotree" class="headerlink" title="1.Octotree"></a>1.Octotree</h3><p>星级评分：<font color=orange >★★★★☆</font></p><p>如果你是github中毒用户，那么此款插件可谓是一个超级福利。在浏览github时要想打开某个类非常不方便，需要点击跳转好多次。而有了Octotree后就可以像在IDE中一样浏览github项目了。如下图：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS8xMi80LzE2ZWQxN2NlOTc0YzA5NGY?x-oss-process=image/format,png"></p><h3 id="2-彩云小译"><a href="#2-彩云小译" class="headerlink" title="2.彩云小译"></a>2.彩云小译</h3><p>星级评分：<font color=orange >★★★★☆</font><br>这是一款翻译工具，对于英语不好的同学来说简直就是救星，只要点一下插件就可以直接在原网页上翻译。支持英文翻译中文，同时也支持中文翻译英文。翻译效果如下图所示：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS8xMi80LzE2ZWQxODQzNzI0ZDdiMDA?x-oss-process=image/format,png"></p><h3 id="4-文件转换–Convertio"><a href="#4-文件转换–Convertio" class="headerlink" title="4.文件转换–Convertio"></a>4.<a href="https://convertio.co/zh/">文件转换–Convertio</a></h3><p>星级评分：<font color=orange >★★★★☆</font></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS8xMi80LzE2ZWQxODdhMzhhOTBiZWM?x-oss-process=image/format,png"><br>这是一个综合的文件转换平台不仅支持Web端更有Chrome插件。通过Convertio可以转换音频、视频、图像、文档等等。也是一个很不错的值得四颗星的工具。</p><h2 id="五、BannerViewPager–Android开发者福利"><a href="#五、BannerViewPager–Android开发者福利" class="headerlink" title="五、BannerViewPager–Android开发者福利"></a>五、<a href="https://github.com/zhpanvip/BannerViewPager">BannerViewPager–Android开发者福利</a></h2><p>一个非常好用的可以实现任意样式的Banner轮播图–<a href="https://github.com/zhpanvip/BannerViewPager">BannerViewPager</a></p><h3 id="据说BannerViewPager可以实现任意Banner样式？"><a href="#据说BannerViewPager可以实现任意Banner样式？" class="headerlink" title="据说BannerViewPager可以实现任意Banner样式？"></a>据说BannerViewPager可以实现任意Banner样式？</h3><blockquote><p>腾讯视频、QQ音乐、酷狗音乐、支付宝、天猫、淘宝、优酷视频、喜马拉雅、网易云音乐、哔哩哔哩、全民K歌等App的Banner页面样式及指示器样式都可以通过<a href="https://github.com/zhpanvip/BannerViewPager">BannerViewPager</a>实现哦！</p></blockquote><h3 id="列举效果预览"><a href="#列举效果预览" class="headerlink" title="列举效果预览"></a>列举效果预览</h3><table><thead><tr><th>PageStylel</th><th>IndicatorStyle</th></tr></thead><tbody><tr><td><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS8xMi80LzE2ZWQxOWEyMzkxNmY2ZTY?x-oss-process=image/format,png"></td><td><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS8xMi80LzE2ZWQxOWQ0YTMzZWJhZmM?x-oss-process=image/format,png"></td></tr></tbody></table><p>详情可以查看以下文章：</p><p><a href="https://juejin.im/post/5d6bce24f265da03db0790d1">《打造一个丝滑般自动轮播无限循环Android库》</a></p><p><a href="https://juejin.im/post/5d74d3faf265da03b5747015">《BannerViewPager源码剖析》</a></p><p><a href="https://juejin.im/post/5dda0b6d518825731f569a8c">《剖析BannerViewPager中Indicator的设计思想》</a></p><p><a href="https://github.com/zhpanvip/BannerViewPager">点击此处查看源码</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>开发工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>静态代理这么用？--聊一聊ViewPagerIndicator重构的一些经验</title>
    <link href="/2019/11/24/21.%E9%9D%99%E6%80%81%E4%BB%A3%E7%90%86%E8%BF%99%E4%B9%88%E7%94%A8%EF%BC%9F-%E8%81%8A%E4%B8%80%E8%81%8AViewPagerIndicator%E9%87%8D%E6%9E%84%E7%9A%84%E4%B8%80%E4%BA%9B%E7%BB%8F%E9%AA%8C/"/>
    <url>/2019/11/24/21.%E9%9D%99%E6%80%81%E4%BB%A3%E7%90%86%E8%BF%99%E4%B9%88%E7%94%A8%EF%BC%9F-%E8%81%8A%E4%B8%80%E8%81%8AViewPagerIndicator%E9%87%8D%E6%9E%84%E7%9A%84%E4%B8%80%E4%BA%9B%E7%BB%8F%E9%AA%8C/</url>
    
    <content type="html"><![CDATA[<p>ViewPagerIndicator的代码可谓一波三折，在不久前ViewPagerIndicator作为一个单独的库从<a href="https://github.com/zhpanvip/BannerViewPager">BannerViewPager</a>中拆分了出来。拆分后的indicator已经不仅仅适用于BannerViewPager，还可以用于ViewPager和ViewPager2。现在，经历了几次代码重构后,总算可以拿得出手了。本篇文章就来写一写关于重构indicator的一些经验，了解下该库是如何通过静态代理模式来实现多种多样的indicator样式的。</p><p>先贴上<a href="https://github.com/zhpanvip/viewpagerindicator">ViewPagerIndicator</a>源码链接以及预览图，使用方式可以参考GitHub主页README,同时有兴趣的同学欢迎到GitHub star项目。</p><table><thead><tr><th>Attrs</th><th>CIRCLE</th><th>DASH</th><th>ROUND_RECT</th></tr></thead><tbody><tr><td>NORMAL</td><td><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzI3LzE3MWJiZTZiYzFiZTVlNmI?x-oss-process=image/format,png" alt="CIRCLE_NORMAL"></td><td><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzI3LzE3MWJiZTcxNGZlYTcwNzA?x-oss-process=image/format,png" alt="DASH_NORMAL"></td><td><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzI3LzE3MWJiZTc2ZWQ4ZTc1OTY?x-oss-process=image/format,png" alt="ROUND_RECT_NORMAL"></td></tr><tr><td>SMOOTH</td><td><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzI3LzE3MWJiZTdmM2ViOGI2N2Y?x-oss-process=image/format,png" alt="CIRCLE_SMOOTH"></td><td><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzI3LzE3MWJiZTg0ZDhlNzJjMDE?x-oss-process=image/format,png" alt="DASH_SMOOTH"></td><td><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzI3LzE3MWJiZThkNDYxMGE4MTk?x-oss-process=image/format,png" alt="ROUND_RECT_SMOOTH"></td></tr><tr><td>WORM</td><td><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzI3LzE3MWJiZTk0YjgzNDMwMDI?x-oss-process=image/format,png" alt="CIRCLE_WORM"></td><td><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzI3LzE3MWJiZTk5ZWZhNGJmNzA?x-oss-process=image/format,png" alt="DASH_WORM"></td><td><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzI3LzE3MWJiZWEwZWU0MTY1NTY?x-oss-process=image/format,png" alt="ROUND_WORM"></td></tr><tr><td>COLOR</td><td><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzI3LzE3MWJiZWE1ZjBkYzE4Yjk?x-oss-process=image/format,png" alt="CIRCLE_COLOR"></td><td><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzI3LzE3MWJiZWFiNzM0YjNkNjQ?x-oss-process=image/format,png" alt="DASH_COLOR"></td><td><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzI3LzE3MWJiZWIzYjQ2OGFhNDY?x-oss-process=image/format,png" alt="ROUND_COLOR"></td></tr><tr><td>SCALE</td><td><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzI3LzE3MWJiZWJhNTJmOTNkZWE?x-oss-process=image/format,png" alt="CIRCLE_SCALE"></td><td><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzI3LzE3MWJiZWJmZWVjNjNkZDI?x-oss-process=image/format,png" alt="DASH_SCALE"></td><td><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzI3LzE3MWJiZWM4MGYxMWI5NDc?x-oss-process=image/format,png" alt="ROUND_SCALE"></td></tr></tbody></table><h2 id="一、为什么要重构"><a href="#一、为什么要重构" class="headerlink" title="一、为什么要重构"></a>一、为什么要重构</h2><p>在Indicator未拆分之前针对IndicatorView进行了两次较大的重构。第一次重构在上篇文章中也有提到。最初的Indicator是在BannerViewPager内部维护了一个指示器ImageView的List集合，在BannerViewPager内部会根据页面size动态添加指示器的Image。显然这种处理方式存在很大的弊端，即：不灵活、可扩展性低、性能相对较差等诸多问题。针对这一系列问题，在后续版本中对Indicator进行了第一次重构。这次重构将Indicator改为自定义View，并且抽象出了IIndicator接口，极大的增强了Indicator的可扩展性。因此，在后续若干个版本迭代中Indicator逐渐支持了多种样式（CIRCLE/DASH/ROUND_RECT）和多种滑动模式（SMOOTH/NORMAL）并且支持自定义Indicator。相比最初版本，不管在功能还是性能上都有了很大的提升。但是，在后续版本的迭代中却又暴露出许多问题。而这些问题很大程度上影响了开发和使用。列举其中一个最大问题如下：</p><h3 id="多个IndicatorView不利于维护和使用"><a href="#多个IndicatorView不利于维护和使用" class="headerlink" title="多个IndicatorView不利于维护和使用"></a>多个IndicatorView不利于维护和使用</h3><p>在BannerViewPager早期版本中indicator已经支持了CIRCLE和DASH两种样式，与之对应的是CircleIndicatorView和DashIndicatorView。在BannerViewPager内部用简单工厂模式根据IndicatorStyle来生成对应的IndicatorView。这么以来就出现了一个弊端，即每添加一种Indicator样式都需要一个与之对应的IndicatorView类，当Indicator 样式越来越多的时候维护成本和使用成本都会随之增加–使用该库的开发人员需要记住每种样式对应的IndicatorView名字，作为该库维护者也要面对越来越臃肿的代码结构，这是大家都不愿意看到的。因此，在这样的背景下IndicatorView的第二次重构就势在必行，不得不做了。针对这一问题，在第二次重构中使用了静态代理模式对代码结构进行了优化。</p><h2 id="二、回顾静态代理模式"><a href="#二、回顾静态代理模式" class="headerlink" title="二、回顾静态代理模式"></a>二、回顾静态代理模式</h2><p>前文已经提到了，本次重构使用了静态代理模式。不知道现在大家对代理模式还记得多少，也不知道是否经常会在项目种用到代理模式。不管怎样，我们先来回顾以下静态代理模式吧：</p><blockquote><p>代理模式即为其它对象提供一种代理控制对这个对象的访问。在代理模式中，一个类代表另一个类的功能。这种类型的设计模式属于结构型模式。在代理模式中，我们创建具有现有对象的对象，以便向外界提供功能接口。</p></blockquote><p>代理模式的结构图如下：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS8xMS8yNC8xNmU5YmJjY2JhMjRhY2Q3?x-oss-process=image/format,png" alt="这里写图片描述"><br>注：图片来源《大话设计模式》</p><p>看定义总是那么的晦涩难懂，我们还是来举一个代理模式的场景：</p><blockquote><p>Ryan想在上海买一套房子，但是他又不懂得房地产的行情，于是委托了中介（Proxy）来帮助他买房子。</p></blockquote><p>我们把这个场景通过Java代码来实现一下：</p><h3 id="1-抽象出接口"><a href="#1-抽象出接口" class="headerlink" title="1.抽象出接口"></a>1.抽象出接口</h3><p>首先我们把买房子的一类人抽象出来一个接口，接口中有一个buyHouse的方法：</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">IPersonBuyHouse</span> </span>&#123;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">buyHouse</span><span class="hljs-params">()</span></span>;&#125;</code></pre><h3 id="2-明确被代理的对象"><a href="#2-明确被代理的对象" class="headerlink" title="2.明确被代理的对象"></a>2.明确被代理的对象</h3><p>Ryan想要买房子，于是他就需要实现这个IPersonBuyHouse接口:</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Ryan</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">IPersonBuyHouse</span></span>&#123;<span class="hljs-meta">@Override</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buyHouse</span><span class="hljs-params">()</span> </span>&#123;System.out.println(<span class="hljs-string">&quot;Ryan:I want buy a House...&quot;</span>);&#125;&#125;</code></pre><h3 id="3-寻找代理"><a href="#3-寻找代理" class="headerlink" title="3.寻找代理"></a>3.寻找代理</h3><p>由于Ryan不了解房地产行情，于是将买房子的事情委托给了中介（Proxy），因此中介（Proxy）也需要实现IPersonBuyHouse的接口。但是中介不是给自己买房子的，而是买给其它有购房需求者的，所以他应该持有一个IPersonBuyHouse。而此处的购房需求者就是Ryan.于是Proxy代码如下：</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Proxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">IPersonBuyHouse</span></span>&#123;<span class="hljs-keyword">private</span> IPersonBuyHouse mIPerson;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Proxy</span><span class="hljs-params">()</span> </span>&#123;    mIPerson=<span class="hljs-keyword">new</span> Ryan();&#125;<span class="hljs-meta">@Override</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buyHouse</span><span class="hljs-params">()</span> </span>&#123;    System.out.println(<span class="hljs-string">&quot;Proxy:I can help you to buy house&quot;</span>);    mIPerson.buyHouse();&#125;&#125;</code></pre><p>接下来我们在Main方法种测试一下Proxy类：</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProxyTest</span> </span>&#123;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;    <span class="hljs-keyword">new</span> Proxy().buyHouse();&#125;&#125;</code></pre><p>输出结果：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS8xMS8yNC8xNmU5YmJjY2JjNDk0M2Jk?x-oss-process=image/format,png" alt="在这里插入图片描述"><br>通过上面的例子可以看到静态代理是一个很简单的设计模式。那么接下来我们看下如何通过静态代理模式来完成对IndicatorView的重构吧。</p><h2 id="三、用静态代理模式重构Indicator"><a href="#三、用静态代理模式重构Indicator" class="headerlink" title="三、用静态代理模式重构Indicator"></a>三、用静态代理模式重构Indicator</h2><p>在第一章节中我们就已经提到了当前Indicator的弊端：要维护多个IndicatorView，不利于开发也不利于使用。我们当前的目的就是要将IndicatorView统一成一个。而我们现在面临的困境是如何让一个IndicatorView承载多个Indicator Style？因为它既要绘制CIRCLE Style又要绘制DASH Style，以及以后可能还会增加更多的Style样式。在这种场景下我们就可以想到代理模式来解决问题。</p><p>上一个章节中我们举了一个静态代理的例子是正向思维写下来的，那么本章中我们就采用逆向思维，看下是如何倒推出来静态代理模式的。</p><h3 id="1-初步设想"><a href="#1-初步设想" class="headerlink" title="1.初步设想"></a>1.初步设想</h3><p>首先，我们想要一个IndicatorView承接所有Style的绘制，那么正常来说我们就需要在IndicatorView中通过IndicatorStyle判断是哪种样式，然后在IndicatorView中进行绘制。其伪代码如下：</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IndicatorView</span>  </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onMeasure</span><span class="hljs-params">(<span class="hljs-keyword">int</span> widthMeasureSpec, <span class="hljs-keyword">int</span> heightMeasureSpec)</span> </span>&#123;    <span class="hljs-keyword">if</span>(Style==CIRCLE) &#123;        setMeasuredDimension(measurCircleWidth(), measurCircleHeight());    &#125; <span class="hljs-keyword">else</span> &#123;    setMeasuredDimension(measurDashWidth(), measurDashHeight());    &#125;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onDraw</span><span class="hljs-params">(Canvas canvas)</span> </span>&#123;    <span class="hljs-keyword">if</span>(Style==CIRCLE) &#123;        drawCircleIndicator(canvas);    &#125; <span class="hljs-keyword">else</span> &#123;        drawDashleIndicator(canvas);    &#125;    &#125;&#125;</code></pre><p>但是如果IndicatorStyle样式非常多的情况下，IndicatorView必然会变得非常庞大且臃肿。因此，我们自然而然的就会想到将View的measure和draw的逻辑抽出来单独给一个类来完成，那么这个类中呢至少应该有measure和draw两个方法。因此，我们将这个类的伪代码写出来大概应该是这样子的：</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DrawerProxy</span>  </span>&#123;    <span class="hljs-keyword">public</span> BaseDrawer.<span class="hljs-function">MeasureResult <span class="hljs-title">onMeasure</span><span class="hljs-params">(<span class="hljs-keyword">int</span> widthMeasureSpec, <span class="hljs-keyword">int</span> heightMeasureSpec)</span> </span>&#123;    <span class="hljs-keyword">if</span>(Style==CIRCLE) &#123;    <span class="hljs-keyword">return</span> measureCircleIndicator(<span class="hljs-keyword">int</span> widthMeasureSpec, <span class="hljs-keyword">int</span> heightMeasureSpec);    &#125; <span class="hljs-keyword">else</span> &#123;    <span class="hljs-keyword">return</span> measureDashIndicator(<span class="hljs-keyword">int</span> widthMeasureSpec, <span class="hljs-keyword">int</span> heightMeasureSpec);    &#125;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onDraw</span><span class="hljs-params">(Canvas canvas)</span> </span>&#123;    <span class="hljs-keyword">if</span>(Style==CIRCLE) &#123;        drawCircleIndicator(canvas);    &#125; <span class="hljs-keyword">else</span> &#123;        drawDashleIndicator(canvas);    &#125;    &#125;&#125;</code></pre><h3 id="2-抽象接口"><a href="#2-抽象接口" class="headerlink" title="2.抽象接口"></a>2.抽象接口</h3><p>通过上一小节的操作我们虽然将测量和绘制逻辑从IndicatorView中剥离了出来，但是DrawerProxy 这个类却承载了所有的测量和绘制逻辑。当Style样式多的时候同样会使DrawerProxy类变得臃肿不堪。因此，我们又很自然的想到了应该把不同Style的绘制逻辑单独抽出来，于是就有了CircleDrawer和DashDrawer两个类来分别处理各自的逻辑。但因为这两个类又要同时被放在DrawerProxy类中，且这两个类都又共同的方法。因此可以抽出一个CircleDrawer和DashDrawer的共同接口。于是就有了这样的一个IDrawer的接口：</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">IDrawer</span> </span>&#123;    BaseDrawer.<span class="hljs-function">MeasureResult <span class="hljs-title">onMeasure</span><span class="hljs-params">(<span class="hljs-keyword">int</span> widthMeasureSpec, <span class="hljs-keyword">int</span> heightMeasureSpec)</span></span>;    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">onDraw</span><span class="hljs-params">(Canvas canvas)</span></span>;&#125;</code></pre><p>同时CircleDrawer和DashDrawer都应该实现该接口：</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CircleDrawer</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">IDrawer</span> </span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> MeasureResult <span class="hljs-title">onMeasure</span><span class="hljs-params">(<span class="hljs-keyword">int</span> widthMeasureSpec, <span class="hljs-keyword">int</span> heightMeasureSpec)</span> </span>&#123;   <span class="hljs-comment">// ... 省略measure逻辑</span>        <span class="hljs-keyword">return</span> mMeasureResult;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onDraw</span><span class="hljs-params">(Canvas canvas)</span> </span>&#123;        drawIndicator(canvas);    &#125;    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">drawIndicator</span><span class="hljs-params">(Canvas canvas)</span> </span>&#123;       <span class="hljs-comment">// ...省略draw逻辑</span>    &#125;&#125;<span class="hljs-comment">//DashDrawer与此类似，不再贴出</span></code></pre><h3 id="3-回眸一看，静态代理？"><a href="#3-回眸一看，静态代理？" class="headerlink" title="3.回眸一看，静态代理？"></a>3.回眸一看，静态代理？</h3><p>到了这里我们在再来看DrawerProxy，发现这个类中同样需要onMeasure和onDraw，那他实现IDrawer接口顺理成章，同时它应该持有一个IDrawer类以便完成真实的测量和绘制任务。于是乎，完善之后的DrawerProxy类就成了这个样子：</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DrawerProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">IDrawer</span> </span>&#123;    <span class="hljs-keyword">private</span> IDrawer mIDrawer;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">DrawerProxy</span><span class="hljs-params">(IndicatorOptions indicatorOptions)</span> </span>&#123;        init(indicatorOptions);    &#125;    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(IndicatorOptions indicatorOptions)</span> </span>&#123;        mIDrawer = DrawerFactory.createDrawer(indicatorOptions);    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setIndicatorOptions</span><span class="hljs-params">(IndicatorOptions indicatorOptions)</span> </span>&#123;        init(indicatorOptions);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> BaseDrawer.<span class="hljs-function">MeasureResult <span class="hljs-title">onMeasure</span><span class="hljs-params">(<span class="hljs-keyword">int</span> widthMeasureSpec, <span class="hljs-keyword">int</span> heightMeasureSpec)</span> </span>&#123;        <span class="hljs-keyword">return</span> mIDrawer.onMeasure(widthMeasureSpec, heightMeasureSpec);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onDraw</span><span class="hljs-params">(Canvas canvas)</span> </span>&#123;        mIDrawer.onDraw(canvas);    &#125;&#125;</code></pre><p>到这里，我们回过神来看一下，这不就是一个非常标准的静态代理模式吗？当然，这里也结合了简单工厂模式来生成对应的Drawer。我们来看下重构后的IndicatorView</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IndicatorView</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BaseIndicatorView</span> </span>&#123;    <span class="hljs-keyword">private</span> DrawerProxy mDrawerProxy;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">IndicatorView</span><span class="hljs-params">(Context context)</span> </span>&#123;        <span class="hljs-keyword">this</span>(context, <span class="hljs-keyword">null</span>);    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">IndicatorView</span><span class="hljs-params">(Context context, <span class="hljs-meta">@Nullable</span> AttributeSet attrs)</span> </span>&#123;        <span class="hljs-keyword">this</span>(context, attrs, <span class="hljs-number">0</span>);    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">IndicatorView</span><span class="hljs-params">(Context context, <span class="hljs-meta">@Nullable</span> AttributeSet attrs, <span class="hljs-keyword">int</span> defStyleAttr)</span> </span>&#123;        <span class="hljs-keyword">super</span>(context, attrs, defStyleAttr);        mDrawerProxy = <span class="hljs-keyword">new</span> DrawerProxy(getIndicatorOptions());    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onMeasure</span><span class="hljs-params">(<span class="hljs-keyword">int</span> widthMeasureSpec, <span class="hljs-keyword">int</span> heightMeasureSpec)</span> </span>&#123;        <span class="hljs-keyword">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec);        BaseDrawer.MeasureResult measureResult = mDrawerProxy.onMeasure(widthMeasureSpec, heightMeasureSpec);        setMeasuredDimension(measureResult.getMeasureWidth(), measureResult.getMeasureHeight());    &#125;        <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onDraw</span><span class="hljs-params">(Canvas canvas)</span> </span>&#123;        <span class="hljs-keyword">super</span>.onDraw(canvas);        mDrawerProxy.onDraw(canvas);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setIndicatorOptions</span><span class="hljs-params">(IndicatorOptions indicatorOptions)</span> </span>&#123;        <span class="hljs-keyword">super</span>.setIndicatorOptions(indicatorOptions);        mDrawerProxy.setIndicatorOptions(indicatorOptions);    &#125;&#125;</code></pre><p>可以看到通过静态代理模式简化完后的IndicatorView仅仅剩下了三十多行的代码，所有的测量和绘制逻辑都交给代理类DrawerProxy来处理，而DrawerProxy又将逻辑移交给对应的Drawer来完成。这样，所有的类都各司其职，代码简单明了！开发和维护起来也就变得更加得心应手了！</p><p>最后，我们来看下如何使用Indicator：</p><pre><code class="hljs java">indicatorView            .setSlideMode(IndicatorSlideMode.WORM)            .setIndicatorStyle(IndicatorStyle.CIRCLE)            .setSliderColor(getResColor(R.color.red_normal_color), getResColor(R.color.red_checked_color))            .setupWithViewPager(viewPager)</code></pre><p>通过一个简单的链式调用传入不同的参数便实现了多种多样的指示器样式。</p><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><p>本篇文章分享了对ViewPagerIndicator重构的一些经验。通过本篇文章相信大家对于静态代理模式也会有了更深的认识。重构后的代码在维护和使用上相比以前显然有了更明显的提升。但是并不等于现在的Indicator已经无懈可击了。相反，它还有很长的路要走。就目前而言，Indicator的SlideMode部分还是又相当大的优化空间的，那么我们就在后面的版本中拭目以吧。</p><p><a href="https://github.com/zhpanvip/viewpagerindicator">ViewPagerIndicator源码戳此处</a></p><p>同时，欢迎关注用ViewPagerIndicator实现的<a href="https://github.com/zhpanvip/BannerViewPager">BannerViewPager</a>库</p>]]></content>
    
    
    
    <tags>
      
      <tag>indicator</tag>
      
      <tag>ViewPager2</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BannerViewPager源码剖析(二)</title>
    <link href="/2019/09/08/20.BannerViewPager%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90(%E4%BA%8C)/"/>
    <url>/2019/09/08/20.BannerViewPager%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90(%E4%BA%8C)/</url>
    
    <content type="html"><![CDATA[<p>BannerViewPager系列文章共三篇，此文为第二篇，另外两篇参看下面链接：</p><p><a href="https://blog.csdn.net/qq_20521573/article/details/100186077">《打造一个丝滑般自动轮播无限循环Android库》</a></p><p><a href="https://blog.csdn.net/qq_20521573/article/details/103216593">《剖析BannerViewPager中Indicator的设计思想》</a></p><p>上篇文章<a href="https://juejin.im/post/5d6bce24f265da03db0790d1">《打造一个丝滑般自动轮播无限循环Android库》</a>非常详细的介绍了<a href="https://github.com/zhpanvip/BannerViewPager">BannerViewPager</a>的基础功能及使用方法。我们知道BannerViewPager不但可以支持任意的页面布局，而且可以支持任意的Indicator。那么<a href="https://github.com/zhpanvip/BannerViewPager">BannerViewPager</a>的这些功能是如何实现的呢？本篇文章将深入源码来带大家了解<a href="https://github.com/zhpanvip/BannerViewPager">BannerViewPager</a>的设计思路。</p><h1 id="一、如何支持任意的Item布局"><a href="#一、如何支持任意的Item布局" class="headerlink" title="一、如何支持任意的Item布局"></a>一、如何支持任意的Item布局</h1><p>产品的需求千变万化，你永远也猜不到下一步产品会给你提一个什么样的需求。因此对于一个比较人性化的Banner库来说，它也应该支持开发者去自定义任意的Item页面布局。BannerViewPager就是本着这样的思路来做的。接下来将通过两小节的内容来探究BannerViewPager是如何实现任意Item布局的。</p><h2 id="1-BannerViewPager的ViewHolder"><a href="#1-BannerViewPager的ViewHolder" class="headerlink" title="1.BannerViewPager的ViewHolder"></a>1.BannerViewPager的ViewHolder</h2><p>我们先从setHolderCreator(HolderCreator<VH> holderCreator)这个方法说起。在使用BannerViewPager的时候必须设置一个HolderCreator，代码如下：</p><pre><code class="hljs java">bannerViewPager.setHolderCreator(<span class="hljs-keyword">new</span> HolderCreator&lt;CustomPageViewHolder&gt;() &#123;                    <span class="hljs-meta">@Override</span>                    <span class="hljs-function"><span class="hljs-keyword">public</span> CustomPageViewHolder <span class="hljs-title">createViewHolder</span><span class="hljs-params">()</span> </span>&#123;                        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> CustomPageViewHolder();                    &#125;                &#125;)</code></pre><p>在HolderCreator的createViewHolder方法中返回了一个CustomPageViewHolder，这个CustomPageViewHolder是我们自己实现的。其内部会通过createView方法来inflate出来一自定义的itemView,并在onBind方法中为itemView绑定数据。码如下：</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CustomPageViewHolder</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ViewHolder</span>&lt;<span class="hljs-title">CustomBean</span>&gt; </span>&#123;    <span class="hljs-keyword">private</span> ImageView mImageView;    <span class="hljs-keyword">private</span> TextView mTextView;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> View <span class="hljs-title">createView</span><span class="hljs-params">(ViewGroup viewGroup, Context context, <span class="hljs-keyword">int</span> position)</span> </span>&#123;        View view = LayoutInflater.from(context).inflate(R.layout.item_custom_view, viewGroup, <span class="hljs-keyword">false</span>);        mImageView = view.findViewById(R.id.banner_image);        mTextView = view.findViewById(R.id.tv_describe);        <span class="hljs-keyword">return</span> view;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onBind</span><span class="hljs-params">(Context context, CustomBean data, <span class="hljs-keyword">int</span> position, <span class="hljs-keyword">int</span> size)</span> </span>&#123;        mImageView.setImageResource(data.getImageRes());        mTextView.setText(data.getImageDescription());    &#125;    ...&#125;</code></pre><p>在BannerViewPager内部setupViewPager的时候，针对HolderCreator做了如下操作：</p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setupViewPager</span><span class="hljs-params">()</span> </span>&#123;       <span class="hljs-keyword">if</span> (holderCreator != <span class="hljs-keyword">null</span>) &#123;            BannerPagerAdapter&lt;T, VH&gt; bannerPagerAdapter =                  <span class="hljs-keyword">new</span> BannerPagerAdapter&lt;&gt;(mList, holderCreator);          bannerPagerAdapter.setPageStyle(mPageStyle);          bannerPagerAdapter.setCanLoop(isCanLoop);        bannerPagerAdapter.setPageClickListener(position -&gt; &#123;               <span class="hljs-keyword">if</span> (mOnPageClickListener != <span class="hljs-keyword">null</span>) &#123;                   mOnPageClickListener.onPageClick(PositionUtils.getRealPosition(isCanLoop, position, mList.size(), mPageStyle));              &#125;          &#125;);          mViewPager.setAdapter(bannerPagerAdapter);       ...       &#125; <span class="hljs-keyword">else</span> &#123;           <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NullPointerException(<span class="hljs-string">&quot;You must set HolderCreator for BannerViewPager&quot;</span>);       &#125;   &#125;</code></pre><p>上述代码中判断如果holderCreator为null时就抛出了一个NullPointerException，这也解释了为什么必须要为BannenrViewPager设置holderCreator。当holderCreator不为null时，将holder传递到了BannerPagerAdapter中,并且为BannerPagerAdapter设置了相关参数和页面点击事件。</p><p>我们接下来到BannerPagerAdapter中一探究竟：</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BannerPagerAdapter</span>&lt;<span class="hljs-title">T</span>, <span class="hljs-title">VH</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ViewHolder</span>&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title">PagerAdapter</span> </span>&#123;     <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-meta">@NonNull</span>    <span class="hljs-function">Object <span class="hljs-title">instantiateItem</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> <span class="hljs-keyword">final</span> ViewGroup container, <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> position)</span> </span>&#123;        View itemView = getView(PositionUtils.getRealPosition(isCanLoop, position, mList.size(), mPageStyle),container);        container.addView(itemView);        <span class="hljs-keyword">return</span> itemView;    &#125;...<span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span>    <span class="hljs-function"><span class="hljs-keyword">private</span> View <span class="hljs-title">getView</span><span class="hljs-params">(<span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> position, ViewGroup container)</span> </span>&#123;        ViewHolder&lt;T&gt; holder = holderCreator.createViewHolder();        <span class="hljs-keyword">if</span> (holder == <span class="hljs-keyword">null</span>) &#123;            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;can not return a null holder&quot;</span>);        &#125;        <span class="hljs-keyword">return</span> createView(holder, position, container);    &#125;    <span class="hljs-function"><span class="hljs-keyword">private</span> View <span class="hljs-title">createView</span><span class="hljs-params">(ViewHolder&lt;T&gt; holder, <span class="hljs-keyword">int</span> position, ViewGroup container)</span> </span>&#123;        View view = <span class="hljs-keyword">null</span>;        <span class="hljs-keyword">if</span> (list != <span class="hljs-keyword">null</span> &amp;&amp; list.size() &gt; <span class="hljs-number">0</span>) &#123;          view = holder.createView(container, container.getContext(), position);          holder.onBind(container.getContext(), list.get(position), position, list.size());        <span class="hljs-keyword">return</span> view;    &#125;&#125;</code></pre><p>在BannerPagerAdapter的getView方法中通过holderCreator.createViewHolder()拿到了自定义的ViewHolder，此时即为上边的CustomPageViewHolder 。接下来在createView方法中调用CustomPageViewHolder的createView方法拿到我们自定义的itemView,并通过holder.onBind方法将集合中的数据传递给了CustomPageViewHolder。到这里我们就完成了自定义item布局以及item数据的绑定。</p><h2 id="2-BannerViewPager的泛型设计"><a href="#2-BannerViewPager的泛型设计" class="headerlink" title="2 .BannerViewPager的泛型设计"></a>2 .BannerViewPager的泛型设计</h2><p>在上一小节中通过HolderCreator来实现任意的页面布局，但此时我们应该会面临一个问题，既然可以支持任意的页面布局那么BannerViewPager中接收的数据也应该时任意类型的。对于该问题我们可以引入泛型来实现。首先看BannerViewPager的泛型：</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BannerViewPager</span>&lt;<span class="hljs-title">T</span>, <span class="hljs-title">VH</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ViewHolder</span>&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title">RelativeLayout</span> <span class="hljs-keyword">implements</span></span><span class="hljs-class">        <span class="hljs-title">ViewPager</span>.<span class="hljs-title">OnPageChangeListener</span> </span>&#123;        <span class="hljs-comment">// 轮播数据集合</span>        <span class="hljs-keyword">private</span> List&lt;T&gt; mList;<span class="hljs-keyword">private</span> HolderCreator&lt;VH&gt; holderCreator;    <span class="hljs-comment">//...</span>&#125;</code></pre><p>BannerViewPager有两个泛型参数，第一个参数T是对应的数据类型，它用来作为BannerViewPager中List集合的泛型。另一个泛型参数VH规定了必须是继承ViewHolder的类，用来作为HolderCreator的泛型。而ViewHolder和HolderCreator均是一个带有泛型参数的接口，其代码如下：</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">ViewHolder</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;    <span class="hljs-function">View <span class="hljs-title">createView</span><span class="hljs-params">(ViewGroup viewGroup,Context context, <span class="hljs-keyword">int</span> position)</span></span>;        <span class="hljs-comment">/**</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> context context</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> data 实体类对象</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> position 当前位置</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> size 页面个数</span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">onBind</span><span class="hljs-params">(Context context,T data,<span class="hljs-keyword">int</span> position,<span class="hljs-keyword">int</span> size)</span></span>;&#125;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">HolderCreator</span>&lt;<span class="hljs-title">VH</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ViewHolder</span>&gt; </span>&#123;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 创建ViewHolder</span><span class="hljs-comment">     */</span>    <span class="hljs-function">VH <span class="hljs-title">createViewHolder</span><span class="hljs-params">()</span></span>;&#125;</code></pre><p>另外，T和VH两个泛型也同时作为BannerPagerAdapter的泛型参数：</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BannerPagerAdapter</span>&lt;<span class="hljs-title">T</span>, <span class="hljs-title">VH</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ViewHolder</span>&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title">PagerAdapter</span> </span>&#123;<span class="hljs-keyword">private</span> List&lt;T&gt; list; <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">BannerPagerAdapter</span><span class="hljs-params">(List&lt;T&gt; list, HolderCreator&lt;VH&gt; holderCreator)</span> </span>&#123;        <span class="hljs-keyword">this</span>.list = list;        <span class="hljs-keyword">this</span>.holderCreator = holderCreator;    &#125;&#125;</code></pre><p>可以看到，我们通过泛型约束，使得涉及到的相关类中的参数数据类型保持了同步,从而实现了BannerViewPager可以接收并处理任意的数据类型。</p><h1 id="二、如何实现无限循环轮播"><a href="#二、如何实现无限循环轮播" class="headerlink" title="二、如何实现无限循环轮播"></a>二、如何实现无限循环轮播</h1><p>关于ViewPager的无限循环无外乎两种方案。</p><p>第一种方案是在PagerAdapter的getCount中返回一个Integer.MAX_VALUE，即一个最大的Integer整数。然后将setCurrentItem的值设置为 Integer.MAX_VALUE / 2，在滑动过程中不断取余以此来达到一个无限循环轮播的假象。</p><p>另外一种方案是额外增加两个ViewPager的item count，然后在第0个Item填充最后一条数据，在最后一个Item填充第0条数据。当右滑到第一个Item的时候将currentItem置为pageSize-1,当滑动到最后一个Item的时候将currentItem置为1，以此来达到一个无限循环的目的，此方案的示意图如下：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS8xMS8xNy8xNmU3ODVhZDcyYmQ2NzQz?x-oss-process=image/format,png" alt="无限循环示意图"><br>BannerViewPager的无限轮播使用的是第二种方案。至于这两种方案孰优孰劣不好判断，因为我并没有深入研究过方案一，因此对比这两种方案的优略对比我暂时没有发言权。但是关于第二种方案的优略我可以加以分析。</p><h2 id="方案二的优点："><a href="#方案二的优点：" class="headerlink" title="方案二的优点："></a>方案二的优点：</h2><p><strong>1.这一方案实现了真正意义上的无限轮播</strong></p><p>相比方案一设置了一个最大值来制造无限轮播的假象，方案二实现的是一种真正的无限轮播。这个方案通过手动切换position使得轮播能够无限持续下去。这一点可能要略优于方案一。（其实Integer.MAX_VALUE的数值已经达到了数十亿级别，即使从一数到十亿恐怕都要几天吧？所以这一点也算不上方案一的缺点）</p><p><strong>2.页面切换较少出现空白页</strong></p><p>曾经看过几个使用方案一实现的Banner都有偶尔出现空白页的问题，当然不排除是这些库写的有问题，毕竟我也见过使用方案一实现非常好的库。而BannerViewPager在使用方案二时并没有经过什么特殊处理，却也很少见到空白页问题，当然也不排除是我代码写的好。（板儿砖尽管扔过来吧，哈哈！）。</p><h2 id="方案二的缺点："><a href="#方案二的缺点：" class="headerlink" title="方案二的缺点："></a>方案二的缺点：</h2><p>虽然BannerViewPager使用的是方案二，但是秉着公正的态度，绝不包庇这一方案的缺点。这个方案的优点虽然我苦思冥想也只想出来了两条，但是关于它的缺点我却能罗列出来很多。正所谓谁(sei)用谁(sei)知道！</p><p><strong>1.onPageSelected(int)方法重复调用问题</strong></p><p>我们为BannerViewPager开启自动轮播，并为其设置页面改变的监听事件，如下：</p><pre><code class="hljs java">mBannerViewPager.setAutoPlay(<span class="hljs-keyword">true</span>).setOnPageChangeListener(<span class="hljs-keyword">new</span> OnPageChangeListenerAdapter() &#123;                   <span class="hljs-meta">@Override</span>                   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onPageSelected</span><span class="hljs-params">(<span class="hljs-keyword">int</span> position)</span> </span>&#123;                       BannerUtils.e(<span class="hljs-string">&quot;position &quot;</span> + position);                   &#125;               &#125;)</code></pre><p>然后可以看到打印的Log：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS8xMS8xNy8xNmU3ODVhZDcyZThkZDZm?x-oss-process=image/format,png" alt="在这里插入图片描述"><br>在BannerViewPager只有三个页面的情况下，页面position selected的周期是0、1、2、0。很明显，第0个页面被多调用了一次。虽然在大多数情况下并没有影响，但是当需要在选中第0个页面时做一些逻辑的话，就会产生一定影响。至于这个问题有没有解决办法，暂时还未去做进一步探究。</p><p><strong>2.在一屏三页模式下，这一方案在轮播到最后一页时会出现下一页短暂空白的问题</strong></p><p>出现这一问题的原因是因为为了完成循环在切换到最后一页时我们立即将position切换到了position为1的页面，而此时position为2个页面还未加载出来，因此就有了短暂的空白问题。为了解决这一问题，又不得不在原来循环的基础上再增加两个页面，并将setOffscreenPageLimit设置为2。这样无形中增加了内存开销，并且使得逻辑处理变得更为复杂！</p><p><strong>3.需要对position进行变换</strong></p><p>为了实现循环我们将page count增加了2，为了解决一屏三页的空白问题我们将page count增加了4。但对外暴露的接口需要拿到正确的position，此时我们就不得不在BannerViewPager内部对position进行变换，使之能够对应到正确的position。虽然解决了问题，但是这些逻辑处理却变得很臃肿。尽管方案一也会存在position的变换问题，但是相比方案二还是优雅很多。</p><p>综上来看，方案二其实并不是一个完美的方案，相反它却存在诸多的问题！但是由于没有用过方案一，所以对于方案一有没有坑，现在也不好妄下结论。有熟悉方案一的同学可以在文章下留言告知。后续我会单独开一个分支来尝试下方案一。如果方案一没有大问题，BannerViewPager的循环轮播方案可能会迁移到第一个解决方案（目前2.4.3版本已切换为方案一，许多问题迎刃而解。真香！）。</p><h1 id="三、千变万化的Indicator"><a href="#三、千变万化的Indicator" class="headerlink" title="三、千变万化的Indicator"></a>三、千变万化的Indicator</h1><p>在最初的设计中，BannerViewPager同其它大多Bannenr库一样,内部维护了一个Indicator的List集合用来存放Indicator的icon，然后根据页面size动态的添加Indicator。显然这样的Indicator非常不灵活，如果UI觉得之前颜色不好看，需要换个颜色。你说，OK！没关系，你给我切图就好了。但是如果UI说我需要一个Indicator跟随ViewPager滑动的效果，那么此时你一定一脸茫然不知所措！于是和UI开启了漫长的拉锯战…扯远了，我们继续回归正题。考虑到这个问题，在后来的版本中针对Indicator进行了优化重构，现在的BannerViewPager已经可以支持任意样式的Indicator。并且还可以根据需求任意摆放Indicator的位置。是否期待了解这些神奇的功能是如何实现的呢？接下来就一起来探究<br>首先，定义了一个IIndicator的接口，该接口继承了ViewPager.OnPageChangeListener接口。其代码如下：</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">IIndicator</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ViewPager</span>.<span class="hljs-title">OnPageChangeListener</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setPageSize</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pageSize)</span></span>;    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setNormalColor</span><span class="hljs-params">(<span class="hljs-keyword">int</span> normalColor)</span></span>;    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setCheckedColor</span><span class="hljs-params">(<span class="hljs-keyword">int</span> checkedColor)</span></span>;    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setSlideMode</span><span class="hljs-params">(IndicatorSlideMode slideStyle)</span></span>;    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setIndicatorGap</span><span class="hljs-params">(<span class="hljs-keyword">int</span> gap)</span></span>;    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setIndicatorWidth</span><span class="hljs-params">(<span class="hljs-keyword">int</span> normalIndicatorWidth, <span class="hljs-keyword">int</span> checkedIndicatorWidth)</span></span>;    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">notifyDataChanged</span><span class="hljs-params">()</span></span>;&#125;</code></pre><p>在BannerViewPager内部持有了IIndicator的实例，并且setIndicatorView方法只接收IIndicator类型的参数。代码如下：</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BannerPagerAdapter</span>&lt;<span class="hljs-title">T</span>, <span class="hljs-title">VH</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ViewHolder</span>&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title">PagerAdapter</span> </span>&#123;<span class="hljs-comment">// 轮播指示器</span>    <span class="hljs-keyword">private</span> IIndicator mIndicatorView;<span class="hljs-comment">/**</span><span class="hljs-comment">     * 设置自定义View指示器,自定义View需要需要继承BaseIndicator或者实现IIndicator接口自行绘制指示器。</span><span class="hljs-comment">     * 注意，一旦设置了自定义IndicatorView,通过BannerViewPager设置的部分IndicatorView参数将失效。</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> customIndicator 自定义指示器</span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> BannerViewPager&lt;T, VH&gt; <span class="hljs-title">setIndicatorView</span><span class="hljs-params">(IIndicator customIndicator)</span> </span>&#123;        <span class="hljs-keyword">if</span> (customIndicator <span class="hljs-keyword">instanceof</span> View) &#123;            isCustomIndicator = <span class="hljs-keyword">true</span>;            mIndicatorView = customIndicator;        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;    &#125;&#125;</code></pre><p>在setIndicatorView内部通过判断customIndicator是否是View的实例，以此确保了指示器必须继承自View并实现IIndicator接口。并且可以看到在满足条件的情况下将isCustomIndicator置为了true，以此来标记是否是自定义的指示器。如果外部没有调用setIndicatorView设置自定义指示器或者设置的指示器不符合要求，那么mIndicatorView岂不是就为null了？不慌，我们接着往下看代码：</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BannerPagerAdapter</span>&lt;<span class="hljs-title">T</span>, <span class="hljs-title">VH</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ViewHolder</span>&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title">PagerAdapter</span> </span>&#123;   <span class="hljs-comment">/**</span><span class="hljs-comment">     * 构造ViewPager</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> list ViewPager数据</span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">create</span><span class="hljs-params">(List&lt;T&gt; list)</span> </span>&#123;        initBannerData(list);    &#125;<span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">initBannerData</span><span class="hljs-params">(List&lt;T&gt; list)</span> </span>&#123;        <span class="hljs-keyword">if</span> (list != <span class="hljs-keyword">null</span>) &#123;            mList.clear();            mList.addAll(list);            <span class="hljs-keyword">if</span> (mList.size() &gt; <span class="hljs-number">0</span>) &#123;                <span class="hljs-keyword">if</span> (mList.size() &gt; <span class="hljs-number">1</span>) &#123;                    <span class="hljs-keyword">if</span> (isCustomIndicator &amp;&amp; <span class="hljs-keyword">null</span> != mIndicatorView) &#123;                        initIndicator(mIndicatorView);                    &#125; <span class="hljs-keyword">else</span> &#123;                        initIndicator(IndicatorFactory.createIndicatorView(getContext(), mIndicatorStyle));                    &#125;                &#125;                <span class="hljs-comment">// ...</span>            &#125;        &#125;    &#125;&#125;</code></pre><p>我们在使用BannerViewPager的时候设置完参数配置之后需要调用create(List&lt;T&gt; list)方法，在这个方法中会根据list的数据情况来初始化Indicator。上述代码中只有在list.size()大于1的时候才会初始化Indicator，并且在后边判断如果是自定义的Indicator就直接初始化指示器，如果没有自定义指示器，那么就调用指示器工厂，根据设置的指示器Style生成内置指示器样式。这么一来就实现了内置指示器和自定义指示器的切换。</p><p>那么问题又来了，关于Indicator位置任意摆放是如何实现的呢？为什么自定义指示器可以直接new出来，也可以放在xml中呢？关于这两个问题就需要来看下initIndicator做了什么操作了。</p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">initIndicator</span><span class="hljs-params">(IIndicator indicatorView)</span> </span>&#123;        mIndicatorLayout.setVisibility(mIndicatorVisibility);        mIndicatorView = indicatorView;        <span class="hljs-keyword">if</span> (((View) mIndicatorView).getParent() == <span class="hljs-keyword">null</span>) &#123;            mIndicatorLayout.removeAllViews();            mIndicatorLayout.addView((View) mIndicatorView);            initIndicatorViewMargin();            initIndicatorGravity();        &#125;    &#125;</code></pre><p>在initIndicator中会首先判断indicatorView的parent是否为null。什么情况下indicatorView的parent会为null呢？答案就是内置指示器和setIndicatorView()的参数通过new的方式传进来的情况下indicatorView的parent会是null的情况！那么此时就将indicator添加到BannerViewPager内部mIndicatorLayout中就可以了。而如果Indicator是声明在xml中的情况，此时通过findViewById获得的Indicator其parent一定不会是null，那么在initIndicator中只是将其赋值给了mIndicatorView。以此完成了对内置IndicatorView的替换。这样其实不管通过怎样的方法设置IndicatorView都保证了BannerViewPager内部始终只会维护一个Indicator。方法非常巧妙，这里我想要一个赞！（似乎又嗅到了板儿砖的气息）</p><h1 id="四、遇到的其他问题及解决方案"><a href="#四、遇到的其他问题及解决方案" class="headerlink" title="四、遇到的其他问题及解决方案"></a>四、遇到的其他问题及解决方案</h1><p>在BannerViewPager的开发过避免不了的会碰到一些问题，虽然有些已经解决了，但有些可能还悬而未决。但是不管解决没解决以供大家参考或讨论。</p><h2 id="1-手指滑动页面过程中应停止自动轮播"><a href="#1-手指滑动页面过程中应停止自动轮播" class="headerlink" title="1.手指滑动页面过程中应停止自动轮播"></a>1.手指滑动页面过程中应停止自动轮播</h2><p>自动轮播的功能是通过Handler来实现的。通过postDelayed开启轮播，通过removeCallbacks停止轮播。代码如下：</p><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment">     * 开启轮播</span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">startLoop</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">if</span> (!isLooping &amp;&amp; isAutoPlay &amp;&amp; mList.size() &gt; <span class="hljs-number">1</span>) &#123;            mHandler.postDelayed(mRunnable, interval);            isLooping = <span class="hljs-keyword">true</span>;        &#125;    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 停止轮播</span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">stopLoop</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">if</span> (isLooping) &#123;            mHandler.removeCallbacks(mRunnable);            isLooping = <span class="hljs-keyword">false</span>;        &#125;    &#125;</code></pre><p>如果在手指滑动的过程中没有停止轮播，体验上来说非常不好。因此，需要处理这种情况。解决方案是重写ViewPager的setOnTouchListener方法，监听手指滑动的时候停止轮播，抬起手指的时候开启轮播。代码如下：</p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setTouchListener</span><span class="hljs-params">()</span> </span>&#123;       mViewPager.setOnTouchListener((v, event) -&gt; &#123;           <span class="hljs-keyword">int</span> action = event.getAction();           <span class="hljs-keyword">switch</span> (action) &#123;               <span class="hljs-keyword">case</span> MotionEvent.ACTION_DOWN:               <span class="hljs-keyword">case</span> MotionEvent.ACTION_MOVE:                   isLooping = <span class="hljs-keyword">true</span>;                   stopLoop();                   <span class="hljs-keyword">break</span>;               <span class="hljs-keyword">case</span> MotionEvent.ACTION_UP:               <span class="hljs-keyword">case</span> MotionEvent.ACTION_CANCEL:                   isLooping = <span class="hljs-keyword">false</span>;                   startLoop();               <span class="hljs-keyword">default</span>:                   <span class="hljs-keyword">break</span>;           &#125;           <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;       &#125;);   &#125;</code></pre><h2 id="2-关于instantiateItem的优化问题"><a href="#2-关于instantiateItem的优化问题" class="headerlink" title="2.关于instantiateItem的优化问题"></a>2.关于instantiateItem的优化问题</h2><p>我们知道，在ViewPager每次切换页面的时候都会调用instantiateItem去实例化ItemView，也就意味着我们在这个方法中通过ViewHolder的createView方法每次切换页面都会被调用重新初始化绑定数据。这样对程序来说是一种性能上的浪费。针对这种情况，在2.4.3之前的版本中做了些优化。在BannerPagerAdapter中维护一个List<View> mViewList集合，用来存放创建出来的itemView.在itemView初始化成功后，为其设置tag并保存到集合中，当在此切换页面时我们从集合中取出itemView并对比tag,如果一致则直接使用即可。这样就避免了重复的创建对象，造成一些性能开销。具体代码如下：</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BannerPagerAdapter</span>&lt;<span class="hljs-title">T</span>, <span class="hljs-title">VH</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ViewHolder</span>&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title">PagerAdapter</span> </span>&#123;<span class="hljs-keyword">private</span> List&lt;View&gt; mViewList = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<span class="hljs-function"><span class="hljs-keyword">private</span> View <span class="hljs-title">findViewByPosition</span><span class="hljs-params">(ViewGroup container, <span class="hljs-keyword">int</span> position)</span> </span>&#123;        <span class="hljs-keyword">for</span> (View view : mViewList) &#123;            <span class="hljs-keyword">if</span> (((<span class="hljs-keyword">int</span>) view.getTag()) == position &amp;&amp; view.getParent() == <span class="hljs-keyword">null</span>) &#123;                <span class="hljs-keyword">return</span> view;            &#125;        &#125;        View view = getView(position, container);        view.setTag(position);        mViewList.add(view);        <span class="hljs-keyword">return</span> view;    &#125;&#125;</code></pre><p>但是这一优化却又会引发另一个问题，即内存问题！通常App的轮播控件都是图片，而图片是比较占用内存的。此时我们把所有的itemView都存储在一个集合中这样真的是一个好的方案吗？在ViewPager页面少的情况下问题可能不会凸显。但是如果ViewPager的页面很多的情况下问题就相当严重了！于是，后来我灵光一闪，突发奇想！那我就设置一个最大缓存呗？当集合中的个数超过阈值的时候就把最近用过的一个itemView移除掉不就好了？妙哉妙哉！可转念一想，这尼玛和设置一个setOffscreenPageLimit有什么区别呢？当我们在考虑这些问题的时候Google工程师早就替我们想到了！所以关于ViewPager的instantiateItem是否有必要去优化我目前持保留态度。但是，在BannerViewPager 2.4.3之前的版本中确实做了上述优化，因此前些版本中可能会存在内存问题。至于2.4.3或之后版本大概会去掉这部分优化。这个问题可能也只能留在未来，待升级到ViewPager2后解决了！关于这个问题欢迎大家在文章下方留言，各抒己见！</p><h2 id="3-RecyclerView-ViewPager会有非Smooth的页面滑动情况"><a href="#3-RecyclerView-ViewPager会有非Smooth的页面滑动情况" class="headerlink" title="3.RecyclerView+ViewPager会有非Smooth的页面滑动情况"></a>3.RecyclerView+ViewPager会有非Smooth的页面滑动情况</h2><p>这个问题不是太好描述，我们直接通过一张GIF来看</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS8xMS8xOS8xNmU4NDAyYTEyOWI1MGQ3?x-oss-process=image/format,png"><br>从图中可以很直观的看到，把BannerViewPager向上划出屏幕再很快划回来，此时BannerViewPager页面切换的动画没有了，很生硬的直接跳到了下一页。这个问题不是BannerViewPager的bug,而是ViewPager内部原因导致的，可以看到很多线上的APP都存在这个问题，例如喜马拉雅（喜马拉雅的轮播图真心做的好看呀，效果也很赞！）。这个bug虽然不影响使用，但是总感觉效果不太好。因此还是要处理一下。处理之前先来分析一下问题原因。<br>在ViewPager内部有一个私有成员变量mFirstLayout，其默认值为true。这个参数用来标记是否是第一次layout的。如果是第一次layout那么滑动就不是smooth的。代码如下：</p><pre><code class="hljs reasonml">public void set<span class="hljs-constructor">CurrentItem(<span class="hljs-params">int</span> <span class="hljs-params">item</span>)</span> &#123;    mPopulatePending = <span class="hljs-literal">false</span>;    set<span class="hljs-constructor">CurrentItemInternal(<span class="hljs-params">item</span>, !<span class="hljs-params">mFirstLayout</span>, <span class="hljs-params">false</span>)</span>;&#125;void set<span class="hljs-constructor">CurrentItemInternal(<span class="hljs-params">int</span> <span class="hljs-params">item</span>, <span class="hljs-params">boolean</span> <span class="hljs-params">smoothScroll</span>, <span class="hljs-params">boolean</span> <span class="hljs-params">always</span>)</span> &#123;    set<span class="hljs-constructor">CurrentItemInternal(<span class="hljs-params">item</span>, <span class="hljs-params">smoothScroll</span>, <span class="hljs-params">always</span>, 0)</span>;&#125;</code></pre><p>这个参数在onLayout方法中会被置为false.代码如下：</p><pre><code class="hljs reasonml">@Overrideprotected void on<span class="hljs-constructor">Layout(<span class="hljs-params">boolean</span> <span class="hljs-params">changed</span>, <span class="hljs-params">int</span> <span class="hljs-params">l</span>, <span class="hljs-params">int</span> <span class="hljs-params">t</span>, <span class="hljs-params">int</span> <span class="hljs-params">r</span>, <span class="hljs-params">int</span> <span class="hljs-params">b</span>)</span> &#123;    <span class="hljs-comment">//  在onLayout的最后一行</span>    mFirstLayout = <span class="hljs-literal">false</span>;&#125;</code></pre><p>因此，在正常情况下，onLayout执行之后页面滑动都应该时smooth的。然后，当ViewPager滑动出屏幕的时候其onDetachedFromWindow方法会被调用，而当其再次进入屏幕的时候则会调用onAttachedToWindow这个方法。来看看onAttachedToWindow方法中的代码：</p><pre><code class="hljs aspectj"><span class="hljs-meta">@Override</span>    <span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">onAttachedToWindow</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">super</span>.onAttachedToWindow();        mFirstLayout = <span class="hljs-keyword">true</span>;    &#125;</code></pre><p>仅仅把mFirstLayout置为了true！而如果此时onLayout没有被触发，而是先发生了页面滚动，那么此时的页面滑动就没了的smooth效果了。了解了原因之后处理起来就简单了，因为mFirstLayout是私有属性，我们无法访问，所以只有通过反射来修改其值。我们在CatchViewPager(继承自ViewPager的一个类)中做如下操作：</p><pre><code class="hljs aspectj"><span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> firstLayout = <span class="hljs-keyword">true</span>; <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">onAttachedToWindow</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">super</span>.onAttachedToWindow();        hookFirstLayout();    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">onDetachedFromWindow</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">super</span>.onDetachedFromWindow();        firstLayout = <span class="hljs-keyword">false</span>;    &#125; <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">hookFirstLayout</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">try</span> &#123;            Field mFirstLayout = ViewPager.class.getDeclaredField(&quot;mFirstLayout&quot;);            mFirstLayout.setAccessible(<span class="hljs-keyword">true</span>);            mFirstLayout.set(<span class="hljs-keyword">this</span>, firstLayout);            setCurrentItem(getCurrentItem());        &#125; <span class="hljs-keyword">catch</span> (IllegalAccessException | NoSuchFieldException e) &#123;            e.printStackTrace();        &#125;    &#125;</code></pre><p>这样问题就迎刃而解了，再次滑动RecyclerView，一切完好！</p><h2 id="4-关于Indicator在SMOOTH下的滑动问题。"><a href="#4-关于Indicator在SMOOTH下的滑动问题。" class="headerlink" title="4.关于Indicator在SMOOTH下的滑动问题。"></a>4.关于Indicator在SMOOTH下的滑动问题。</h2><p>这是一个由来已久的问题，感觉好难处理！如果不处理循环的话其实是非常容易的，但是如果加上循环之后总是有这样那的问题😂。只能说目前的计算方式不是太对，具体怎么计算的我也不贴出来了！毕竟现在写出来的还是有bug的。很羡慕喜马拉雅的滑动效果做的太Nice了！后续版本中我会想办法再优化这个问题。</p><h1 id="五、总结及致谢"><a href="#五、总结及致谢" class="headerlink" title="五、总结及致谢"></a>五、总结及致谢</h1><p>到这里关于BannerViewPager的两篇文章就全部结束了，<a href="https://juejin.im/post/5d6bce24f265da03db0790d1">上一篇文章</a>主要着重介绍了BannerViewPager的功能及用法，而本篇文章则详细的讲解了BannerViewPager的实现原理。就目前而言，BannerViewPager并不是一个完美的轮播库，很多地方还有很大值得优化的空间甚至有些功能还存在一些小bug。但是这些都不会阻碍BannerViewPager逐渐走向优秀。在未来的版本中我将会针对这些问题逐一优化。当然，如果你有好的解决方案欢迎在文章下方留言，也可以直接到github提交pull request。如果你有什么好的建议或者遇到什么问题也欢迎在文章下方留言讨论。</p><p>最后要特别感谢saiwu-bigkoo大神的<a href="https://github.com/saiwu-bigkoo/Android-ConvenientBanner">Android-ConvenientBanner</a>库以及youth5201314大神的<a href="https://github.com/youth5201314/banner">banner</a>库。BannerViewPager中的很多思想来自这两个库。BannerViewPager中内置的四个ViewPager Transform来自<a href="https://github.com/ToxicBakery/ViewPagerTransforms">ViewPagerTransforms</a>库，在此表示感谢。同时还要感谢<a href="https://wanandroid.com/">玩Android</a>提供的接口支持，以及在开发过程中参考过的文章或其它优秀开源库，不能一一列出，在此一并表示感谢。</p><p>最后还是要贴上源码地址，欢迎star、fork 。</p><p><a href="https://github.com/zhpanvip/BannerViewPager">点击查看源码</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>自定义View</tag>
      
      <tag>Banner</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>打造一个丝滑般自动轮播无限循环Android库(一)</title>
    <link href="/2019/09/01/19.%E6%89%93%E9%80%A0%E4%B8%80%E4%B8%AA%E4%B8%9D%E6%BB%91%E8%88%AC%E8%87%AA%E5%8A%A8%E8%BD%AE%E6%92%AD%E6%97%A0%E9%99%90%E5%BE%AA%E7%8E%AFAndroid%E5%BA%93(%E4%B8%80)/"/>
    <url>/2019/09/01/19.%E6%89%93%E9%80%A0%E4%B8%80%E4%B8%AA%E4%B8%9D%E6%BB%91%E8%88%AC%E8%87%AA%E5%8A%A8%E8%BD%AE%E6%92%AD%E6%97%A0%E9%99%90%E5%BE%AA%E7%8E%AFAndroid%E5%BA%93(%E4%B8%80)/</url>
    
    <content type="html"><![CDATA[<p>本文同步发布在<a href="https://juejin.im/post/5d6bce24f265da03db0790d1">掘金</a>，如需转载请注明出处。</p><p>BannerViewPager系列文章共三篇，此文为第一篇，另外两篇参看下面链接：</p><p><a href="https://blog.csdn.net/qq_20521573/article/details/100609592">BannerViewPager源码剖析</a></p><p><a href="https://blog.csdn.net/qq_20521573/article/details/103216593">剖析BannerViewPager中Indicator的设计思想</a></p><p>最近公司项目在升级AndroidX，由于项目中用到的一些比较老的库都已停止更新维护，因此需要将这些库替换掉，其中就包括自动轮播的Banner库。恰逢笔者在之前写过一个轮播图，因此就在此基础上重构，打造出了一个全新的支持多种样式的轮播库—<a href="https://github.com/zhpanvip/BannerViewPager/tree/master">BannerViewPager</a>。个人觉得<a href="https://github.com/zhpanvip/BannerViewPager/tree/master">BannerViewPager</a>要优于其它开源的Banner库，不仅仅是因为它拥有简洁高效的代码，更是因为它高度的可定制性。<a href="https://github.com/zhpanvip/BannerViewPager/tree/master">BannerViewPager</a>不仅支持任意的页面布局，而且可以支持任意的Indicator样式。甚至连Indicator的位置都可以做到任意摆放。是的，就是这么随心所欲。无图言叼，还是先通过图片和代码一览BannerViewPager的功能吧(多图预警)。</p><h1 id="一、BannerViewPager效果预览及API介绍"><a href="#一、BannerViewPager效果预览及API介绍" class="headerlink" title="一、BannerViewPager效果预览及API介绍"></a>一、BannerViewPager效果预览及API介绍</h1><p>由于GIF图片质量问题，下面的预览图并不清晰，大家可以点击下面链接或者扫描二维码下载Apk体验。Apk存放在github上，下载速度可能会比较慢。</p><p> <a href="https://github.com/zhpanvip/BannerViewPager/raw/master/download/app.apk">点击或扫描二维码下载apk</a></p><p><img src="https://raw.githubusercontent.com/zhpanvip/Resource/master/image/banner/qrcode.png"></p><h2 id="1-setIndicatorStyle（开局就放王炸？）"><a href="#1-setIndicatorStyle（开局就放王炸？）" class="headerlink" title="1.setIndicatorStyle（开局就放王炸？）"></a>1.setIndicatorStyle（开局就放王炸？）</h2><p>BannerViewPager目前内置了CIRCLE和DASH两种样式的指示器,通过setIndicatorStyle(int)一行代码就可以切换指示器的样式。当然，如果内置样式不满足你的需求。BannerViewPager还提供了自定义指示器的功能。只要继承BaseIndicatorView或者实现IIndicator接口，并重写相应方法，就可以通过自定义View为所欲为的打造任意的Indicator了。如下图【自定义】就是自己实现的指示器样式。</p><table><thead><tr><th>CIRCLE</th><th>DASH</th><th>自定义</th></tr></thead><tbody><tr><td><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS8xMS8xNi8xNmU3NGNhODFlOWM4OGI5?x-oss-process=image/format,png"></td><td><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS8xMS8xNi8xNmU3NGNiNGU3M2YyM2U3?x-oss-process=image/format,png"></td><td><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS8xMS8xNi8xNmU3NGNjMjE2OWNiOTBi?x-oss-process=image/format,png"></td></tr></tbody></table><p>下面通过代码演示如何切换指示器：</p><pre><code class="hljs reasonml">mViewPager.set<span class="hljs-constructor">IndicatorStyle(IndicatorStyle.DASH)</span>          .set<span class="hljs-constructor">IndicatorHeight(BannerUtils.<span class="hljs-params">dp2px</span>(3f)</span>)          .set<span class="hljs-constructor">IndicatorWidth(BannerUtils.<span class="hljs-params">dp2px</span>(3)</span>, <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">BannerUtils</span>.</span></span>dp2px(<span class="hljs-number">10</span>))          .set<span class="hljs-constructor">HolderCreator(()</span> -&gt; <span class="hljs-keyword">new</span> <span class="hljs-constructor">ImageResourceViewHolder(0)</span>)          .create(mDrawableList)</code></pre><p>通过5行代码就轻松的实现了上图【Dash】仿支付宝的Indicator样式（大家可以留意一下支付宝的轮播Indicator，挺有意思）。</p><p>关于自定义IndicatorView将会放在后边章节详细讲解。</p><h2 id="2-setPageStyle"><a href="#2-setPageStyle" class="headerlink" title="2.setPageStyle"></a>2.setPageStyle</h2><p>通过setPageStyle(int)一行代码开启一屏三页模式，一屏三页模式下目前有三种样式，分别如下图所示：</p><table><thead><tr><th>MULTI_PAGE</th><th>MULTI_PAGE_SCALE</th><th>MULTI_PAGE_OVERLAP</th></tr></thead><tbody><tr><td><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS8xMS8xNS8xNmU2ZjNjMTdhZDcyMGMx?x-oss-process=image/format,png" alt="MULTI_PAGE "></td><td><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS8xMS8xNS8xNmU2ZjNjMTdiODNhOTQ4?x-oss-process=image/format,png" alt="MULTI_PAGE_SCALE "></td><td><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS8xMS8xNS8xNmU2ZjNjMTdjM2QwOWVh?x-oss-process=image/format,png" alt="MULTI_PAGE_OVERLAP "></td></tr><tr><td>代码演示：</td><td></td><td></td></tr></tbody></table><pre><code class="hljs css"><span class="hljs-selector-tag">mViewPager</span><span class="hljs-selector-class">.setPageStyle</span>(<span class="hljs-selector-tag">PageStyle</span><span class="hljs-selector-class">.MULTI_PAGE</span>)          <span class="hljs-selector-class">.setPageMargin</span>(<span class="hljs-selector-tag">BannerUtils</span><span class="hljs-selector-class">.dp2px</span>(10))          <span class="hljs-selector-class">.setRevealWidth</span>(<span class="hljs-selector-tag">BannerUtils</span><span class="hljs-selector-class">.dp2px</span>(10))          <span class="hljs-selector-class">.setHolderCreator</span>(() <span class="hljs-selector-tag">-</span>&gt; <span class="hljs-selector-tag">new</span> <span class="hljs-selector-tag">ImageResourceViewHolder</span>(<span class="hljs-selector-tag">BannerUtils</span><span class="hljs-selector-class">.dp2px</span>(5)))          <span class="hljs-selector-class">.create</span>(<span class="hljs-selector-tag">mDrawableList</span>);</code></pre><p>同样通过短短5行代码就实现了上图【MULTI_PAGE】的效果，简单好用！</p><h2 id="3-如何实现指示器位置任意摆放？"><a href="#3-如何实现指示器位置任意摆放？" class="headerlink" title="3.如何实现指示器位置任意摆放？"></a>3.如何实现指示器位置任意摆放？</h2><p>我们看到上面图表中MULTI_PAGE_OVERLAP模式下指示器显示到了Banner的下边。这种效果该怎么实现呢？其实BannerViewPager是支持把Indicator摆放在任意位置的。之所以能如此强大是因为我们通过自定义指示器替换了内置的IndicatorView，也就是说此时的IndicatorView已经脱离了BannerViewPager,也就理所当然的可以放在任意位置了。接下来通过代码来看下如何实现：</p><h3 id="1-Xml布局文件如下"><a href="#1-Xml布局文件如下" class="headerlink" title="(1)Xml布局文件如下"></a>(1)Xml布局文件如下</h3><pre><code class="hljs stylus">&lt;RelativeLayout xmlns:android=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span>    xmlns:app=<span class="hljs-string">&quot;http://schemas.android.com/apk/res-auto&quot;</span>    android:layout_width=<span class="hljs-string">&quot;match_parent&quot;</span>    android:layout_height=<span class="hljs-string">&quot;match_parent&quot;</span>&gt;    &lt;com<span class="hljs-selector-class">.zhpan</span><span class="hljs-selector-class">.bannerview</span>.BannerViewPager        android:id=<span class="hljs-string">&quot;@+id/banner_view&quot;</span>        android:layout_width=<span class="hljs-string">&quot;match_parent&quot;</span>        android:layout_height=<span class="hljs-string">&quot;180dp&quot;</span>        android:layout_marginTop=<span class="hljs-string">&quot;20dp&quot;</span>        app:bvp_page_style=<span class="hljs-string">&quot;multi_page&quot;</span> /&gt;    &lt;com<span class="hljs-selector-class">.zhpan</span><span class="hljs-selector-class">.bannerview</span><span class="hljs-selector-class">.indicator</span>.CircleIndicatorView        android:id=<span class="hljs-string">&quot;@+id/indicator_view&quot;</span>        android:layout_width=<span class="hljs-string">&quot;wrap_content&quot;</span>        android:layout_height=<span class="hljs-string">&quot;wrap_content&quot;</span>        android:layout_below=<span class="hljs-string">&quot;@id/banner_view&quot;</span>        android:layout_centerHorizontal=<span class="hljs-string">&quot;true&quot;</span>        android:layout_marginTop=<span class="hljs-string">&quot;10dp&quot;</span> /&gt; &lt;/RelativeLayout&gt;</code></pre><h3 id="2-通过setIndicatorView-IIndicator-替换内部指示器"><a href="#2-通过setIndicatorView-IIndicator-替换内部指示器" class="headerlink" title="(2)通过setIndicatorView(IIndicator)替换内部指示器"></a>(2)通过setIndicatorView(IIndicator)替换内部指示器</h3><pre><code class="hljs reasonml">      CircleIndicatorView indicatorView = find<span class="hljs-constructor">ViewById(R.<span class="hljs-params">id</span>.<span class="hljs-params">indicator_view</span>)</span>;mViewPager.set<span class="hljs-constructor">IndicatorView(<span class="hljs-params">indicatorView</span>)</span>                .set<span class="hljs-constructor">IndicatorColor(Color.<span class="hljs-params">parseColor</span>(<span class="hljs-string">&quot;#888888&quot;</span>)</span>,                     <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Color</span>.</span></span>parse<span class="hljs-constructor">Color(<span class="hljs-string">&quot;#118EEA&quot;</span>)</span>)                .set<span class="hljs-constructor">HolderCreator(()</span> -&gt; <span class="hljs-keyword">new</span> <span class="hljs-constructor">ImageResourceViewHolder(BannerUtils.<span class="hljs-params">dp2px</span>(5)</span>))                .create(mDrawableList);</code></pre><p>CircleIndicatorView是什么？其实他就是内置在BannerViewPager中的指示器，现在你只需要把它同BannerViewPager放在同一个布局文件中就可以了。又是仅仅通过一行代码就完成了对内部指示器的替换，不知道你看完之后是否会拍案叫绝，竟然如此简单！</p><h2 id="4-setIndicatorSlideMode"><a href="#4-setIndicatorSlideMode" class="headerlink" title="4.setIndicatorSlideMode"></a>4.setIndicatorSlideMode</h2><p>我们应该见过很多App轮播图的指示器都会跟随页面一起滑动。BannerViewPager自然也不会少了这个功能。通过setIndicatorSlideMode(int)一行代码就可以轻松切换到下图（SMOOTH）的效果。</p><table><thead><tr><th>NORMAL</th><th>SMOOTH</th></tr></thead><tbody><tr><td><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS8xMS8xNS8xNmU2ZjNjMWIwM2U5NWE5?x-oss-process=image/format,png"></td><td><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS8xMS8xNS8xNmU2ZjNjMWI0MGMwMzAz?x-oss-process=image/format,png"></td></tr></tbody></table><p>代码实现仍然非常简单，使用BannerViewPager你只需要记住一个核心–Only One Line！所以演示代码不再贴出你应该不会揍我吧？</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS8xMS8xNi8xNmU3NGE4NThhY2ZmZTg2?x-oss-process=image/format,png"></p><h2 id="5-setPageTransformerStyle"><a href="#5-setPageTransformerStyle" class="headerlink" title="5.setPageTransformerStyle"></a>5.setPageTransformerStyle</h2><p>关于Transform更好的方式应该是留给开发者自己去实现，因此BannerViewPager中目前仅内置了四种常用Transform样式，如果不能满足需求，可以通过BannerViewPager的setPageTransformer(ViewPager.PageTransformer transformer)设置自定义的Transform。四种内置Transform样式如下：</p><table><thead><tr><th>STACK</th><th>ACCORDION</th><th>DEPTH</th><th>ROTATE</th></tr></thead><tbody><tr><td><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS8xMS8xNy8xNmU3OTkyZGZmMTA5MWYz?x-oss-process=image/format,png"></td><td><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS8xMS8xNy8xNmU3OTkzNjI4NGU2MThm?x-oss-process=image/format,png"></td><td><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS8xMS8xNy8xNmU3OTk0MzBhYThmYTFl?x-oss-process=image/format,png"></td><td><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS8xMS8xNy8xNmU3OTk0YmQ2MzlmYjAw?x-oss-process=image/format,png"></td></tr></tbody></table><p>当然，BannerViewPager的功能并不仅仅局限于此，更多功能就不再演示，可以看下面所有开放的API接口。</p><h2 id="6-BannerViewPager开放的API"><a href="#6-BannerViewPager开放的API" class="headerlink" title="6.BannerViewPager开放的API"></a>6.BannerViewPager开放的API</h2><p>BannerViewPager开放了众多API,以供满足不同的需求，具体如下表：</p><table><thead><tr><th>方法名</th><th>方法描述</th><th>说明</th></tr></thead><tbody><tr><td>BannerViewPager&lt;T, VH&gt; setCanLoop(boolean canLoop)</td><td>是否开启循环</td><td>默认值true</td></tr><tr><td>BannerViewPager&lt;T, VH&gt; setAutoPlay(boolean autoPlay)</td><td>是否开启自动轮播</td><td>默认值true</td></tr><tr><td>BannerViewPager&lt;T, VH&gt; setInterval(int interval)</td><td>自动轮播时间间隔</td><td>单位毫秒，默认值3000</td></tr><tr><td>BannerViewPager&lt;T, VH&gt; setScrollDuration(int scrollDuration)</td><td>设置页面滚动时间</td><td>设置页面滚动时间</td></tr><tr><td>BannerViewPager&lt;T, VH&gt; setRoundCorner(int radius)</td><td>设置圆角</td><td>默认无圆角 需要SDK_INT&gt;=LOLLIPOP(API 21)</td></tr><tr><td>BannerViewPager&lt;T, VH&gt; setOnPageClickListener(OnPageClickListener onPageClickListener)</td><td>设置页面点击事件</td><td></td></tr><tr><td>BannerViewPager&lt;T, VH&gt; setHolderCreator(HolderCreator&lt;VH&gt; holderCreator)</td><td>设置HolderCreator</td><td>必须设置HolderCreator，否则会抛出NullPointerException</td></tr><tr><td>BannerViewPager&lt;T, VH&gt; setIndicatorVisibility(@Visibility int visibility)</td><td>indicator vibility</td><td>默认值VISIBLE 2.4.2 新增</td></tr><tr><td>BannerViewPager&lt;T, VH&gt; setIndicatorStyle(int indicatorStyle)</td><td>设置指示器样式</td><td>可选枚举(CIRCLE, DASH) 默认CIRCLE</td></tr><tr><td>BannerViewPager&lt;T, VH&gt; setIndicatorGravity(int gravity)</td><td>指示器位置</td><td>可选值(CENTER、START、END)默认值CENTER</td></tr><tr><td>BannerViewPager&lt;T, VH&gt; setIndicatorColor(int normalColor,int checkedColor)</td><td>指示器圆点颜色</td><td>normalColor：未选中时颜色默认”#8C6C6D72”， checkedColor：选中时颜色 默认”#8C18171C”</td></tr><tr><td>BannerViewPager&lt;T, VH&gt; setIndicatorSlideMode(int slideMode)</td><td>设置Indicator滑动模式</td><td>可选（NORMAL、SMOOTH），默认值SMOOTH</td></tr><tr><td>BannerViewPager&lt;T, VH&gt; setIndicatorRadius(int radius)</td><td>设置指示器圆点半径</td><td>默认值4dp</td></tr><tr><td>BannerViewPager&lt;T, VH&gt; setIndicatorRadius(int normalRadius,int checkRadius)</td><td>设置指示器圆点半径</td><td>normalRadius:未选中时半径  checkedRadius:选中时的半径,默认值4dp</td></tr><tr><td>BannerViewPager&lt;T, VH&gt; setIndicatorWidth(int indicatorWidth)</td><td>设置指示器宽度，如果是圆形指示器，则为直径</td><td>默认值8dp</td></tr><tr><td>BannerViewPager&lt;T, VH&gt; setIndicatorWidth(int normalWidth, int checkWidth)</td><td>设置指示器宽度，如果是圆形指示器，则为直径</td><td>默认值8dp</td></tr><tr><td>BannerViewPager&lt;T, VH&gt; setIndicatorHeight(int indicatorHeight)</td><td>设置指示器高度，仅在Indicator样式为DASH时有效</td><td>默认值normalIndicatorWidth/2</td></tr><tr><td>BannerViewPager&lt;T, VH&gt; setIndicatorGap(int indicatorMargin)</td><td>指示器圆点间距</td><td>默认值为指示器宽度（或者是圆的直径）</td></tr><tr><td>BannerViewPager&lt;T, VH&gt; setIndicatorView(IIndicator indicatorView)</td><td>设置自定义指示器</td><td></td></tr><tr><td>BannerViewPager&lt;T, VH&gt; setPageTransformerStyle(int style)</td><td>设置页面Transformer内置样式</td><td></td></tr><tr><td>BannerViewPager&lt;T, VH&gt; setCurrentItem(int item)</td><td>Set the currently selected page.</td><td>2.3.5新增</td></tr><tr><td>void getCurrentItem()</td><td>获取当前position</td><td>2.3.5新增</td></tr><tr><td>BannerViewPager&lt;T, VH&gt; setPageStyle(PageStyle pageStyle)</td><td>设置页面样式</td><td>2.4.0新增 可选（MULTI_PAGE、NORMAL）MULTI_PAGE：一屏多页样式</td></tr><tr><td>BannerViewPager&lt;T, VH&gt; setPageMargin(int pageMargin)</td><td>设置页面间隔</td><td>2.4.0新增</td></tr><tr><td>BannerViewPager&lt;T, VH&gt; setIndicatorMargin(int left, int top, int right, int bottom)</td><td>设置Indicator边距</td><td>2.4.1新增</td></tr><tr><td>BannerViewPager&lt;T, VH&gt; setOnPageChangeListener(OnPageChangeListener l)</td><td>页面改变的监听事件</td><td>2.4.3新增</td></tr><tr><td>void startLoop()</td><td>开启自动轮播</td><td>初始化BannerViewPager时不必调用该方法,设置setAutoPlay后会调用startLoop()</td></tr><tr><td>void stopLoop()</td><td>停止自动轮播</td><td>如果开启自动轮播，为避免内存泄漏需要在onStop()或onDestroy中调用此方法</td></tr><tr><td>List&lt;T&gt; getList()</td><td>获取Banner中的集合数据</td><td></td></tr><tr><td>void create(List<T> list)</td><td>初始化并构造BannerViewPager</td><td>必须调用，否则前面设置的参数无效</td></tr></tbody></table><h2 id="7-BannerViewPager支持的attrs"><a href="#7-BannerViewPager支持的attrs" class="headerlink" title="7.BannerViewPager支持的attrs"></a>7.BannerViewPager支持的attrs</h2><p>你也可以通过xml来设置BannerViewPager，xml支持的attrs如下:<br>| Attributes | format | description |<br>|–|–|–|<br>| bvp_interval | integer | 自动轮播时间间隔 |<br>| bvp_scroll_duration | integer | 页面切换时滑动时间|<br>| bvp_can_loop | boolean| 是否循环 |<br>| bvp_auto_play | boolean | 是否自动播放  |<br>| bvp_indicator_checked_color | color | indicator选中时颜色 |<br>| bvp_indicator_normal_color | color | indicator未选中时颜色 |<br>| bvp_indicator_radius | dimension | indicator圆点半径或者Dash模式的1/2宽度  |<br>| bvp_round_corner| dimension  | Banner圆角大小 |<br>| bvp_page_margin | dimension | 页面item间距 |<br>| bvp_reveal_width | dimension | 一屏多页模式下两边item漏出的宽度 |<br>| bvp_indicator_style | enum | indicator样式(circle/dash)  |<br>| bvp_indicator_slide_mode | enum | indicator滑动模式(normal/smooth) |<br>| bvp_indicator_gravity | enum | indicator位置(center/start/end) |<br>| bvp_page_style | enum | page样式(normal/multi_page/multi_page_overlap/multi_page_scale) |<br>| bvp_transformer_style | enum | transform样式(normal/depth/stack/accordion) |<br>| bvp_indicator_visibility| enum | indicator visibility(visible/gone/invisible) |</p><h1 id="二、BannerViewPager详细使用说明"><a href="#二、BannerViewPager详细使用说明" class="headerlink" title="二、BannerViewPager详细使用说明"></a>二、BannerViewPager详细使用说明</h1><h2 id="1-gradle中添加依赖"><a href="#1-gradle中添加依赖" class="headerlink" title="1.gradle中添加依赖"></a>1.gradle中添加依赖</h2><p>如果您已迁移到AndroidX请使用latestVersion(&gt;=2.4.3.1)</p><pre><code class="hljs clean"><span class="hljs-keyword">implementation</span> <span class="hljs-string">&#x27;com.zhpan.library:bannerview:latestVersion&#x27;</span></code></pre><p>如果未迁移到AndroidX请使用（非Androidx的包托管在JCenter上）：</p><pre><code class="hljs clean"><span class="hljs-keyword">implementation</span> <span class="hljs-string">&#x27;com.zhpan.library:bannerview:2.4.3.1&#x27;</span></code></pre><h2 id="2-在xml文件中添加如下代码："><a href="#2-在xml文件中添加如下代码：" class="headerlink" title="2. 在xml文件中添加如下代码："></a>2. 在xml文件中添加如下代码：</h2><pre><code class="hljs routeros">&lt;com.zhpan.bannerview.BannerViewPager        android:<span class="hljs-attribute">id</span>=<span class="hljs-string">&quot;@+id/banner_view&quot;</span>        android:<span class="hljs-attribute">layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span>        android:<span class="hljs-attribute">layout_margin</span>=<span class="hljs-string">&quot;10dp&quot;</span>        android:<span class="hljs-attribute">layout_height</span>=<span class="hljs-string">&quot;160dp&quot;</span> /&gt;</code></pre><h2 id="3-Banner的Item页面布局"><a href="#3-Banner的Item页面布局" class="headerlink" title="3.Banner的Item页面布局"></a>3.Banner的Item页面布局</h2><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">RelativeLayout</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><span class="hljs-tag">    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">ImageView</span></span><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/banner_image&quot;</span></span><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><span class="hljs-tag">        <span class="hljs-attr">android:scaleType</span>=<span class="hljs-string">&quot;centerCrop&quot;</span> /&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">LinearLayout</span></span><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><span class="hljs-tag">        <span class="hljs-attr">android:layout_alignParentBottom</span>=<span class="hljs-string">&quot;true&quot;</span></span><span class="hljs-tag">        <span class="hljs-attr">android:background</span>=<span class="hljs-string">&quot;#66000000&quot;</span></span><span class="hljs-tag">        <span class="hljs-attr">android:gravity</span>=<span class="hljs-string">&quot;center_vertical&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">TextView</span></span><span class="hljs-tag">            <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/tv_describe&quot;</span></span><span class="hljs-tag">            <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><span class="hljs-tag">            <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><span class="hljs-tag">            <span class="hljs-attr">android:layout_gravity</span>=<span class="hljs-string">&quot;center_vertical&quot;</span></span><span class="hljs-tag">            <span class="hljs-attr">android:layout_marginStart</span>=<span class="hljs-string">&quot;15dp&quot;</span></span><span class="hljs-tag">            <span class="hljs-attr">android:gravity</span>=<span class="hljs-string">&quot;center_vertical&quot;</span></span><span class="hljs-tag">            <span class="hljs-attr">android:paddingTop</span>=<span class="hljs-string">&quot;5dp&quot;</span></span><span class="hljs-tag">            <span class="hljs-attr">android:paddingBottom</span>=<span class="hljs-string">&quot;5dp&quot;</span></span><span class="hljs-tag">            <span class="hljs-attr">android:textColor</span>=<span class="hljs-string">&quot;#FFFFFF&quot;</span></span><span class="hljs-tag">            <span class="hljs-attr">android:textSize</span>=<span class="hljs-string">&quot;16sp&quot;</span> /&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">LinearLayout</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">RelativeLayout</span>&gt;</span></code></pre><h2 id="4-自定义ViewHolder"><a href="#4-自定义ViewHolder" class="headerlink" title="4.自定义ViewHolder"></a>4.自定义ViewHolder</h2><pre><code class="hljs reasonml">public <span class="hljs-keyword">class</span> NetViewHolder implements ViewHolder&lt;BannerData&gt; &#123;    <span class="hljs-keyword">private</span> ImageView mImageView;    <span class="hljs-keyword">private</span> TextView mTextView;    @Override    public View create<span class="hljs-constructor">View(ViewGroup <span class="hljs-params">viewGroup</span>, Context <span class="hljs-params">context</span>, <span class="hljs-params">int</span> <span class="hljs-params">position</span>)</span> &#123;        View view = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">LayoutInflater</span>.</span></span>from(context).inflate(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">R</span>.</span></span>layout.item_net, viewGroup, <span class="hljs-literal">false</span>);        mImageView = view.find<span class="hljs-constructor">ViewById(R.<span class="hljs-params">id</span>.<span class="hljs-params">banner_image</span>)</span>;        mTextView = view.find<span class="hljs-constructor">ViewById(R.<span class="hljs-params">id</span>.<span class="hljs-params">tv_describe</span>)</span>;        return view;    &#125;    @Override    public void on<span class="hljs-constructor">Bind(Context <span class="hljs-params">context</span>, BannerData <span class="hljs-params">data</span>, <span class="hljs-params">int</span> <span class="hljs-params">position</span>, <span class="hljs-params">int</span> <span class="hljs-params">size</span>)</span> &#123;        ImageLoaderOptions options = <span class="hljs-keyword">new</span> ImageLoaderOptions.<span class="hljs-constructor">Builder()</span>.into(mImageView).load(data.get<span class="hljs-constructor">ImagePath()</span>).place<span class="hljs-constructor">Holder(R.<span class="hljs-params">drawable</span>.<span class="hljs-params">placeholder</span>)</span>.build<span class="hljs-literal">()</span>;        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ImageLoaderManager</span>.</span></span>get<span class="hljs-constructor">Instance()</span>.load<span class="hljs-constructor">Image(<span class="hljs-params">options</span>)</span>;        mTextView.set<span class="hljs-constructor">Text(<span class="hljs-params">data</span>.<span class="hljs-params">getTitle</span>()</span>);    &#125;&#125;</code></pre><h2 id="5-BannerViewPager参数配置"><a href="#5-BannerViewPager参数配置" class="headerlink" title="5.BannerViewPager参数配置"></a>5.BannerViewPager参数配置</h2><pre><code class="hljs arduino">   <span class="hljs-keyword">private</span> BannerViewPager&lt;BannerData, NetViewHolder&gt; mBannerViewPager;<span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">initViewPager</span><span class="hljs-params">()</span> </span>&#123;            mBannerViewPager = findViewById(R.id.banner_view);            mBannerViewPager.showIndicator(<span class="hljs-literal">true</span>)               .setInterval(<span class="hljs-number">3000</span>)               .setCanLoop(<span class="hljs-literal">false</span>)               .setAutoPlay(<span class="hljs-literal">true</span>)               .setRoundCorner(DpUtils.dp2px(<span class="hljs-number">7</span>))               .setIndicatorColor(Color.parseColor(<span class="hljs-string">&quot;#935656&quot;</span>), Color.parseColor(<span class="hljs-string">&quot;#FF4C39&quot;</span>))               .setIndicatorGravity(BannerViewPager.END)               .setScrollDuration(<span class="hljs-number">1000</span>).setHolderCreator(NetViewHolder::<span class="hljs-keyword">new</span>)               .setOnPageClickListener(<span class="hljs-built_in">position</span> -&gt; &#123;                   BannerData bannerData = mBannerViewPager.getList().<span class="hljs-built_in">get</span>(<span class="hljs-built_in">position</span>);                   Toast.makeText(NetworkBannerActivity.<span class="hljs-keyword">this</span>,                           <span class="hljs-string">&quot;点击了图片&quot;</span> + <span class="hljs-built_in">position</span> + <span class="hljs-string">&quot; &quot;</span> + bannerData.getDesc(), Toast.LENGTH_SHORT).show();               &#125;).create(mList);       &#125;</code></pre><h3 id="6-开启与停止轮播"><a href="#6-开启与停止轮播" class="headerlink" title="6.开启与停止轮播"></a>6.开启与停止轮播</h3><p><strong><em>2.5.0之后版本无需自行在Activity或Fragment中管理stopLoop和startLoop方法，但这两个方法依旧保留对外开发</em></strong></p><p><del>如果开启了自动轮播功能，请务必在onDestroy中停止轮播，以免出现内存泄漏。</del></p><pre><code class="hljs aspectj"><span class="hljs-meta">@Override</span>   <span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">onDestroy</span><span class="hljs-params">()</span> </span>&#123;       <span class="hljs-keyword">super</span>.onDestroy();       <span class="hljs-keyword">if</span> (mBannerViewPager != <span class="hljs-keyword">null</span>)   mViewpager.stopLoop();   &#125;</code></pre><p><del>为了节省性能也可以在onStop中停止轮播，在onResume中开启轮播：</del></p><pre><code class="hljs aspectj"><span class="hljs-meta">@Override</span><span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">onStop</span><span class="hljs-params">()</span> </span>&#123;    <span class="hljs-keyword">super</span>.onStop();    <span class="hljs-keyword">if</span> (mBannerViewPager != <span class="hljs-keyword">null</span>)        mBannerViewPager.stopLoop();&#125;<span class="hljs-meta">@Override</span><span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">onResume</span><span class="hljs-params">()</span> </span>&#123;    <span class="hljs-keyword">super</span>.onResume();    <span class="hljs-keyword">if</span> (mBannerViewPager != <span class="hljs-keyword">null</span>)        mBannerViewPager.startLoop();&#125;</code></pre><h1 id="三、高级功能—自定义IndicatorView"><a href="#三、高级功能—自定义IndicatorView" class="headerlink" title="三、高级功能—自定义IndicatorView"></a>三、高级功能—自定义IndicatorView</h1><p>因为指示器的样式千变万化,BannerViewPager中不可能内置所有的样式，因此我将定义权限交给了开发者自己来实现，这样就可以满足所有开发者的需求了。但是自定义IndicatorView需要有一定的自定义View基础，尽管我已经在BaseIndicatorView中处理了许多逻辑，但是还是要开发者根据自身需求进行Indicator的绘制。好了，下面就让我们来看看如何实现自定义IndicatorView吧。</p><p>关于自定义IndicatorView其实我们在第一节中讲解Indicator摆放位置时已经提到了，就是通过setIndicator(IIndicator)来替换内部的指示器。当然，这个方法接收的参数不仅仅是内置的两个IndicatorView，它还可以是我们自己实现的Indicator。前提只需要继承BaseIndicatorView或者继承View并实现IIndicator，然后根据需求绘制即可。</p><h3 id="1-认识BaseIndicatorView"><a href="#1-认识BaseIndicatorView" class="headerlink" title="(1)认识BaseIndicatorView"></a>(1)认识BaseIndicatorView</h3><p>BaseIndicatorView是BannerViewPager库中的一个类，它继承自View并实现了IIndicator接口。在这个类中存储了BannerViewPager的许多参数信息，比如页面个数(pageSize)、页面滑动进度(slideProgress)以及当前页面位置(currentPosition)等，这些都是在绘制IndicatorView时会用到的信息。有了这些参数之后我们就可以比较轻松的去绘制指示器了。如果你觉得我这些数据计算的不够精确或者计算存在错误，那么你大可以自己实现IIndicator接口自行计算。本文我会通过继承BaseIndicatorView的方式来实现一个自定义指示器的例子。<br>你可以点击链接查看<a href="https://github.com/zhpanvip/BannerViewPager/blob/master/bannerview/src/main/java/com/zhpan/bannerview/indicator/BaseIndicatorView.java">BaseIndicatorView</a>的完整代码。</p><h3 id="2-开启自定义IndicatorView之路"><a href="#2-开启自定义IndicatorView之路" class="headerlink" title="(2)开启自定义IndicatorView之路"></a>(2)开启自定义IndicatorView之路</h3><p>好了，接下来我们就来完成一个如下图所示的自定义IndicatorView吧！</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS8xMS8xNi8xNmU3NDdhMGJmZDc3MGE1?x-oss-process=image/format,png"></p><p><strong>新建一个FigureIndicatorView类并继承BaseIndicatorView</strong></p><pre><code class="hljs reasonml">public <span class="hljs-keyword">class</span> FigureIndicatorView extends BaseIndicatorView &#123;    <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> radius = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DpUtils</span>.</span></span>dp2px(<span class="hljs-number">20</span>);    <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> backgroundColor = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Color</span>.</span></span>parse<span class="hljs-constructor">Color(<span class="hljs-string">&quot;#88FF5252&quot;</span>)</span>;    <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> textColor = Color.WHITE;    <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> textSize=<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DpUtils</span>.</span></span>dp2px(<span class="hljs-number">13</span>);    <span class="hljs-comment">// ...省略无关代码</span>    @Override    protected void on<span class="hljs-constructor">Measure(<span class="hljs-params">int</span> <span class="hljs-params">widthMeasureSpec</span>, <span class="hljs-params">int</span> <span class="hljs-params">heightMeasureSpec</span>)</span> &#123;        super.on<span class="hljs-constructor">Measure(<span class="hljs-params">widthMeasureSpec</span>, <span class="hljs-params">heightMeasureSpec</span>)</span>;        set<span class="hljs-constructor">MeasuredDimension(2 <span class="hljs-operator">*</span> <span class="hljs-params">radius</span>, 2 <span class="hljs-operator">*</span> <span class="hljs-params">radius</span>)</span>;    &#125;    @Override    protected void on<span class="hljs-constructor">Draw(Canvas <span class="hljs-params">canvas</span>)</span> &#123;        super.on<span class="hljs-constructor">Draw(<span class="hljs-params">canvas</span>)</span>;        mPaint.set<span class="hljs-constructor">Color(<span class="hljs-params">backgroundColor</span>)</span>;        canvas.draw<span class="hljs-constructor">Circle(<span class="hljs-params">getWidth</span>()</span><span class="hljs-operator"> / </span><span class="hljs-number">2</span>, get<span class="hljs-constructor">Height()</span><span class="hljs-operator"> / </span><span class="hljs-number">2</span>, radius, mPaint);        mPaint.set<span class="hljs-constructor">Color(<span class="hljs-params">textColor</span>)</span>;        mPaint.set<span class="hljs-constructor">TextSize(<span class="hljs-params">textSize</span>)</span>;        String text = currentPosition + <span class="hljs-number">1</span> + <span class="hljs-string">&quot;/&quot;</span> + pageSize;        <span class="hljs-built_in">int</span> textWidth = (<span class="hljs-built_in">int</span>) mPaint.measure<span class="hljs-constructor">Text(<span class="hljs-params">text</span>)</span>;        Paint.FontMetricsInt fontMetricsInt = mPaint.get<span class="hljs-constructor">FontMetricsInt()</span>;        <span class="hljs-built_in">int</span> baseline = (get<span class="hljs-constructor">MeasuredHeight()</span> - fontMetricsInt.bottom + fontMetricsInt.top)<span class="hljs-operator"> / </span><span class="hljs-number">2</span> - fontMetricsInt.top;        canvas.draw<span class="hljs-constructor">Text(<span class="hljs-params">text</span>, (<span class="hljs-params">getWidth</span>()</span> - textWidth)<span class="hljs-operator"> / </span><span class="hljs-number">2</span>, baseline, mPaint);    &#125;    public void set<span class="hljs-constructor">Radius(<span class="hljs-params">int</span> <span class="hljs-params">radius</span>)</span> &#123;        this.radius = radius;    &#125;    @Override    public void set<span class="hljs-constructor">BackgroundColor(@ColorInt <span class="hljs-params">int</span> <span class="hljs-params">backgroundColor</span>)</span> &#123;        this.backgroundColor = backgroundColor;    &#125;    public void set<span class="hljs-constructor">TextSize(<span class="hljs-params">int</span> <span class="hljs-params">textSize</span>)</span> &#123;        this.textSize = textSize;    &#125;    <span class="hljs-comment">// ...省略无关代码</span>&#125;</code></pre><p>有自定义View基础的同学应该能很轻松的看懂上边的代码。首先通过onMeasure()方法测量了View的大小，接下来就是在onDraw方法中绘制圆和文字了。很容易就实现了一个自定义的IndicatorView。当然，这个例子本身就比较简单。如果你需要绘制比较复杂且带有动画的Indicator，可以参考源码中的CircleIndicatorView和DashIndicatorView，或许它能给你一些灵感。</p><h3 id="3-设置自定义指示器"><a href="#3-设置自定义指示器" class="headerlink" title="(3)设置自定义指示器"></a>(3)设置自定义指示器</h3><p>接下来就将我们自己绘制的指示器设置到BannerViewPager中吧！</p><pre><code class="hljs reasonml">FigureIndicatorView indicatorView = <span class="hljs-keyword">new</span> <span class="hljs-constructor">FigureIndicatorView(<span class="hljs-params">mContext</span>)</span>;indicatorView.set<span class="hljs-constructor">Radius(BannerUtils.<span class="hljs-params">dp2px</span>(18)</span>);indicatorView.set<span class="hljs-constructor">TextSize(BannerUtils.<span class="hljs-params">dp2px</span>(13)</span>);indicatorView.set<span class="hljs-constructor">BackgroundColor(Color.<span class="hljs-params">parseColor</span>(<span class="hljs-string">&quot;#aa118EEA&quot;</span>)</span>);mViewPager.set<span class="hljs-constructor">IndicatorGravity(IndicatorGravity.END)</span>          .set<span class="hljs-constructor">IndicatorView(<span class="hljs-params">indicatorView</span>)</span>          .set<span class="hljs-constructor">HolderCreator(()</span> -&gt; <span class="hljs-keyword">new</span> <span class="hljs-constructor">ImageResourceViewHolder(0)</span>)          .create(mDrawableList);</code></pre><p>依然如此潇洒自然！好了，关于BannerViewPager的介绍今天就讲解到这里了。接下来的一篇文章将会对BannerViewPager的源码进行剖析，了解下它是如何通过简单的Api实现来实现复杂的功能的。</p><p>都看到这里了，确定不到GitHub点个星再走？源码已放到文章末尾。如果有好的Idea也欢迎Pull Request。</p><p><a href="https://juejin.im/post/5d74d3faf265da03b5747015">《BannerViewPager源码解析》</a></p><p><a href="https://github.com/zhpanvip/BannerViewPager">源码下载</a></p><p><strong>文章上次更新2019.11.16</strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>自定义View</tag>
      
      <tag>ViewPager2</tag>
      
      <tag>Banner</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>手撕黄油刀--探究ButterKnife的实现原理</title>
    <link href="/2019/08/26/18.%E6%89%8B%E6%92%95%E9%BB%84%E6%B2%B9%E5%88%80-%E6%8E%A2%E7%A9%B6ButterKnife%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/"/>
    <url>/2019/08/26/18.%E6%89%8B%E6%92%95%E9%BB%84%E6%B2%B9%E5%88%80-%E6%8E%A2%E7%A9%B6ButterKnife%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p>上篇文章《Java编译时注解处理器（APT）详解》中学习了Java APT技术在Android中的使用，并且我们知道，当前Android开发中常用的许多框架都使用了APT技术，并且ButterKnife就是利用APT来实现的。那么本篇内容我们就来探究一下ButterKnife的实现原理。</p><h1 id="一、ButterKnife的bind过程"><a href="#一、ButterKnife的bind过程" class="headerlink" title="一、ButterKnife的bind过程"></a>一、ButterKnife的bind过程</h1><p>当然，在探究源码，还是首先应该了解如何使用，我们以ButterKnife的BindView为例。首先在Activity的onCreate方法中通过ButterKnife.bind()方法绑定，然后为TextView添加BindView注解即可拿到TextView的实例。代码如下：</p><pre><code class="hljs scala"><span class="hljs-keyword">package</span> com.zhpan.app;public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MainActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AppCompatActivity</span> </span>&#123; <span class="hljs-meta">@BindView</span>(<span class="hljs-type">R</span>.id.text_view) <span class="hljs-type">TextView</span> mTextView;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">protected</span> void onCreate(<span class="hljs-type">Bundle</span> savedInstanceState) &#123;        <span class="hljs-keyword">super</span>.onCreate(savedInstanceState);        setContentView(<span class="hljs-type">R</span>.layout.activity_main);        <span class="hljs-type">ButterKnife</span>.bind(<span class="hljs-keyword">this</span>);    &#125;    &#125;</code></pre><p>ButterKnife是怎么做到通过注解获取TextView的实例的呢？我们就从bind方法开始吧，点击ButterKnife的bind方法，其代码如下：</p><pre><code class="hljs aspectj"><span class="hljs-comment">//ButterKnife中有很多bind的重载方法，仅以此为例</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-function">Unbinder <span class="hljs-title">bind</span><span class="hljs-params">(@NonNull Activity <span class="hljs-keyword">target</span>)</span> </span>&#123;    View sourceView = <span class="hljs-keyword">target</span>.getWindow().getDecorView();    <span class="hljs-function"><span class="hljs-keyword">return</span> <span class="hljs-title">createBinding</span><span class="hljs-params">(<span class="hljs-keyword">target</span>, sourceView)</span></span>;  &#125;</code></pre><p>可以看到在bind方法中通过Activity拿到了DecorView（至于不懂DecorView是什么的同学可以自行Google）。然后调用了createBinding方法，并传入Activity对象和DecorView两个参数。我们追踪createBinding的代码如下：</p><pre><code class="hljs typescript"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Unbinder createBinding(<span class="hljs-meta">@NonNull</span> <span class="hljs-built_in">Object</span> target, <span class="hljs-meta">@NonNull</span> View source) &#123;    Class&lt;?&gt; targetClass = target.getClass();    <span class="hljs-comment">//获取到了与target相关的类的构造方法</span>    Constructor&lt;? <span class="hljs-keyword">extends</span> Unbinder&gt; <span class="hljs-keyword">constructor</span> = findBindingConstructorForClass(<span class="hljs-params">targetClass</span>);    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">constructor</span> == null) &#123;      <span class="hljs-keyword">return</span> Unbinder.EMPTY;    &#125;    <span class="hljs-comment">//noinspection TryWithIdenticalCatches Resolves to API 19+ only type.</span>    <span class="hljs-keyword">try</span> &#123;    <span class="hljs-comment">//通过构造方法反射实例化了这个类，这个类接收两个参数，分别是上边的Activity和DecorView</span>      <span class="hljs-keyword">return</span> constructor.newInstance(target, source);    &#125; <span class="hljs-keyword">catch</span> (IllegalAccessException e) &#123;      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;Unable to invoke &quot;</span> + <span class="hljs-keyword">constructor</span>, e);    &#125; <span class="hljs-keyword">catch</span> (InstantiationException e) &#123;      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;Unable to invoke &quot;</span> + <span class="hljs-keyword">constructor</span>, e);    &#125; <span class="hljs-keyword">catch</span> (InvocationTargetException e) &#123;      Throwable cause = e.getCause();      <span class="hljs-keyword">if</span> (cause <span class="hljs-keyword">instanceof</span> RuntimeException) &#123;        <span class="hljs-keyword">throw</span> (RuntimeException) cause;      &#125;      <span class="hljs-keyword">if</span> (cause <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Error</span>) &#123;        <span class="hljs-keyword">throw</span> (<span class="hljs-built_in">Error</span>) cause;      &#125;      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;Unable to create binding instance.&quot;</span>, cause);    &#125;  &#125;</code></pre><p>上述代码中通过findBindingConstructorForClass()方法得到了某个类的构造方法，并在接下来的代码中通过反射 constructor.newInstance(target, source)实例化了这个类，我们点进findBindingConstructorForClass()方法看这里做了什么。</p><pre><code class="hljs reasonml"><span class="hljs-keyword">private</span> static Constructor&lt;? extends Unbinder&gt; find<span class="hljs-constructor">BindingConstructorForClass(Class&lt;?&gt; <span class="hljs-params">cls</span>)</span> &#123;<span class="hljs-comment">//从BINDINGS中获取cls对应的Unbinder</span>    Constructor&lt;? extends Unbinder&gt; bindingCtor = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">BINDINGS</span>.</span></span>get(cls);    <span class="hljs-keyword">if</span> (bindingCtor != null) &#123; 如果已存在直接return      <span class="hljs-keyword">if</span> (debug) <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Log</span>.</span></span>d(TAG, <span class="hljs-string">&quot;HIT: Cached in binding map.&quot;</span>);      return bindingCtor;    &#125;    <span class="hljs-comment">//这里拿到的clsName应该为“com.zhpan.app.MainActivity”</span>    String clsName = cls.get<span class="hljs-constructor">Name()</span>;    <span class="hljs-keyword">if</span> (clsName.starts<span class="hljs-constructor">With(<span class="hljs-string">&quot;android.&quot;</span>)</span><span class="hljs-operator"> || </span>clsName.starts<span class="hljs-constructor">With(<span class="hljs-string">&quot;java.&quot;</span>)</span>) &#123;      <span class="hljs-keyword">if</span> (debug) <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Log</span>.</span></span>d(TAG, <span class="hljs-string">&quot;MISS: Reached framework class. Abandoning search.&quot;</span>);      return null;    &#125;    <span class="hljs-keyword">try</span> &#123;    <span class="hljs-comment">//从类加载器中获取“com.zhpan.app.MainActivity_ViewBinding”</span>      Class&lt;?&gt; bindingClass = cls.get<span class="hljs-constructor">ClassLoader()</span>.load<span class="hljs-constructor">Class(<span class="hljs-params">clsName</span> + <span class="hljs-string">&quot;_ViewBinding&quot;</span>)</span>;      <span class="hljs-comment">// 获取“com.zhpan.app.MainActivity_ViewBinding”类中的构造方法</span>      bindingCtor = (Constructor&lt;? extends Unbinder&gt;) bindingClass.get<span class="hljs-constructor">Constructor(<span class="hljs-params">cls</span>, View.<span class="hljs-params">class</span>)</span>;    &#125; catch (ClassNotFoundException e) &#123;      <span class="hljs-keyword">if</span> (debug) <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Log</span>.</span></span>d(TAG, <span class="hljs-string">&quot;Not found. Trying superclass &quot;</span> + cls.get<span class="hljs-constructor">Superclass()</span>.get<span class="hljs-constructor">Name()</span>);      bindingCtor = find<span class="hljs-constructor">BindingConstructorForClass(<span class="hljs-params">cls</span>.<span class="hljs-params">getSuperclass</span>()</span>);    &#125; catch (NoSuchMethodException e) &#123;      throw <span class="hljs-keyword">new</span> <span class="hljs-constructor">RuntimeException(<span class="hljs-string">&quot;Unable to find binding constructor for &quot;</span> + <span class="hljs-params">clsName</span>, <span class="hljs-params">e</span>)</span>;    &#125;    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">BINDINGS</span>.</span></span>put(cls, bindingCtor);    return bindingCtor;  &#125;</code></pre><p>直接看第7行，通过 cls.getName()得到了bind方法中参数的名字，由于我们是再MainActivity中调用的bind方法，因此，这里拿到的名字就是“com.zhpan.app.MainActivity”,接下来再第13行中通过ClassLoader拿到了一个名字是”clsName”+”_ViewBinding”的类，也就是名字为MainActivity_ViewBinding的类。我们在项目里搜索一下，发现果真能找到这个类，其代码如下：</p><pre><code class="hljs aspectj"><span class="hljs-keyword">package</span> com.zhpan.app;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MainActivity_ViewBinding</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Unbinder</span> </span>&#123;  <span class="hljs-keyword">private</span> MainActivity <span class="hljs-keyword">target</span>;  <span class="hljs-meta">@UiThread</span>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MainActivity_ViewBinding</span><span class="hljs-params">(MainActivity <span class="hljs-keyword">target</span>)</span> </span>&#123;    <span class="hljs-keyword">this</span>(<span class="hljs-keyword">target</span>, <span class="hljs-keyword">target</span>.getWindow().getDecorView());  &#125;  <span class="hljs-meta">@UiThread</span>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MainActivity_ViewBinding</span><span class="hljs-params">(MainActivity <span class="hljs-keyword">target</span>, View source)</span> </span>&#123;    <span class="hljs-keyword">this</span>.<span class="hljs-keyword">target</span> = <span class="hljs-keyword">target</span>;    <span class="hljs-keyword">target</span>.mTextView = Utils.findRequiredViewAsType(source, R.id.text_view, <span class="hljs-string">&quot;field &#x27;mTextView&#x27;&quot;</span>, TextView.class);  &#125;  <span class="hljs-meta">@Override</span>  <span class="hljs-meta">@CallSuper</span>  <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">unbind</span><span class="hljs-params">()</span> </span>&#123;    MainActivity <span class="hljs-keyword">target</span> = <span class="hljs-keyword">this</span>.<span class="hljs-keyword">target</span>;    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">target</span> == <span class="hljs-keyword">null</span>) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalStateException(<span class="hljs-string">&quot;Bindings already cleare![在这里插入图片描述](https://img-blog.csdnimg.cn/20190825162306549.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIwNTIxNTcz,size_16,color_FFFFFF,t_70)d.&quot;</span>);    <span class="hljs-keyword">this</span>.<span class="hljs-keyword">target</span> = <span class="hljs-keyword">null</span>;    <span class="hljs-keyword">target</span>.mTextView = <span class="hljs-keyword">null</span>;  &#125;&#125;</code></pre><p>在这个类的构造方法中我们可以看到</p><pre><code class="hljs reasonml">target.mTextView = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Utils</span>.</span></span>find<span class="hljs-constructor">RequiredViewAsType(<span class="hljs-params">source</span>, R.<span class="hljs-params">id</span>.<span class="hljs-params">text_view</span>, <span class="hljs-string">&quot;field &#x27;mTextView&#x27;&quot;</span>, TextView.<span class="hljs-params">class</span>)</span>;</code></pre><p>通过这句代码给Activity中的mTextView赋了值，到这里也就不奇怪为什通过一个BindView的注解就得到了mTextView的对象了。而MainActivity_ViewBinding这个类是从哪里来的呢？想必看过上篇文章同学应该都知道了，就是通过APT在代码编译期间自动生成的。其实后面的代码其实已经没有必要去看了，无非就是通过AbstractProcessor来处理注解，然后根据注解自动生成所需代码的。但是写文章要有始有终，也本着负责任的态度，还是深入ButtereKnife内部一探究竟。</p><h1 id="二、探究ButterKnife的注解处理器ButterKnifeProcessor"><a href="#二、探究ButterKnife的注解处理器ButterKnifeProcessor" class="headerlink" title="二、探究ButterKnife的注解处理器ButterKnifeProcessor"></a>二、探究ButterKnife的注解处理器ButterKnifeProcessor</h1><p>现在我们来看一下ButterKnife的代码的模块结构：</p><p><img src="https://img-blog.csdnimg.cn/20190825162330432.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIwNTIxNTcz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>看到butterknife-annotations和butterknife-compiler很眼熟？和上篇文章我们自己写的代码结构是一样的，butterknife-annotations模块下存放的是butterknife的所有注解，butterknife-compiler是用来处理butterknife-annotations注解的。所以们直接看butterknife-compiler模块下的ButterKnifeProcessor类。</p><h2 id="1-ButterKnifeProcessor的getSupportedAnnotationTypes-方法"><a href="#1-ButterKnifeProcessor的getSupportedAnnotationTypes-方法" class="headerlink" title="1.ButterKnifeProcessor的getSupportedAnnotationTypes()方法"></a>1.ButterKnifeProcessor的getSupportedAnnotationTypes()方法</h2><p>我们知道ButterKnife除了BindView注解之外还有许多其它注解，比如常用的BindColor注解、OnClick注解等。这些注解的名字都会被添加到getSupportedAnnotationTypes方法中的Set集合里。来看getSupportedAnnotationTypes的源码：</p><pre><code class="hljs crystal">@Override public Set&lt;String&gt; getSupportedAnnotationTypes() &#123;    Set&lt;String&gt; types = new LinkedHashSet&lt;&gt;();    /<span class="hljs-regexp">/遍历ButterKnife中的所有注解，并将注解名字添加到Set集合</span><span class="hljs-regexp">    for (Class&lt;? extends Annotation&gt; annotation : getSupportedAnnotations()) &#123;</span><span class="hljs-regexp">      types.add(annotation.getCanonicalName());</span><span class="hljs-regexp">    &#125;</span><span class="hljs-regexp">    return types;</span><span class="hljs-regexp">  &#125;</span></code></pre><h2 id="2-ButterKnifeProcessor的process方法"><a href="#2-ButterKnifeProcessor的process方法" class="headerlink" title="2.ButterKnifeProcessor的process方法"></a>2.ButterKnifeProcessor的process方法</h2><p>我们知道process方法是整个注解处理其的核心方法，对注解的处理以及代码的生成都是在这个方法里边实现的。那么接下来，就一步步看ButterKnife是怎么处理注解和生成代码的。<br>**(1)解析RoundEnviroment**<br>在process方法的第一行我们看到通过findAndParseTargets方法得到了一个 Map&lt;TypeElement, BindingSet&gt;集合，代码如下：</p><pre><code class="hljs lasso"><span class="hljs-keyword">public</span> <span class="hljs-built_in">boolean</span> process(<span class="hljs-built_in">Set</span>&lt;? extends TypeElement&gt; elements, RoundEnvironment env) &#123;    <span class="hljs-comment">//通过findAndParseTargets处理注解得到BindingSet的集合</span>    <span class="hljs-built_in">Map</span>&lt;TypeElement, BindingSet&gt; bindingMap = findAndParseTargets(env);         <span class="hljs-params">...</span>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;  &#125;</code></pre><p>而在findAndParseTargets(env)是对一系列注解的处理，这里我们仅以处理BindView为例：</p><pre><code class="hljs reasonml"><span class="hljs-keyword">private</span> Map&lt;TypeElement, BindingSet&gt; find<span class="hljs-constructor">AndParseTargets(RoundEnvironment <span class="hljs-params">env</span>)</span> &#123;    Map&lt;TypeElement, BindingSet.Builder&gt; builderMap = <span class="hljs-keyword">new</span> LinkedHashMap&lt;&gt;<span class="hljs-literal">()</span>;    Set&lt;TypeElement&gt; erasedTargetNames = <span class="hljs-keyword">new</span> LinkedHashSet&lt;&gt;<span class="hljs-literal">()</span>;    <span class="hljs-keyword">for</span> (Element element : env.get<span class="hljs-constructor">ElementsAnnotatedWith(BindView.<span class="hljs-params">class</span>)</span>) &#123;      <span class="hljs-keyword">try</span> &#123;        parse<span class="hljs-constructor">BindView(<span class="hljs-params">element</span>, <span class="hljs-params">builderMap</span>, <span class="hljs-params">erasedTargetNames</span>)</span>;      &#125; catch (Exception e) &#123;        log<span class="hljs-constructor">ParsingError(<span class="hljs-params">element</span>, BindView.<span class="hljs-params">class</span>, <span class="hljs-params">e</span>)</span>;      &#125;    &#125;<span class="hljs-comment">//省略处理其它注解的代码</span>...</code></pre><p>第9行在parseBindView方法中对BindView注解进行了一系列的校验，通过校验后解析BindView的数据，比如view的Id等信息封装到了BindingSet.Builder中,并最终将封装好的BindingSet.Builder放入builderMap 中。由于parseBindView方法的代码比较多，这里就不再贴出了，有兴趣的可以直接下载源码查看。<br>接下来得到builderMap的集合之后，由于findAndParseTargets方法返回值是Map&lt;TypeElement, BindingSet&gt;，因此接下来又对builderMap集合进行了遍历并最终存储到了 Map&lt;TypeElement, BindingSet&gt;中。代码如下：</p><pre><code class="hljs reasonml"><span class="hljs-keyword">private</span> Map&lt;TypeElement, BindingSet&gt; find<span class="hljs-constructor">AndParseTargets(RoundEnvironment <span class="hljs-params">env</span>)</span> &#123;...Deque&lt;Map.Entry&lt;TypeElement, BindingSet.Builder&gt;&gt; entries =        <span class="hljs-keyword">new</span> ArrayDeque&lt;&gt;(builderMap.entry<span class="hljs-constructor">Set()</span>);    Map&lt;TypeElement, BindingSet&gt; bindingMap = <span class="hljs-keyword">new</span> LinkedHashMap&lt;&gt;<span class="hljs-literal">()</span>;    <span class="hljs-keyword">while</span> (!entries.is<span class="hljs-constructor">Empty()</span>) &#123;      Map.Entry&lt;TypeElement, BindingSet.Builder&gt; entry = entries.remove<span class="hljs-constructor">First()</span>;      TypeElement <span class="hljs-keyword">type</span> = entry.get<span class="hljs-constructor">Key()</span>;      BindingSet.Builder builder = entry.get<span class="hljs-constructor">Value()</span>;      TypeElement parentType = find<span class="hljs-constructor">ParentType(<span class="hljs-params">type</span>, <span class="hljs-params">erasedTargetNames</span>)</span>;      <span class="hljs-keyword">if</span> (parentType<span class="hljs-operator"> == </span>null) &#123;        bindingMap.put(<span class="hljs-keyword">type</span>, builder.build<span class="hljs-literal">()</span>);      &#125; <span class="hljs-keyword">else</span> &#123;        BindingSet parentBinding = bindingMap.get(parentType);        <span class="hljs-keyword">if</span> (parentBinding != null) &#123;          builder.set<span class="hljs-constructor">Parent(<span class="hljs-params">parentBinding</span>)</span>;          bindingMap.put(<span class="hljs-keyword">type</span>, builder.build<span class="hljs-literal">()</span>);        &#125; <span class="hljs-keyword">else</span> &#123;          <span class="hljs-comment">// Has a superclass binding but we haven&#x27;t built it yet. Re-enqueue for later.</span>          entries.add<span class="hljs-constructor">Last(<span class="hljs-params">entry</span>)</span>;        &#125;      &#125;    &#125;&#125;&#125;</code></pre><p>好了，接下来，继续到process方法中，在拿到bindingMap 之后遍历bindingMap ，并调用BindingSet的brewJava来生成Java文件，代码如下：</p><pre><code class="hljs reasonml">public boolean process(Set&lt;? extends TypeElement&gt; elements, RoundEnvironment env) &#123;    Map&lt;TypeElement, BindingSet&gt; bindingMap = find<span class="hljs-constructor">AndParseTargets(<span class="hljs-params">env</span>)</span>;    <span class="hljs-keyword">for</span> (Map.Entry&lt;TypeElement, BindingSet&gt; entry : bindingMap.entry<span class="hljs-constructor">Set()</span>) &#123;      TypeElement typeElement = entry.get<span class="hljs-constructor">Key()</span>;      BindingSet binding = entry.get<span class="hljs-constructor">Value()</span>;      JavaFile javaFile = binding.brew<span class="hljs-constructor">Java(<span class="hljs-params">sdk</span>, <span class="hljs-params">debuggable</span>, <span class="hljs-params">useAndroidX</span>)</span>;      <span class="hljs-keyword">try</span> &#123;        javaFile.write<span class="hljs-constructor">To(<span class="hljs-params">filer</span>)</span>;      &#125; catch (IOException e) &#123;        error(typeElement, <span class="hljs-string">&quot;Unable to write binding for type %s: %s&quot;</span>, typeElement, e.get<span class="hljs-constructor">Message()</span>);      &#125;    &#125;    return <span class="hljs-literal">false</span>;  &#125;</code></pre><h2 id="3-JavaPoet生成代码"><a href="#3-JavaPoet生成代码" class="headerlink" title="3.JavaPoet生成代码"></a>3.JavaPoet生成代码</h2><p>BindingSet 的brewJava方法中同样是使用了JavaPoet来生成代码的，无非就是拼接类，构造方法、方法，这些感觉真的没什么说的了。</p><pre><code class="hljs reasonml">JavaFile brew<span class="hljs-constructor">Java(<span class="hljs-params">int</span> <span class="hljs-params">sdk</span>, <span class="hljs-params">boolean</span> <span class="hljs-params">debuggable</span>, <span class="hljs-params">boolean</span> <span class="hljs-params">useAndroidX</span>)</span> &#123;    TypeSpec bindingConfiguration = create<span class="hljs-constructor">Type(<span class="hljs-params">sdk</span>, <span class="hljs-params">debuggable</span>, <span class="hljs-params">useAndroidX</span>)</span>;    return <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">JavaFile</span>.</span></span>builder(bindingClassName.package<span class="hljs-constructor">Name()</span>, bindingConfiguration)        .add<span class="hljs-constructor">FileComment(<span class="hljs-string">&quot;Generated code from Butter Knife. Do not modify!&quot;</span>)</span>        .build<span class="hljs-literal">()</span>;  &#125;</code></pre><pre><code class="hljs reasonml"><span class="hljs-keyword">private</span> TypeSpec create<span class="hljs-constructor">Type(<span class="hljs-params">int</span> <span class="hljs-params">sdk</span>, <span class="hljs-params">boolean</span> <span class="hljs-params">debuggable</span>, <span class="hljs-params">boolean</span> <span class="hljs-params">useAndroidX</span>)</span> &#123;    TypeSpec.Builder result = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">TypeSpec</span>.</span></span><span class="hljs-keyword">class</span><span class="hljs-constructor">Builder(<span class="hljs-params">bindingClassName</span>.<span class="hljs-params">simpleName</span>()</span>)        .add<span class="hljs-constructor">Modifiers(PUBLIC)</span>;    <span class="hljs-keyword">if</span> (isFinal) &#123;      result.add<span class="hljs-constructor">Modifiers(FINAL)</span>;    &#125;    <span class="hljs-keyword">if</span> (parentBinding != null) &#123;      result.superclass(parentBinding.bindingClassName);    &#125; <span class="hljs-keyword">else</span> &#123;      result.add<span class="hljs-constructor">Superinterface(UNBINDER)</span>;    &#125;    <span class="hljs-keyword">if</span> (has<span class="hljs-constructor">TargetField()</span>) &#123;      result.add<span class="hljs-constructor">Field(<span class="hljs-params">targetTypeName</span>, <span class="hljs-string">&quot;target&quot;</span>, PRIVATE)</span>;    &#125;    <span class="hljs-keyword">if</span> (isView) &#123;      result.add<span class="hljs-constructor">Method(<span class="hljs-params">createBindingConstructorForView</span>(<span class="hljs-params">useAndroidX</span>)</span>);    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (isActivity) &#123;      result.add<span class="hljs-constructor">Method(<span class="hljs-params">createBindingConstructorForActivity</span>(<span class="hljs-params">useAndroidX</span>)</span>);    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (isDialog) &#123;      result.add<span class="hljs-constructor">Method(<span class="hljs-params">createBindingConstructorForDialog</span>(<span class="hljs-params">useAndroidX</span>)</span>);    &#125;    <span class="hljs-keyword">if</span> (!constructor<span class="hljs-constructor">NeedsView()</span>) &#123;      <span class="hljs-comment">// Add a delegating constructor with a target type + view signature for reflective use.</span>      result.add<span class="hljs-constructor">Method(<span class="hljs-params">createBindingViewDelegateConstructor</span>(<span class="hljs-params">useAndroidX</span>)</span>);    &#125;    result.add<span class="hljs-constructor">Method(<span class="hljs-params">createBindingConstructor</span>(<span class="hljs-params">sdk</span>, <span class="hljs-params">debuggable</span>, <span class="hljs-params">useAndroidX</span>)</span>);    <span class="hljs-keyword">if</span> (has<span class="hljs-constructor">ViewBindings()</span><span class="hljs-operator"> || </span>parentBinding<span class="hljs-operator"> == </span>null) &#123;      result.add<span class="hljs-constructor">Method(<span class="hljs-params">createBindingUnbindMethod</span>(<span class="hljs-params">result</span>, <span class="hljs-params">useAndroidX</span>)</span>);    &#125;    return result.build<span class="hljs-literal">()</span>;  &#125;</code></pre><p>关于ButterKnife的源码就说这么多吧。总结一下，其实就是根据注解使用APT及JavaPoet在项目编译期间自动生成代码，并达到为注解元素赋值或者添加监听的目的。在阅读Butterknife时候不一定要把每一句代码都搞懂，能做到掌握其核心原理便可。</p>]]></content>
    
    
    
    <tags>
      
      <tag>源码分析</tag>
      
      <tag>APT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java编译时注解处理器</title>
    <link href="/2018/09/10/17.Java%E7%BC%96%E8%AF%91%E6%97%B6%E6%B3%A8%E8%A7%A3%E5%A4%84%E7%90%86%E5%99%A8/"/>
    <url>/2018/09/10/17.Java%E7%BC%96%E8%AF%91%E6%97%B6%E6%B3%A8%E8%A7%A3%E5%A4%84%E7%90%86%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<p><strong>本文同步发布在<a href="https://juejin.im/post/5d603d026fb9a06afa3291b9">掘金</a>,未经本人允许不得转载</strong></p><p>上篇文章我们使用注解+反射实现了一个仿ButterKnife功能的示例。考虑到反射是在运行时完成的，多少会影响程序性能。因此，ButterKnife本身并非基于注解+反射来实现的，而是用APT技术在编译时处理的。APT什么呢？接下来一起来看。</p><h2 id="一、APT简介"><a href="#一、APT简介" class="headerlink" title="一、APT简介"></a>一、APT简介</h2><p><strong>1.什么是APT？</strong><br>APT即为Annotation Processing Tool，它是javac的一个工具，中文意思为编译时注解处理器。APT可以用来在编译时扫描和处理注解。通过APT可以获取到注解和被注解对象的相关信息，在拿到这些信息后我们可以根据需求来自动的生成一些代码，省去了手动编写。注意，获取注解及生成代码都是在代码编译时候完成的，相比反射在运行时处理注解大大提高了程序性能。APT的核心是AbstractProcessor类，关于AbstractProcessor类后面会做详细说明。<br><strong>2.哪里用到了APT？</strong><br>APT技术被广泛的运用在Java框架中，包括Android项以及Java后台项目，除了上面我们提到的ButterKnife之外，像EventBus 、Dagger2以及阿里的ARouter路由框架等都运用到APT技术，因此要想了解以、探究这些第三方框架的实现原理，APT就是我们必须要掌握的。</p><p><strong>3.如何在Android Studio中构建一个APT项目?</strong><br>APT项目需要由至少两个Java Library模块组成，不知道什么是Java Library？没关系，手把手来叫你如何创建一个Java Library。<br><img src="https://raw.githubusercontent.com/zhpanvip/Resource/master/image/1601.jfif"></p><p>首先，新建一个Android项目，然后File–&gt;New–&gt;New Module,打开如上图所示的面板，选择Java Library即可。刚才说到一个APT项目至少应该由两个Java Library模块。那么这两个模块分别是什么作用呢？<br>1.首先需要一个Annotation模块，这个用来存放自定义的注解。<br>2. 另外需要一个Compiler模块，这个模块依赖Annotation模块。<br>3.项目的App模块和其它的业务模块都需要依赖Annotation模块，同时需要通过annotationProcessor依赖Compiler模块。<br>app模块的gradle中依赖关系如下：</p><pre><code class="hljs isbl"><span class="hljs-variable">implementation</span> <span class="hljs-function"><span class="hljs-title">project</span>(<span class="hljs-string">&#x27;:annotation&#x27;</span>)</span><span class="hljs-variable">annotationProcessor</span> <span class="hljs-function"><span class="hljs-title">project</span>(<span class="hljs-string">&#x27;:factory-compiler&#x27;</span>)</span></code></pre><p>APT项目的模块的结构图如下所示：<br><img src="https://raw.githubusercontent.com/zhpanvip/Resource/master/image/1602.jfif"></p><blockquote><p>为什么要强调上述两个模块一定要是Java Library？如果创建Android Library模块你会发现不能找到AbstractProcessor这个类，这是因为Android平台是基于OpenJDK的，而OpenJDK中不包含APT的相关代码。因此，在使用APT时，必须在Java Library中进行。</p></blockquote><h2 id="二、从一个例子开始认识APT"><a href="#二、从一个例子开始认识APT" class="headerlink" title="二、从一个例子开始认识APT"></a>二、从一个例子开始认识APT</h2><p>在学习Java基础的时候想必大家都写过简单工厂模式的例子，回想一下什么是简单工厂模式。接下来引入一个工厂模式的例子，首先定义一个形状的接口IShape，并为其添加 draw()方法：</p><pre><code class="hljs routeros">public<span class="hljs-built_in"> interface </span>IShape &#123;void draw();&#125;</code></pre><p>接下来定义几个形状实现IShape接口,并重写draw()方法：</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Rectangle</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">IShape</span> </span>&#123;<span class="hljs-meta">@Override</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span> </span>&#123;System.out.println(<span class="hljs-string">&quot;Draw a Rectangle&quot;</span>);&#125;&#125;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Triangle</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">IShape</span> </span>&#123;<span class="hljs-meta">@Override</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span> </span>&#123;System.out.println(<span class="hljs-string">&quot;Draw a Triangle&quot;</span>);&#125;&#125;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Circle</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">IShape</span> </span>&#123;      <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span> </span>&#123;           System.out.println(<span class="hljs-string">&quot;Draw a circle&quot;</span>);    &#125;&#125;</code></pre><p>接下来我们需要一个工厂类，这个类接收一个参数，根据我们传入的参数创建出对应的形状，代码如下：</p><pre><code class="hljs haxe"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ShapeFactory</span> </span>&#123;  <span class="hljs-keyword">public</span> Shape create(<span class="hljs-keyword">String</span> id) &#123;    <span class="hljs-keyword">if</span> (id == <span class="hljs-literal">null</span>) &#123;      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-type">IllegalArgumentException</span>(<span class="hljs-string">&quot;id is null!&quot;</span>);    &#125;    <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;Circle&quot;</span>.equals(id)) &#123;      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-type">Circle</span>();    &#125;    <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;Rectangle&quot;</span>.equals(id)) &#123;      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-type">Rectangle</span>();    &#125;    <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;Triangle&quot;</span>.equals(id)) &#123;      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-type">Triangle</span>();    &#125;    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-type">IllegalArgumentException</span>(<span class="hljs-string">&quot;Unknown id = &quot;</span> + id);  &#125;&#125;</code></pre><p>以上就是一个简单工厂模式的示例代码，想必大家都能够理解。</p><p>那么，现在问题来了，在项目开发过程中，我们随时可能会添加一个新的形状。此时就不得不修改工厂类来适配新添加的形状了。试想一下，每添加一个形状类都需要我们手动去更新Factory类，是不是影响了我们的开发效率？如果这个Factory类能够根据我们添加新的形状来同步更新Factory代码，岂不是就省了我们很多时间了吗？</p><p>应该怎么做才能满足上述需求呢？在第一节中已经提到了使用APT可以帮助我们自动生成代码。那么这个工厂类是不是可以使用APT技术来自动生成呢？我们唯一要做的事情就是新添加的形状类上加上一个注解，注解处理器就会在编译时根据注解信息自动生成ShapeFactory类的代码了，美哉，美哉！理想很丰满，但是，现实很骨感。虽然已经明确了要做什么，但是想要注解处理器帮我们生成代码，却还有很长的路要走。不过，不当紧，接下来我们将一步步实现注解处理器并让其自动生成Factory类。</p><h2 id="三、使用APT处理注解"><a href="#三、使用APT处理注解" class="headerlink" title="三、使用APT处理注解"></a>三、使用APT处理注解</h2><p><strong>1.定义Factory注解</strong><br>首先在annotation模块下添加一个Factory的注解，Factory注解的Target为ElementType，表示它可以注解类、接口或者枚举。Retention指定为RetentionPolicy.CLASS，表示该在字节码中有效。Factory注解添加两个成员，一个Class类型的type，用来表示注解的类的类型，相同的类型表示属于同一个工厂。令需一个String类型的id,用来表示注解的类的名称。Factory注解代码如下：</p><pre><code class="hljs less"><span class="hljs-variable">@Target</span>(ElementType.TYPE)<span class="hljs-variable">@Retention</span>(RetentionPolicy.CLASS)public <span class="hljs-variable">@interface</span> Factory &#123;    <span class="hljs-selector-tag">Class</span> <span class="hljs-selector-tag">type</span>();    <span class="hljs-selector-tag">String</span> <span class="hljs-selector-tag">id</span>();&#125;</code></pre><p>接下来我们用@Factory去注解形状类，如下：</p><pre><code class="hljs java"><span class="hljs-meta">@Factory(id = &quot;Rectangle&quot;, type = IShape.class)</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Rectangle</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">IShape</span> </span>&#123;<span class="hljs-meta">@Override</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span> </span>&#123;System.out.println(<span class="hljs-string">&quot;Draw a Rectangle&quot;</span>);&#125;&#125;... 其他形状类代码类似不再贴出</code></pre><p>**2.认识AbstractProcessor **</p><p>接下来，就到了我们本篇文章所要讲的核心了。没错，就是AbstractProcessor！我们先在factory-compiler模块下创建一个FactoryProcessor类继承AbstractProcessor ，并重写相应的方法，代码如下：</p><pre><code class="hljs java"><span class="hljs-meta">@AutoService(Processor.class)</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FactoryProcessor</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractProcessor</span> </span>&#123;  <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(ProcessingEnvironment processingEnvironment)</span> </span>&#123;        <span class="hljs-keyword">super</span>.init(processingEnvironment);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Set&lt;String&gt; <span class="hljs-title">getSupportedAnnotationTypes</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.getSupportedAnnotationTypes();    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">process</span><span class="hljs-params">(Set&lt;? extends TypeElement&gt; set, RoundEnvironment roundEnvironment)</span> </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> SourceVersion <span class="hljs-title">getSupportedSourceVersion</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.getSupportedSourceVersion();    &#125;&#125;</code></pre><p>可以看到，在这个类上添加了@AutoService注解，它的作用是用来生成META-INF/services/javax.annotation.processing.Processor文件的，也就是我们在使用注解处理器的时候需要手动添加META-INF/services/javax.annotation.processing.Processor，而有了@AutoService后它会自动帮我们生成。<a href="https://github.com/google/auto/tree/master/service">AutoService</a>是Google开发的一个库，使用时需要在factory-compiler中添加依赖，如下：</p><pre><code class="hljs apache"><span class="hljs-attribute">implementation</span> &#x27;com.google.auto.service:auto-service:<span class="hljs-number">1</span>.<span class="hljs-number">0</span>-rc<span class="hljs-number">4</span>&#x27;</code></pre><p>接下来我们将目光移到FactoryProcessor类内部，可以看到在这个类中重写了四个方法，我们由易到难依次来看：<br>**<em>(1) public SourceVersion getSupportedSourceVersion()**</em><br>这个方法非常简单，只有一个返回值，用来指定当前正在使用的Java版本，通常return SourceVersion.latestSupported()即可。</p><p> <strong><em>(2) public Set&lt;String&gt; getSupportedAnnotationTypes()</em></strong><br> 这个方法的返回值是一个Set集合，集合中指要处理的注解类型的名称(这里必须是完整的包名+类名，例如com.example.annotation.Factory)。由于在本例中只需要处理@Factory注解，因此Set集合中只需要添加@Factory的名称即可。</p><p> <strong><em>(3) public synchronized void init(ProcessingEnvironment processingEnvironment)</em></strong><br>这个方法用于初始化处理器，方法中有一个ProcessingEnvironment类型的参数，ProcessingEnvironment是一个注解处理工具的集合。它包含了众多工具类。例如：<br>Filer可以用来编写新文件；<br>Messager可以用来打印错误信息；<br>Elements是一个可以处理Element的工具类。</p><p><strong><em>在这里我们有必要认识一下什么是Element</em></strong><br>在Java语言中，Element是一个接口，表示一个程序元素，它可以指代包、类、方法或者一个变量。Element已知的子接口有如下几种：</p><blockquote><p>PackageElement  表示一个包程序元素。提供对有关包及其成员的信息的访问。<br>ExecutableElement  表示某个类或接口的方法、构造方法或初始化程序（静态或实例），包括注释类型元素。<br>TypeElement  表示一个类或接口程序元素。提供对有关类型及其成员的信息的访问。注意，枚举类型是一种类，而注解类型是一种接口。<br>VariableElement  表示一个字段、enum 常量、方法或构造方法参数、局部变量或异常参数。</p></blockquote><p>接下来，我希望大家先来理解一个新的概念，<strong>即抛弃我们现有对Java类的理解，把Java类看作是一个结构化的文件</strong>。什么意思？就是把Java类看作一个类似XML或者JSON一样的东西。有了这个概念之后我们就可以很容易的理解什么是Element了。带着这个概念来看下面的代码：</p><pre><code class="hljs arduino">package com.zhpan.mannotation.factory;  <span class="hljs-comment">//    PackageElement</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Circle</span> &#123;</span>  <span class="hljs-comment">//  TypeElement</span>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> i; <span class="hljs-comment">//   VariableElement</span>    <span class="hljs-keyword">private</span> Triangle triangle;  <span class="hljs-comment">//  VariableElement</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Circle</span><span class="hljs-params">()</span> </span>&#123;&#125; <span class="hljs-comment">//    ExecuteableElement</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">draw</span><span class="hljs-params">(   <span class="hljs-comment">//  ExecuteableElement</span></span></span><span class="hljs-function"><span class="hljs-params">                        <span class="hljs-keyword">String</span> s)</span>   <span class="hljs-comment">//  VariableElement</span></span><span class="hljs-function">    </span>&#123;        System.out.<span class="hljs-built_in">println</span>(s);    &#125;    @Override    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span> </span>&#123;    <span class="hljs-comment">//  ExecuteableElement</span>        System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;Draw a circle&quot;</span>);    &#125;&#125;</code></pre><p>现在明白了吗？不同类型Element其实就是映射了Java中不同的类元素！知晓这个概念后将对理解后边的代码有很大的帮助。</p><p> <strong><em>(4) public boolean process(Set&lt;? extends TypeElement&gt; set, RoundEnvironment roundEnvironment)</em></strong><br> 终于，到了FactoryProcessor类中最后一个也是最重要的一个方法了。先看这个方法的返回值，是一个boolean类型，返回值表示注解是否由当前Processor 处理。如果返回 true，则这些注解由此注解来处理，后续其它的 Processor 无需再处理它们；如果返回 false，则这些注解未在此Processor中处理并，那么后续 Processor 可以继续处理它们。<br> 在这个方法的方法体中，我们可以校验被注解的对象是否合法、可以编写处理注解的代码，以及自动生成需要的java文件等。因此说这个方法是AbstractProcessor 中的最重要的一个方法。我们要处理的大部分逻辑都是在这个方法中完成。</p><p>了解上述四个方法之后我们便可以初步的来编写FactoryProcessor类的代码了，如下：</p><pre><code class="hljs java"><span class="hljs-meta">@AutoService(Processor.class)</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FactoryProcessor</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractProcessor</span> </span>&#123;        <span class="hljs-keyword">private</span> Types mTypeUtils;    <span class="hljs-keyword">private</span> Messager mMessager;    <span class="hljs-keyword">private</span> Filer mFiler;    <span class="hljs-keyword">private</span> Elements mElementUtils;    <span class="hljs-keyword">private</span> Map&lt;String, FactoryGroupedClasses&gt; factoryClasses = <span class="hljs-keyword">new</span> LinkedHashMap&lt;&gt;();  <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(ProcessingEnvironment processingEnvironment)</span> </span>&#123;        <span class="hljs-keyword">super</span>.init(processingEnvironment); mTypeUtils = processingEnvironment.getTypeUtils();        mMessager = processingEnvironment.getMessager();        mFiler = processingEnvironment.getFiler();        mElementUtils = processingEnvironment.getElementUtils();    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Set&lt;String&gt; <span class="hljs-title">getSupportedAnnotationTypes</span><span class="hljs-params">()</span> </span>&#123;        Set&lt;String&gt; annotations = <span class="hljs-keyword">new</span> LinkedHashSet&lt;&gt;();        annotations.add(Factory.class.getCanonicalName());        <span class="hljs-keyword">return</span> annotations;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">process</span><span class="hljs-params">(Set&lt;? extends TypeElement&gt; set, RoundEnvironment roundEnvironment)</span> </span>&#123;   <span class="hljs-comment">//扫描所有被@Factory注解的元素</span>   <span class="hljs-keyword">for</span> (Element annotatedElement : roundEnv.getElementsAnnotatedWith(Factory.class)) &#123;&#125;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> SourceVersion <span class="hljs-title">getSupportedSourceVersion</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> SourceVersion.latestSupported();    &#125;&#125;</code></pre><p>上述FactoryProcessor 代码中在process方法中通过roundEnv.getElementsAnnotatedWith(Factory.class)方法已经拿到了被注解的元素的集合。正常情况下，这个集合中应该包含的是所有被Factory注解的Shape类的元素，也就是一个TypeElement。但在编写程序代码时可能有新来的同事不太了解@Factory的用途而误把@Factory用在接口或者抽象类上，这是不符合我们的标准的。因此，需要在process方法中判断被@Factory注解的元素是否是一个类，如果不是一个类元素，那么就抛出异常，终止编译。代码如下：</p><pre><code class="hljs php">@Override<span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> process(Set<span class="hljs-meta">&lt;?</span> <span class="hljs-keyword">extends</span> TypeElement&gt; annotations, RoundEnvironment roundEnv) &#123; <span class="hljs-comment">//  通过RoundEnvironment获取到所有被@Factory注解的对象</span>    <span class="hljs-keyword">for</span> (Element annotatedElement : roundEnv.getElementsAnnotatedWith(Factory.<span class="hljs-keyword">class</span>)) &#123;<span class="hljs-keyword">if</span> (annotatedElement.getKind() != ElementKind.<span class="hljs-keyword">CLASS</span>) &#123; <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> ProcessingException(annotatedElement, <span class="hljs-string">&quot;Only classes can be annotated with @%s&quot;</span>,                    Factory.<span class="hljs-keyword">class</span>.getSimpleName());         &#125;         TypeElement typeElement = (TypeElement) annotatedElement;         FactoryAnnotatedClass annotatedClass = <span class="hljs-keyword">new</span> FactoryAnnotatedClass(typeElement);...        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;&#125;</code></pre><p>基于面向对象的思想，我们可以将annotatedElement中包含的信息封装成一个对象，方便后续使用，因此，另外可以另外声明一个FactoryAnnotatedClass来解析并存放annotatedElement的相关信息。FactoryAnnotatedClass代码如下：</p><pre><code class="hljs arduino"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FactoryAnnotatedClass</span> &#123;</span>    <span class="hljs-keyword">private</span> TypeElement mAnnotatedClassElement;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> mQualifiedSuperClassName;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> mSimpleTypeName;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> mId;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">FactoryAnnotatedClass</span><span class="hljs-params">(TypeElement classElement)</span> </span>&#123;        <span class="hljs-keyword">this</span>.mAnnotatedClassElement = classElement;        Factory annotation = classElement.getAnnotation(Factory.class);        mId = annotation.id();        <span class="hljs-keyword">if</span> (mId.length() == <span class="hljs-number">0</span>) &#123;            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(                    <span class="hljs-keyword">String</span>.format(<span class="hljs-string">&quot;id() in @%s for class %s is null or empty! that&#x27;s not allowed&quot;</span>,                            Factory.class.getSimpleName(), classElement.getQualifiedName().toString()));        &#125;                <span class="hljs-comment">// Get the full QualifiedTypeName</span>        <span class="hljs-keyword">try</span> &#123;  <span class="hljs-comment">// 该类已经被编译</span>            Class&lt;?&gt; clazz = annotation.type();            mQualifiedSuperClassName = clazz.getCanonicalName();            mSimpleTypeName = clazz.getSimpleName();        &#125; <span class="hljs-keyword">catch</span> (MirroredTypeException mte) &#123;<span class="hljs-comment">// 该类未被编译</span>            DeclaredType classTypeMirror = (DeclaredType) mte.getTypeMirror();            TypeElement classTypeElement = (TypeElement) classTypeMirror.asElement();            mQualifiedSuperClassName = classTypeElement.getQualifiedName().toString();            mSimpleTypeName = classTypeElement.getSimpleName().toString();        &#125;    &#125;    <span class="hljs-comment">// ...省去getter</span>&#125;</code></pre><p>为了生成合乎要求的ShapeFactory类，在生成ShapeFactory代码前需要对被Factory注解的元素进行一系列的校验，只有通过校验，符合要求了才可以生成ShapeFactory代码。根据需求，我们列出如下规则：</p><blockquote><p>1.只有类才能被@Factory注解。因为在ShapeFactory中我们需要实例化Shape对象，虽然@Factory注解声明了Target为ElementType.TYPE，但接口和枚举并不符合我们的要求。<br>2.被@Factory注解的类中需要有public的构造方法，这样才能实例化对象。<br>3.被注解的类必须是type指定的类的子类<br>4.id需要为String类型，并且需要在相同type组中唯一<br>5.具有相同type的注解类会被生成在同一个工厂类中</p></blockquote><p>根据上面的规则，我们来一步步完成校验，如下代码：</p><pre><code class="hljs gradle"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> checkValidClass(FactoryAnnotatedClass item) <span class="hljs-keyword">throws</span> ProcessingException &#123;        TypeElement classElement = item.getTypeElement();        <span class="hljs-keyword">if</span> (!classElement.getModifiers().contains(Modifier.<span class="hljs-keyword">PUBLIC</span>)) &#123;            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> ProcessingException(classElement, <span class="hljs-string">&quot;The class %s is not public.&quot;</span>,                    classElement.getQualifiedName().toString());        &#125;        <span class="hljs-comment">// 如果是抽象方法则抛出异常终止编译</span>        <span class="hljs-keyword">if</span> (classElement.getModifiers().contains(Modifier.<span class="hljs-keyword">ABSTRACT</span>)) &#123;            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> ProcessingException(classElement,                    <span class="hljs-string">&quot;The class %s is abstract. You can&#x27;t annotate abstract classes with @%&quot;</span>,                    classElement.getQualifiedName().toString(), Factory.<span class="hljs-keyword">class</span>.getSimpleName());        &#125;        <span class="hljs-comment">// 这个类必须是在@Factory.type()中指定的类的子类，否则抛出异常终止编译</span>        TypeElement superClassElement = mElementUtils.getTypeElement(item.getQualifiedFactoryGroupName());        <span class="hljs-keyword">if</span> (superClassElement.getKind() == ElementKind.<span class="hljs-keyword">INTERFACE</span>) &#123;            <span class="hljs-comment">// 检查被注解类是否实现或继承了@Factory.type()所指定的类型，此处均为IShape</span>            <span class="hljs-keyword">if</span> (!classElement.getInterfaces().contains(superClassElement.asType())) &#123;                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> ProcessingException(classElement,                        <span class="hljs-string">&quot;The class %s annotated with @%s must implement the interface %s&quot;</span>,                        classElement.getQualifiedName().toString(), Factory.<span class="hljs-keyword">class</span>.getSimpleName(),                        item.getQualifiedFactoryGroupName());            &#125;        &#125; <span class="hljs-keyword">else</span> &#123;            TypeElement currentClass = classElement;            <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;                TypeMirror superClassType = currentClass.getSuperclass();                <span class="hljs-keyword">if</span> (superClassType.getKind() == TypeKind.NONE) &#123;                    <span class="hljs-comment">// 向上遍历父类，直到Object也没获取到所需父类，终止编译抛出异常</span>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> ProcessingException(classElement,                            <span class="hljs-string">&quot;The class %s annotated with @%s must inherit from %s&quot;</span>,                            classElement.getQualifiedName().toString(), Factory.<span class="hljs-keyword">class</span>.getSimpleName(),                            item.getQualifiedFactoryGroupName());                &#125;                <span class="hljs-keyword">if</span> (superClassType.toString().equals(item.getQualifiedFactoryGroupName())) &#123;                    <span class="hljs-comment">// 校验通过，终止遍历</span>                    <span class="hljs-keyword">break</span>;                &#125;                currentClass = (TypeElement) mTypeUtils.asElement(superClassType);            &#125;        &#125;        <span class="hljs-comment">// 检查是否由public的无参构造方法</span>        <span class="hljs-keyword">for</span> (Element enclosed : classElement.getEnclosedElements()) &#123;            <span class="hljs-keyword">if</span> (enclosed.getKind() == ElementKind.CONSTRUCTOR) &#123;                ExecutableElement constructorElement = (ExecutableElement) enclosed;                <span class="hljs-keyword">if</span> (constructorElement.getParameters().<span class="hljs-keyword">size</span>() == <span class="hljs-number">0</span> &amp;&amp;                        constructorElement.getModifiers().contains(Modifier.<span class="hljs-keyword">PUBLIC</span>)) &#123;                    <span class="hljs-comment">// 存在public的无参构造方法，检查结束</span>                    <span class="hljs-keyword">return</span>;                &#125;            &#125;        &#125;        <span class="hljs-comment">// 为检测到public的无参构造方法，抛出异常，终止编译</span>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> ProcessingException(classElement,                <span class="hljs-string">&quot;The class %s must provide an public empty default constructor&quot;</span>,                classElement.getQualifiedName().toString());    &#125;</code></pre><p>如果通过上述校验，那么说明被@Factory注解的类是符合我们的要求的，接下来就可以处理注解信息来生成所需代码了。但是本着面向对象的思想，我们还需声明FactoryGroupedClasses来存放FactoryAnnotatedClass，并且在这个类中完成了ShapeFactory类的代码生成。FactoryGroupedClasses 代码如下：</p><pre><code class="hljs arduino"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FactoryGroupedClasses</span> &#123;</span>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">String</span> SUFFIX = <span class="hljs-string">&quot;Factory&quot;</span>;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> qualifiedClassName;    <span class="hljs-keyword">private</span> Map&lt;<span class="hljs-keyword">String</span>, FactoryAnnotatedClass&gt; itemsMap = <span class="hljs-keyword">new</span> LinkedHashMap&lt;&gt;();    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">FactoryGroupedClasses</span><span class="hljs-params">(<span class="hljs-keyword">String</span> qualifiedClassName)</span> </span>&#123;        <span class="hljs-keyword">this</span>.qualifiedClassName = qualifiedClassName;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(FactoryAnnotatedClass toInsert)</span> </span>&#123;        FactoryAnnotatedClass factoryAnnotatedClass = itemsMap.<span class="hljs-built_in">get</span>(toInsert.getId());        <span class="hljs-keyword">if</span> (factoryAnnotatedClass != null) &#123;            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IdAlreadyUsedException(factoryAnnotatedClass);        &#125;        itemsMap.<span class="hljs-built_in">put</span>(toInsert.getId(), toInsert);    &#125;  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">generateCode</span><span class="hljs-params">(Elements elementUtils, Filer filer)</span> throws IOException </span>&#123;        <span class="hljs-comment">//  Generate java file</span>        ...    &#125;&#125;</code></pre><p>接下来将所有的FactoryGroupedClasses都添加到集合中去</p><pre><code class="hljs haxe">  <span class="hljs-keyword">private</span> Map&lt;<span class="hljs-keyword">String</span>, FactoryGroupedClasses&gt; factoryClasses = <span class="hljs-keyword">new</span> <span class="hljs-type">LinkedHashMap</span>&lt;&gt;();<span class="hljs-comment">// ...</span>FactoryGroupedClasses factoryClass = factoryClasses.<span class="hljs-keyword">get</span>(annotatedClass.getQualifiedFactoryGroupName());   <span class="hljs-keyword">if</span> (factoryClass == <span class="hljs-literal">null</span>) &#123;           <span class="hljs-keyword">String</span> qualifiedGroupName = annotatedClass.getQualifiedFactoryGroupName();           factoryClass = <span class="hljs-keyword">new</span> <span class="hljs-type">FactoryGroupedClasses</span>(qualifiedGroupName);           factoryClasses.put(qualifiedGroupName, factoryClass);     &#125;factoryClass.add(annotatedClass);<span class="hljs-comment">// ...</span></code></pre><p>OK!到目前为止，所有的准备工作都已经完成了。接下来就是根据注解信息来生成ShapeFactory类了，有没有很兴奋？遍历factoryClasses集合,并调用FactoryGroupedClasses类的generateCode()方法来生成代码了：</p><pre><code class="hljs less"><span class="hljs-selector-tag">for</span> (FactoryGroupedClasses <span class="hljs-attribute">factoryClass </span>: factoryClasses.values()) &#123;          <span class="hljs-selector-tag">factoryClass</span><span class="hljs-selector-class">.generateCode</span>(mElementUtils, mFiler);     &#125;</code></pre><p>可是，当我们去掉用generateCode(mElementUtils, mFiler)方法的时候…..纳尼？还是一个空方法，我们还没由实现呢！笑哭?…</p><h2 id="四、认识JavaPoet并用其生成ShapeFactory类"><a href="#四、认识JavaPoet并用其生成ShapeFactory类" class="headerlink" title="四、认识JavaPoet并用其生成ShapeFactory类"></a>四、认识JavaPoet并用其生成ShapeFactory类</h2><p>到此为止，我们唯一剩余的需求就是生成ShapeFactory类了。上一节中我们在FactoryProcessor类的init(ProcessingEnvironment processingEnvironment)方法中通过processingEnvironment拿到了Filer，并且我们也提到通过Filer可以用来编写文件，即可以通过Filer来生成我们所需要的ShapeFactory类。但是，直接使用Filer需要我们手动拼接类的代码，很可能一不小心写错了一个字母就致使所生成的类是无效的。因此，我们需要来认识一下<a href="https://github.com/square/javapoet">JavaPoet</a>这个库。 JavaPoet是square公司的一个开源框架<a href="https://github.com/square/javapoet">JavaPoet</a>，由Jake Wharton大神所编写。JavaPoet可以用对象的方式来帮助我们生成类代码，也就是我们能只要把要生成的类文件包装成一个对象，JavaPoet便可以自动帮我们生成类文件了。关于这个库的使用就不详细在这里讲解了，有需要了解的可以到github查看，使用起来很简单。</p><p>好了，步入正题，使用JavaPoet构建并自动生成ShapeFactory类的代码如下：</p><pre><code class="hljs reasonml">public void generate<span class="hljs-constructor">Code(Elements <span class="hljs-params">elementUtils</span>, Filer <span class="hljs-params">filer</span>)</span> throws IOException &#123;        TypeElement superClassName = elementUtils.get<span class="hljs-constructor">TypeElement(<span class="hljs-params">qualifiedClassName</span>)</span>;        String factoryClassName = superClassName.get<span class="hljs-constructor">SimpleName()</span> + SUFFIX;        String qualifiedFactoryClassName = qualifiedClassName + SUFFIX;        PackageElement pkg = elementUtils.get<span class="hljs-constructor">PackageOf(<span class="hljs-params">superClassName</span>)</span>;        String packageName = pkg.is<span class="hljs-constructor">Unnamed()</span> ? null : pkg.get<span class="hljs-constructor">QualifiedName()</span>.<span class="hljs-keyword">to</span><span class="hljs-constructor">String()</span>;        MethodSpec.Builder <span class="hljs-keyword">method</span> = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">MethodSpec</span>.</span></span><span class="hljs-keyword">method</span><span class="hljs-constructor">Builder(<span class="hljs-string">&quot;create&quot;</span>)</span>                .add<span class="hljs-constructor">Modifiers(Modifier.PUBLIC)</span>                .add<span class="hljs-constructor">Parameter(String.<span class="hljs-params">class</span>, <span class="hljs-string">&quot;id&quot;</span>)</span>                .returns(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">TypeName</span>.</span></span>get(superClassName.<span class="hljs-keyword">as</span><span class="hljs-constructor">Type()</span>));        <span class="hljs-keyword">method</span>.<span class="hljs-keyword">begin</span><span class="hljs-constructor">ControlFlow(<span class="hljs-string">&quot;if (id == null)&quot;</span>)</span>                .add<span class="hljs-constructor">Statement(<span class="hljs-string">&quot;throw new IllegalArgumentException($S)&quot;</span>, <span class="hljs-string">&quot;id is null!&quot;</span>)</span>                .<span class="hljs-keyword">end</span><span class="hljs-constructor">ControlFlow()</span>;        <span class="hljs-keyword">for</span> (FactoryAnnotatedClass item : itemsMap.values<span class="hljs-literal">()</span>) &#123;            <span class="hljs-keyword">method</span>.<span class="hljs-keyword">begin</span><span class="hljs-constructor">ControlFlow(<span class="hljs-string">&quot;if ($S.equals(id))&quot;</span>, <span class="hljs-params">item</span>.<span class="hljs-params">getId</span>()</span>)                    .add<span class="hljs-constructor">Statement(<span class="hljs-string">&quot;return new $L()&quot;</span>, <span class="hljs-params">item</span>.<span class="hljs-params">getTypeElement</span>()</span>.get<span class="hljs-constructor">QualifiedName()</span>.<span class="hljs-keyword">to</span><span class="hljs-constructor">String()</span>)                    .<span class="hljs-keyword">end</span><span class="hljs-constructor">ControlFlow()</span>;        &#125;        <span class="hljs-keyword">method</span>.add<span class="hljs-constructor">Statement(<span class="hljs-string">&quot;throw new IllegalArgumentException($S + id)&quot;</span>, <span class="hljs-string">&quot;Unknown id = &quot;</span>)</span>;        TypeSpec typeSpec = TypeSpec                .<span class="hljs-keyword">class</span><span class="hljs-constructor">Builder(<span class="hljs-params">factoryClassName</span>)</span>                .add<span class="hljs-constructor">Modifiers(Modifier.PUBLIC)</span>                .add<span class="hljs-constructor">Method(<span class="hljs-params">method</span>.<span class="hljs-params">build</span>()</span>)                .build<span class="hljs-literal">()</span>;        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">JavaFile</span>.</span></span>builder(packageName, typeSpec).build<span class="hljs-literal">()</span>.write<span class="hljs-constructor">To(<span class="hljs-params">filer</span>)</span>;    &#125;</code></pre><p>好了，现在项目已经可以帮我们自动来生成需要的Java文件啦。接下来验证一下，Build一下项目，切换到project模式下，在app–&gt;build–&gt;generated–&gt;source–&gt;apt–&gt;debug–&gt;(package)–&gt;factory下面就可以看到ShapeFactory类，如下图：<br><img src="https://raw.githubusercontent.com/zhpanvip/Resource/master/image/1603.jfif"></p><p>这个类并非是我们自己编写的，而是通过使用APT的一系列骚操作自动生成的。现在可以再添加一个形状类实现IShape并附加@Factory注解，再次编译后都自动会生成到ShapeFactory中！</p><p>到此为止，本篇文章就告一段落了。相信看完本篇文章一定大有所获，因为掌握了APT技术之后，再去研究使用APT的第三方框架源码，一定会游刃有余，事半功倍。</p><p>由于本篇文章结构比较复杂且代码也较多，项目的源码已经放在文章末尾，可作参考。</p><p><a href="https://github.com/zhpanvip/MAnnotation">源码下载</a></p><p><strong>参考资料</strong></p><p><a href="https://www.race604.com/annotation-processing/">Java注解处理器</a></p><p><a href="http://www.cjsdn.net/Doc/JDK60/javax/annotation/processing/AbstractProcessor.html">JDK文档AbstractProcessor</a></p><h3 id="好库推荐"><a href="#好库推荐" class="headerlink" title="好库推荐"></a>好库推荐</h3><p>给大家推荐一下<a href="https://github.com/zhpanvip/BannerViewPager">BannerViewPager</a>。这是一个基于ViewPager实现的具有强大功能的无限轮播库。通过<a href="https://github.com/zhpanvip/BannerViewPager">BannerViewPager</a>可以实现腾讯视频、QQ音乐、酷狗音乐、支付宝、天猫、淘宝、优酷视频、喜马拉雅、网易云音乐、哔哩哔哩等APP的Banner样式以及指示器样式。</p><p>欢迎大家到github关注<a href="https://github.com/zhpanvip/BannerViewPager">BannerViewPager</a>！</p>]]></content>
    
    
    
    <tags>
      
      <tag>Annotation</tag>
      
      <tag>APT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java自定义注解在Android中的实例应用</title>
    <link href="/2018/08/25/16.Java%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3%E5%9C%A8Android%E4%B8%AD%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%BA%94%E7%94%A8/"/>
    <url>/2018/08/25/16.Java%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3%E5%9C%A8Android%E4%B8%AD%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%BA%94%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>Java注解在我们项目开发 中是非常常见的。比如经常用到的几种java内置的注解：</p><blockquote><p> @Override，表示当前的方法定义将覆盖超类中的方法。<br>    @Deprecated，表示当前方法即将废弃，不推荐使用。<br>    @SuppressWarnings，表示忽略编译器的警告信息。</p></blockquote><p>对于上面几个注解想必大家都不会陌生。除此之外，我们还经常在一些第三方框架中看到一些自定义注解。比如大名鼎鼎的ButterKnife和EventBus都是基于注解实现的。网上关于注解的文章数不胜数，但是，很多章都是贴下注解的定义，然后解释下几种元注解，扔出一个自定义注解的例子就不了了之了。刚接触注解的时候，看了半天注解相关的文章也没弄懂注解到底有什么用。其实注解往往是需要结合反射来用的，离了反射，注解也就失去了灵魂。因此，本篇文章我们会先来学习一些注解相关的一些基础知识，然后结合反射来实现一个与ButterKnife一样功能的实例。当然ButterKnife的实现并非是用反射而是使用注解处理器（AnnotationProcessor）来实现的，但是，本篇文章重点是自定义注解，因此，我们就用注解结合反射来模仿ButterKnife的效果。</p><h2 id="一、注解基础知识简介"><a href="#一、注解基础知识简介" class="headerlink" title="一、注解基础知识简介"></a>一、注解基础知识简介</h2><p><strong>1.注解(Annotation)的声明</strong></p><p>同类(class)与接口(interface)一样，注解( @interface)也是一种定义类型，它是在JDK 5.0中引入的。我们可以通过@interface来声明一个注解：</p><pre><code class="hljs angelscript"><span class="hljs-keyword">public</span> @<span class="hljs-keyword">interface</span> <span class="hljs-symbol">MAnnotation</span> &#123;&#125;</code></pre><p><strong>2.注解的成员变量</strong><br>注解与类一样，都存在成员变量。与类的区别是注解中没有方法。因此，来看下如何在注解中声明成员变量。</p><pre><code class="hljs angelscript"><span class="hljs-keyword">public</span> @<span class="hljs-keyword">interface</span> <span class="hljs-symbol">MAnnotation</span> &#123;    <span class="hljs-built_in">string</span> name();    <span class="hljs-built_in">int</span> age();&#125;</code></pre><p>上述示例中我们在MAnnotation中声明了一个String类型的name和一个int类型的age的成员变量。除此之外，我们还可以为成员变量制定默认值：</p><pre><code class="hljs routeros">public @interface MAnnotation &#123;    string name()<span class="hljs-built_in"> default </span><span class="hljs-string">&quot;Jack&quot;</span>;    int age()<span class="hljs-built_in"> default </span>18;&#125;</code></pre><p>如果注解的成员变量被赋予了默认值，那么使用注解时可以不为成员变量赋值，而是用直接使用默认值。<br><strong>3.注解的分类</strong><br>根据注解是否包含成员变量，可以把Annotation分为如下两类：<br>*<strong>(1)标记注解***       标记注解指的时没有包含成员变量的注解，例如java内置的注解@Override注解。<br>*</strong>(2)元数据注解***   元数据注解指的是包含成员变量的注解，这类注解可以接受更多的元数据。例如，ButteerKnife的@BindView注解</p><p><strong>4.元注解</strong><br>元注解可以理解为注解的注解。用来提供对给其他的注解类型类型做说明。JDK中提供了如下4个元注解：</p><blockquote><p>@Target<br>@Retention<br>@Documented<br>@Inherited</p></blockquote><p>针对以上四种注解，我们来分别解析</p><p><strong><em>(1)@Target注解</em></strong><br>指定Annotation用于修饰哪些程序元素。@Target也包含一个名为”value“的成员变量，该value成员变量类型为ElementType[ ]，ElementType为枚举类型，值有如下几个：</p><blockquote><p>ElementType.TYPE：能修饰类、接口或枚举类型<br>ElementType.FIELD：能修饰成员变量<br>ElementType.METHOD：能修饰方法<br>ElementType.PARAMETER：能修饰参数<br>ElementType.CONSTRUCTOR：能修饰构造器<br>ElementType.LOCAL_VARIABLE：能修饰局部变量<br>ElementType.ANNOTATION_TYPE：能修饰注解<br>ElementType.PACKAGE：能修饰包</p></blockquote><p>举个栗子，用FIELD和METHOD来作为Target的value，那么MAnnotation 就只能用来修饰类的成员变量和方法</p><pre><code class="hljs java"><span class="hljs-meta">@Target(ElementType.FIELD,, ElementType.METHOD)</span><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> MAnnotation &#123;    <span class="hljs-function">string <span class="hljs-title">name</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> &quot;Jack&quot;</span>;    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">age</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> 18</span>;&#125;</code></pre><p><strong>(2)@Retention</strong><br>这个注解定义了该注解可以保留多长时间。某些注解仅出现在源代码中，而被编译器丢弃；而另一些却被编译在class文件中；编译在class文件中的Annotation可能会被虚拟机忽略，而另一些在class被装载时将被读取（请注意并不影响class的执行，因为Annotation与class在使用上是被分离的）。使用这个meta-Annotation可以对 Annotation的“生命周期”限制。<br>@Retention同样包含一个名为“value”的成员变量，该value成员变量是RetentionPolicy枚举类型。使用@Retention时，必须为其value指定值。value成员变量的值只能是如下3个：</p><blockquote><p>RetentionPolicy.SOURCE：Annotation只保留在源代码中，编译器编译时，直接丢弃这种Annotation。<br>RetentionPolicy.CLASS：编译器把Annotation记录在class文件中。当运行Java程序时，JVM中不再保留该Annotation。<br>RetentionPolicy.RUNTIME：编译器把Annotation记录在class文件中。当运行Java程序时，JVM会保留该Annotation，程序可以通过反射获取该Annotation的信息。</p></blockquote><p>@Retention举个栗子：</p><pre><code class="hljs java"><span class="hljs-meta">@Target(RetentionPolicy.RUNTIME)</span><span class="hljs-meta">@Target(ElementType.FIELD)</span><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> MAnnotation &#123;    <span class="hljs-function">string <span class="hljs-title">name</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> &quot;Jack&quot;</span>;    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">age</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> 18</span>;&#125;</code></pre><p><strong>(3)@Documented</strong><br>@Documented是一个标记注解，如果定义注解MAnnotation ，使用了@Documented修饰定义，则在用javadoc命令生成API文档后，所有使用注解MAnnotation 修饰的程序元素，将会包含注解MAnnotation 的说明。举了这么久的栗子，也挺累，这个就不举了吧。。。<br>**(4)@Inherited**<br>@Inherited是一个标记注解，指定注解具有继承性。要注意的是它并不是说注解本身可以继承，而是说如果一个父类被 @Inherited 注解过的注解进行注解的话，那么如果它的子类没有被任何注解应用的话，那么这个子类就继承了父类的注解。这次我们还是需要举个栗子的：</p><pre><code class="hljs scala"><span class="hljs-type">Inherited</span><span class="hljs-meta">@Retention</span>(<span class="hljs-type">RetentionPolicy</span>.<span class="hljs-type">RUNTIME</span>)<span class="hljs-meta">@interface</span> <span class="hljs-type">MAnnotation</span> &#123;&#125;<span class="hljs-meta">@MAnnotation</span> public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ClassA</span></span>&#123;&#125;public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ClassB</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ClassA</span> </span>&#123;&#125;</code></pre><p>注解 @MAnnotation 被 @Inherited 修饰，ClassA 被 MAnnotation 注解，ClassB 继承 ClassA，那么此时ClassB也拥有@MAnnotation 注解。</p><h2 id="二、使用注解与反射实现ButterKnife的功能"><a href="#二、使用注解与反射实现ButterKnife的功能" class="headerlink" title="二、使用注解与反射实现ButterKnife的功能"></a>二、使用注解与反射实现ButterKnife的功能</h2><p>说了这么久，关于注解的相关基础知识终于讲完了。但是，即使看到这里不知道小伙伴是否仍然会迷茫，注解到底有什么用？在文章开头我们就提到离开反射的注解是没有灵魂的，因此，正是因为反射才赋予了注解实质的用途。那么接下来，我们用注解和反射来模仿并实现ButterKnife的功能吧。<br>首先，来分析一下要实现的功能。</p><blockquote><p>使用注解注入布局文件省去setContentView<br>使用注解省去findViewById<br>使用注解省去setOnClickListener</p></blockquote><p><strong>1.根据上述需求，我们可以定义三个注解。</strong>如下:</p><pre><code class="hljs less"><span class="hljs-comment">//给Activity注入布局文件的注解</span><span class="hljs-variable">@Target</span>(ElementType.TYPE)<span class="hljs-variable">@Retention</span>(RetentionPolicy.RUNTIME)public <span class="hljs-variable">@interface</span> InjectLayout &#123;    <span class="hljs-selector-tag">int</span> <span class="hljs-selector-tag">value</span>() <span class="hljs-selector-tag">default</span> <span class="hljs-selector-tag">-1</span>;&#125;<span class="hljs-comment">//查找控件ID的注解</span>@<span class="hljs-selector-tag">Retention</span>(RetentionPolicy.SOURCE)@<span class="hljs-selector-tag">Target</span>(&#123;<span class="hljs-selector-tag">ElementType</span><span class="hljs-selector-class">.FIELD</span>&#125;)<span class="hljs-selector-tag">public</span> @<span class="hljs-selector-tag">interface</span> <span class="hljs-selector-tag">BindView</span> &#123;    <span class="hljs-selector-tag">int</span> <span class="hljs-selector-tag">value</span>() <span class="hljs-selector-tag">default</span> <span class="hljs-selector-tag">-1</span>;&#125;<span class="hljs-comment">//给View设置监听事件的注解</span>@<span class="hljs-selector-tag">Target</span>(ElementType.METHOD)@<span class="hljs-selector-tag">Retention</span>(RetentionPolicy.RUNTIME)<span class="hljs-selector-tag">public</span> @<span class="hljs-selector-tag">interface</span> <span class="hljs-selector-tag">OnClick</span> &#123;    <span class="hljs-selector-tag">int</span><span class="hljs-selector-attr">[]</span> <span class="hljs-selector-tag">value</span>();&#125;</code></pre><p><strong>2.声明BindProcessor类通过反射处理以上注解</strong></p><pre><code class="hljs reasonml"><span class="hljs-comment">//  处理@InjectLayout </span><span class="hljs-keyword">private</span> static void inject<span class="hljs-constructor">Layout(Activity <span class="hljs-params">activity</span>)</span> &#123;        Class&lt;?&gt; activityClass = activity.get<span class="hljs-constructor">Class()</span>;        <span class="hljs-keyword">if</span> (activityClass.is<span class="hljs-constructor">AnnotationPresent(InjectLayout.<span class="hljs-params">class</span>)</span>) &#123;            InjectLayout mId = activityClass.get<span class="hljs-constructor">Annotation(InjectLayout.<span class="hljs-params">class</span>)</span>;            <span class="hljs-built_in">int</span> id = mId.value<span class="hljs-literal">()</span>;            <span class="hljs-keyword">try</span> &#123;                Method <span class="hljs-keyword">method</span> = activityClass.get<span class="hljs-constructor">Method(<span class="hljs-string">&quot;setContentView&quot;</span>, <span class="hljs-params">int</span>.<span class="hljs-params">class</span>)</span>;                <span class="hljs-keyword">method</span>.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;                <span class="hljs-keyword">method</span>.invoke(activity, id);            &#125; catch (NoSuchMethodException <span class="hljs-pattern-match">| <span class="hljs-constructor">IllegalAccessException</span> | <span class="hljs-constructor">InvocationTargetException</span> e) &#123;</span><span class="hljs-pattern-match">                e.print<span class="hljs-constructor">StackTrace()</span>;</span><span class="hljs-pattern-match">            &#125;</span><span class="hljs-pattern-match">        &#125;</span><span class="hljs-pattern-match">    &#125;</span><span class="hljs-pattern-match"></span><span class="hljs-pattern-match"><span class="hljs-operator">/</span><span class="hljs-operator">/</span>  处理@<span class="hljs-constructor">BindView</span></span><span class="hljs-pattern-match">    <span class="hljs-keyword">private</span> static void bind<span class="hljs-constructor">View(Activity <span class="hljs-params">activity</span>)</span> &#123;</span><span class="hljs-pattern-match">        <span class="hljs-constructor">Class</span>&lt;?&gt; activity<span class="hljs-constructor">Class</span> = activity.get<span class="hljs-constructor">Class()</span>;</span><span class="hljs-pattern-match">        <span class="hljs-constructor">Field</span>[] declared<span class="hljs-constructor">Fields</span> = activity<span class="hljs-constructor">Class</span>.get<span class="hljs-constructor">DeclaredFields()</span>;</span><span class="hljs-pattern-match">        <span class="hljs-keyword">for</span> (<span class="hljs-constructor">Field</span> field : declared<span class="hljs-constructor">Fields</span>) &#123;</span><span class="hljs-pattern-match">            <span class="hljs-keyword">if</span> (field.is<span class="hljs-constructor">AnnotationPresent(BindView.<span class="hljs-params">class</span>)</span>) &#123;</span><span class="hljs-pattern-match">                <span class="hljs-constructor">BindView</span> m<span class="hljs-constructor">Id</span> = field.get<span class="hljs-constructor">Annotation(BindView.<span class="hljs-params">class</span>)</span>;</span><span class="hljs-pattern-match">                <span class="hljs-built_in">int</span> id = m<span class="hljs-constructor">Id</span>.value();</span><span class="hljs-pattern-match">                <span class="hljs-keyword">try</span> &#123;</span><span class="hljs-pattern-match">                    <span class="hljs-constructor">Method</span> <span class="hljs-keyword">method</span> = activity<span class="hljs-constructor">Class</span>.get<span class="hljs-constructor">Method(<span class="hljs-string">&quot;findViewById&quot;</span>, <span class="hljs-params">int</span>.<span class="hljs-params">class</span>)</span>;</span><span class="hljs-pattern-match">                    <span class="hljs-keyword">method</span>.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;</span><span class="hljs-pattern-match">                    <span class="hljs-constructor">Object</span> view = <span class="hljs-keyword">method</span>.invoke(activity, id);</span><span class="hljs-pattern-match">                    field.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;</span><span class="hljs-pattern-match">                    field.set(activity, view);</span><span class="hljs-pattern-match">                &#125; catch (<span class="hljs-constructor">NoSuchMethodException</span> e) &#123;</span><span class="hljs-pattern-match">                    e.print<span class="hljs-constructor">StackTrace()</span>;</span><span class="hljs-pattern-match">                &#125; catch (<span class="hljs-constructor">IllegalAccessException</span> e) &#123;</span><span class="hljs-pattern-match">                    e.print<span class="hljs-constructor">StackTrace()</span>;</span><span class="hljs-pattern-match">                &#125; catch (<span class="hljs-constructor">InvocationTargetException</span> e) &#123;</span><span class="hljs-pattern-match">                    e.print<span class="hljs-constructor">StackTrace()</span>;</span><span class="hljs-pattern-match">                &#125;</span><span class="hljs-pattern-match">            &#125;</span><span class="hljs-pattern-match">        &#125;</span><span class="hljs-pattern-match">    &#125;</span><span class="hljs-pattern-match"><span class="hljs-operator">/</span><span class="hljs-operator">/</span>  处理@<span class="hljs-constructor">OnClick</span></span><span class="hljs-pattern-match">    <span class="hljs-keyword">private</span> static void bind<span class="hljs-constructor">OnClick(<span class="hljs-params">final</span> Activity <span class="hljs-params">activity</span>)</span> &#123;</span><span class="hljs-pattern-match">        <span class="hljs-constructor">Class</span>&lt;?&gt; cls = activity.get<span class="hljs-constructor">Class()</span>;</span><span class="hljs-pattern-match">        <span class="hljs-constructor">Method</span>[] methods = cls.get<span class="hljs-constructor">Methods()</span>;</span><span class="hljs-pattern-match">        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = 0; i &lt; methods.length; i<span class="hljs-operator">++</span>) &#123;</span><span class="hljs-pattern-match">            final <span class="hljs-constructor">Method</span> <span class="hljs-keyword">method</span> = methods[i];</span><span class="hljs-pattern-match">            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">method</span>.is<span class="hljs-constructor">AnnotationPresent(OnClick.<span class="hljs-params">class</span>)</span>) &#123;</span><span class="hljs-pattern-match">                <span class="hljs-constructor">OnClick</span> m<span class="hljs-constructor">Onclick</span> = <span class="hljs-keyword">method</span>.get<span class="hljs-constructor">Annotation(OnClick.<span class="hljs-params">class</span>)</span>;</span><span class="hljs-pattern-match">                <span class="hljs-built_in">int</span>[] ids = m<span class="hljs-constructor">Onclick</span>.value();</span><span class="hljs-pattern-match">                <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> j = 0; j &lt; ids.length; j<span class="hljs-operator">++</span>) &#123;</span><span class="hljs-pattern-match">                    final <span class="hljs-constructor">View</span> view = activity.find<span class="hljs-constructor">ViewById(<span class="hljs-params">ids</span>[<span class="hljs-params">j</span>])</span>;</span><span class="hljs-pattern-match">                    <span class="hljs-keyword">if</span>(view<span class="hljs-operator">==</span>null) continue;</span><span class="hljs-pattern-match">                    view.set<span class="hljs-constructor">OnClickListener(<span class="hljs-params">new</span> View.OnClickListener()</span> &#123;</span><span class="hljs-pattern-match">                        @<span class="hljs-constructor">Override</span></span><span class="hljs-pattern-match">                        public void on<span class="hljs-constructor">Click(View <span class="hljs-params">v</span>)</span> &#123;</span><span class="hljs-pattern-match">                            <span class="hljs-keyword">try</span> &#123;</span><span class="hljs-pattern-match">                                <span class="hljs-keyword">method</span>.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;</span><span class="hljs-pattern-match">                                <span class="hljs-keyword">method</span>.invoke(activity, view);</span><span class="hljs-pattern-match">                            &#125; catch (<span class="hljs-constructor">IllegalAccessException</span> e) &#123;</span><span class="hljs-pattern-match">                                e.print<span class="hljs-constructor">StackTrace()</span>;</span><span class="hljs-pattern-match">                            &#125; catch (<span class="hljs-constructor">InvocationTargetException</span> e) &#123;</span><span class="hljs-pattern-match">                                e.print<span class="hljs-constructor">StackTrace()</span>;</span><span class="hljs-pattern-match">                            &#125;</span><span class="hljs-pattern-match">                        &#125;</span><span class="hljs-pattern-match">                    &#125;);</span><span class="hljs-pattern-match">                &#125;</span><span class="hljs-pattern-match">            &#125;</span><span class="hljs-pattern-match">        &#125;</span><span class="hljs-pattern-match">    &#125;</span><span class="hljs-pattern-match"></span><span class="hljs-pattern-match"></span><span class="hljs-pattern-match"><span class="hljs-operator">/</span><span class="hljs-operator">/</span>bind方法对外开放</span><span class="hljs-pattern-match">public static void bind(<span class="hljs-constructor">Activity</span> activity) &#123;</span><span class="hljs-pattern-match">        inject<span class="hljs-constructor">Layout(<span class="hljs-params">activity</span>)</span>;</span><span class="hljs-pattern-match">        bind<span class="hljs-constructor">View(<span class="hljs-params">activity</span>)</span>;</span><span class="hljs-pattern-match">        bind<span class="hljs-constructor">OnClick(<span class="hljs-params">activity</span>)</span>;</span><span class="hljs-pattern-match">    &#125;</span></code></pre><p>以上代码并没有什么难度，只要是了解一点反射知识的相信都能看懂。那么我们只要在Activity中调用bind方法后便可以使用注解了。下面来看Activity中的代码：</p><pre><code class="hljs reasonml">@<span class="hljs-constructor">InjectLayout(R.<span class="hljs-params">layout</span>.<span class="hljs-params">activity_main</span>)</span>public <span class="hljs-keyword">class</span> MainActivity extends AppCompatActivity &#123;    @<span class="hljs-constructor">BindView(R.<span class="hljs-params">id</span>.<span class="hljs-params">tv_test</span>)</span>    <span class="hljs-keyword">private</span> Button mButton;    @Override    protected void on<span class="hljs-constructor">Create(Bundle <span class="hljs-params">savedInstanceState</span>)</span> &#123;        super.on<span class="hljs-constructor">Create(<span class="hljs-params">savedInstanceState</span>)</span>;<span class="hljs-comment">//        setContentView(R.layout.activity_main);</span>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">BindProcessor</span>.</span></span>bind(this);        mButton.set<span class="hljs-constructor">Text(<span class="hljs-string">&quot;通过注解设置的Text&quot;</span>)</span>;    &#125;    @<span class="hljs-constructor">OnClick(&#123;R.<span class="hljs-params">id</span>.<span class="hljs-params">tv_test</span>, R.<span class="hljs-params">id</span>.<span class="hljs-params">btn_reflect</span>&#125;)</span>    public void on<span class="hljs-constructor">Click(View <span class="hljs-params">view</span>)</span> &#123;        switch (view.get<span class="hljs-constructor">Id()</span>) &#123;            case <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">R</span>.</span></span>id.tv_test:                <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Toast</span>.</span></span>make<span class="hljs-constructor">Text(<span class="hljs-params">this</span>, <span class="hljs-string">&quot;通过注解点解了Text&quot;</span>, Toast.LENGTH_SHORT)</span>.show<span class="hljs-literal">()</span>;                break;            case <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">R</span>.</span></span>id.btn_reflect:                test<span class="hljs-constructor">Reflect()</span>;                break;        &#125;    &#125;&#125;</code></pre><p>可以看到，我们并没有在onCreate方法中调用setContentView方法，也没有去为Button按钮findViewById，更没有为其设置监听事件，我们统统都是用上面自定义的注解实现的。那么效果如何呢？我们来看下运行及起来的效果：<br><img src="https://raw.githubusercontent.com/zhpanvip/Resource/master/image/1501.gif"></p><p>效果貌似还不错，实现了与ButterKnife的部分功能，甚至我们还比ButterKnife多了一个注入布局的功能。但是，我们要知道的是ButterKnife并非是直接用反射实现的，因为反射是在运行时处理的，会影响到程序的效率。但对于神一般存在的Jake，怎么会做如此没有效率的事情。关于ButterKnife是如何实现注解，我们在下篇文章中在做探讨。</p><p><a href="https://github.com/zhpanvip/MAnnotation/blob/master/app/src/main/java/com/zhpan/mannotation/BindProcessor.java">源码参考</a></p><h3 id="好库推荐"><a href="#好库推荐" class="headerlink" title="好库推荐"></a>好库推荐</h3><p>给大家推荐一下<a href="https://github.com/zhpanvip/BannerViewPager">BannerViewPager</a>。这是一个基于ViewPager实现的具有强大功能的无限轮播库。通过<a href="https://github.com/zhpanvip/BannerViewPager">BannerViewPager</a>可以实现腾讯视频、QQ音乐、酷狗音乐、支付宝、天猫、淘宝、优酷视频、喜马拉雅、网易云音乐、哔哩哔哩等APP的Banner样式以及指示器样式。</p><p>欢迎大家到github关注<a href="https://github.com/zhpanvip/BannerViewPager">BannerViewPager</a>！</p>]]></content>
    
    
    
    <tags>
      
      <tag>Annotation</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于Arouter的路由实现方案</title>
    <link href="/2018/07/26/15.%E5%9F%BA%E4%BA%8EArouter%E7%9A%84%E8%B7%AF%E7%94%B1%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%A1%88/"/>
    <url>/2018/07/26/15.%E5%9F%BA%E4%BA%8EArouter%E7%9A%84%E8%B7%AF%E7%94%B1%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%A1%88/</url>
    
    <content type="html"><![CDATA[<p>这本是一篇应该写在去年的文章，但仅仅因为…懒，这篇文章在草稿箱里静静的躺了一年多，被无限期推迟到了现在。最近刚好完成了公司项目的路由改造，借此机会来对这篇文章做一个了结。<br><img src="https://img-blog.csdnimg.cn/20190918012522155.png" alt="在这里插入图片描述"></p><h1 id="一、为什么要在项目中引入路由？"><a href="#一、为什么要在项目中引入路由？" class="headerlink" title="一、为什么要在项目中引入路由？"></a>一、为什么要在项目中引入路由？</h1><p>在开始之前我们先来思考一下这个问题。为什么要在项目中引入路由？相信大家的答案可能会有所不同，但是应该也不外乎以下几点：</p><h2 id="1-为了实现项目组件化"><a href="#1-为了实现项目组件化" class="headerlink" title="1.为了实现项目组件化"></a>1.为了实现项目组件化</h2><p>想必很多开发者引入路由的目的都是因为要实现项目组件化。我们知道，组件化的项目各个业务模块之间没有相互的依赖关系。不同业务模块之间的通信最好的解决方案就是支持页面路由。</p><h2 id="2-方便APP内部跳转"><a href="#2-方便APP内部跳转" class="headerlink" title="2.方便APP内部跳转"></a>2.方便APP内部跳转</h2><p>可能有些小伙伴会有疑问，App内部直接通过Intent跳转不是很好吗，为什么要多此一举引入路由呢？当然，通常情况下通过Intent跳转也无伤大雅。但是在某些情况下，比如像下图这样的一个页面：<br><img src="https://img-blog.csdnimg.cn/2019091700111637.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIwNTIxNTcz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这是一个典型的多Type的RecyclerView页面，这个页面中所有的数据都是从服务器获取的，在引入路由之前所有的点击跳转事件都需要后台给我们一个type,我们根据type判断需要向哪一个Activity跳转，并且需要通过Intent携带目的页面所需要的参数。显然这样写会使我们代码变得非常臃肿，代码之间的耦合度也非常高。然而在引入路由之后一切都变得不一样了。我们只需要后台返回目的页面所对应的URL，并在URL上拼接页面跳转所需要的参数，此时前台只需要拿到URL，然后通过路由即可到达对应的页面。这样以来使我们的代码变得简洁明了，并且保证了代码的低耦合。</p><h2 id="3-方便APP外部跳转"><a href="#3-方便APP外部跳转" class="headerlink" title="3.方便APP外部跳转"></a>3.方便APP外部跳转</h2><p>通常可以看到很多应用支持从浏览器唤醒App并跳转到对应的页面。做到比较好的如知乎，体验过知乎的小伙伴应该知道，知乎可以从浏览器唤醒App并且直接在App中打开当前在浏览器中浏览的内容。我们知道，从外部唤起App需要给Activity添加Schema。而如果App内部有许多Activity需要支持外部唤起，我们不可能为这些Activity都添加Schema。那么此时我们就可以单独设置一个支持Schema的Activity，浏览器可以通过Schema唤起这个Activity。而在这个Activity中会接收浏览器传过来的URL，然后根据URL进行路由分发，通过URL路由到对应的页面即可。</p><h1 id="二-、ARouter的使用"><a href="#二-、ARouter的使用" class="headerlink" title="二 、ARouter的使用"></a>二 、ARouter的使用</h1><p>其实很不想在这篇文章中长篇大论如何使用<a href="https://github.com/alibaba/ARouter">ARouter</a>，因为<a href="https://github.com/alibaba/ARouter/blob/master/README_CN.md">ARouter的官方文档</a>上已经非常详细的告诉了开发者如何去使用，只要仔细的阅读ARouter的文档基本上绝大部分问题都可以得到解决。但是为了照顾没有使用过ARouter的小伙伴，这里还是再啰嗦一下。如果你对ARouter的使用已经非常熟悉了那么你可以忽略此章节，直接到下一章了。</p><h2 id="1-添加依赖和配置"><a href="#1-添加依赖和配置" class="headerlink" title="1.添加依赖和配置"></a>1.添加依赖和配置</h2><pre><code class="hljs properties"><span class="hljs-attr">android</span> <span class="hljs-string">&#123;</span>    <span class="hljs-attr">defaultConfig</span> <span class="hljs-string">&#123;</span>        <span class="hljs-attr">...</span>        <span class="hljs-attr">javaCompileOptions</span> <span class="hljs-string">&#123;</span>            <span class="hljs-attr">annotationProcessorOptions</span> <span class="hljs-string">&#123;</span>                <span class="hljs-attr">arguments</span> = <span class="hljs-string">[AROUTER_MODULE_NAME: project.getName()]</span>            <span class="hljs-attr">&#125;</span>        <span class="hljs-attr">&#125;</span>    <span class="hljs-attr">&#125;</span><span class="hljs-attr">&#125;</span><span class="hljs-attr">dependencies</span> <span class="hljs-string">&#123;</span>    <span class="hljs-meta">//</span> <span class="hljs-string">替换成最新版本, 需要注意的是api</span>    <span class="hljs-meta">//</span> <span class="hljs-string">要与compiler匹配使用，均使用最新版可以保证兼容</span>    <span class="hljs-attr">implementation</span> <span class="hljs-string">&#x27;com.alibaba:arouter-api:x.x.x&#x27;</span>    <span class="hljs-attr">annotationProcessor</span> <span class="hljs-string">&#x27;com.alibaba:arouter-compiler:x.x.x&#x27;</span>    <span class="hljs-attr">...</span><span class="hljs-attr">&#125;</span></code></pre><p>这里需要注意，如果你的项目有多个业务模块，那么每个模块都需要在gradle中添加以上配置。</p><h2 id="2-初始化SDK"><a href="#2-初始化SDK" class="headerlink" title="2.初始化SDK"></a>2.初始化SDK</h2><pre><code class="hljs reasonml"><span class="hljs-keyword">if</span> (is<span class="hljs-constructor">Debug()</span>) &#123;           <span class="hljs-comment">// 这两行必须写在init之前，否则这些配置在init过程中将无效</span>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ARouter</span>.</span></span><span class="hljs-keyword">open</span><span class="hljs-constructor">Log()</span>;     <span class="hljs-comment">// 打印日志</span>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ARouter</span>.</span></span><span class="hljs-keyword">open</span><span class="hljs-constructor">Debug()</span>;   <span class="hljs-comment">// 开启调试模式(如果在InstantRun模式下运行，必须开启调试模式！线上版本需要关闭,否则有安全风险)</span>&#125;<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ARouter</span>.</span></span>init(mApplication); <span class="hljs-comment">// 尽可能早，推荐在Application中初始化</span></code></pre><h2 id="3-添加注解"><a href="#3-添加注解" class="headerlink" title="3.添加注解"></a>3.添加注解</h2><pre><code class="hljs angelscript"><span class="hljs-comment">// 在支持路由的页面上添加注解(必选)</span><span class="hljs-comment">// 这里的路径需要注意的是至少需要有两级，/xx/xx</span>@Route(path = <span class="hljs-string">&quot;/test/activity&quot;</span>)<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-symbol">YourActivity</span> <span class="hljs-symbol">extend</span> <span class="hljs-symbol">Activity</span> &#123;    ...&#125;</code></pre><h2 id="4-发起路由操作"><a href="#4-发起路由操作" class="headerlink" title="4.发起路由操作"></a>4.发起路由操作</h2><pre><code class="hljs reasonml"><span class="hljs-comment">// 1. 应用内简单的跳转(通过URL跳转在&#x27;进阶用法&#x27;中)</span><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ARouter</span>.</span></span>get<span class="hljs-constructor">Instance()</span>.build(<span class="hljs-string">&quot;/test/activity&quot;</span>).navigation<span class="hljs-literal">()</span>;<span class="hljs-comment">// 2. 跳转并携带参数</span><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ARouter</span>.</span></span>get<span class="hljs-constructor">Instance()</span>.build(<span class="hljs-string">&quot;/test/1&quot;</span>)            .<span class="hljs-keyword">with</span><span class="hljs-constructor">Long(<span class="hljs-string">&quot;key1&quot;</span>, 666L)</span>            .<span class="hljs-keyword">with</span><span class="hljs-constructor">String(<span class="hljs-string">&quot;key3&quot;</span>, <span class="hljs-string">&quot;888&quot;</span>)</span>            .<span class="hljs-keyword">with</span><span class="hljs-constructor">Object(<span class="hljs-string">&quot;key4&quot;</span>, <span class="hljs-params">new</span> Test(<span class="hljs-string">&quot;Jack&quot;</span>, <span class="hljs-string">&quot;Rose&quot;</span>)</span>)            .navigation<span class="hljs-literal">()</span>;</code></pre><p>很多情况下需要通过URL跳转，ARouter支持直接通过URL跳转：</p><pre><code class="hljs reasonml">Uri uri= <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Uri</span>.</span></span>parse(url);<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ARouter</span>.</span></span>get<span class="hljs-constructor">Instance()</span>.build(uri).navigation<span class="hljs-literal">()</span>;</code></pre><h2 id="5-路由解析参数"><a href="#5-路由解析参数" class="headerlink" title="5.路由解析参数"></a>5.路由解析参数</h2><pre><code class="hljs aspectj"><span class="hljs-comment">// 为每一个参数声明一个字段，并使用 @Autowired 标注</span><span class="hljs-comment">// URL中不能传递Parcelable类型数据，通过ARouter api可以传递Parcelable对象</span><span class="hljs-meta">@Route</span>(path = <span class="hljs-string">&quot;/test/activity&quot;</span>)<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test1Activity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Activity</span> </span>&#123;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">public</span> String name;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">int</span> age;        <span class="hljs-comment">// 通过name来映射URL中的不同参数</span>    <span class="hljs-meta">@Autowired</span>(name = <span class="hljs-string">&quot;girl&quot;</span>)     <span class="hljs-keyword">boolean</span> boy;        <span class="hljs-comment">// 支持解析自定义对象，URL中使用json传递</span>    <span class="hljs-meta">@Autowired</span>    TestObj obj;              <span class="hljs-comment">// 使用 withObject 传递 List 和 Map 的实现了</span>    <span class="hljs-comment">// Serializable 接口的实现类(ArrayList/HashMap)</span>    <span class="hljs-comment">// 的时候，接收该对象的地方不能标注具体的实现类类型</span>    <span class="hljs-comment">// 应仅标注为 List 或 Map，否则会影响序列化中类型</span>    <span class="hljs-comment">// 的判断, 其他类似情况需要同样处理        </span>    <span class="hljs-meta">@Autowired</span>    List&lt;TestObj&gt; list;    <span class="hljs-meta">@Autowired</span>    Map&lt;String, List&lt;TestObj&gt;&gt; map;        <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> </span>&#123;    <span class="hljs-keyword">super</span>.onCreate(savedInstanceState);    ARouter.getInstance().inject(<span class="hljs-keyword">this</span>);    <span class="hljs-comment">// ARouter会自动对字段进行赋值，无需主动获取</span>    Log.d(<span class="hljs-string">&quot;param&quot;</span>, name + age + boy);    &#125;&#125;<span class="hljs-comment">// 如果需要传递自定义对象，新建一个类（并非自定义对象类），然后实现 SerializationService,并使用@Route注解标注(方便用户自行选择序列化方式)，例如：</span><span class="hljs-meta">@Route</span>(path = <span class="hljs-string">&quot;/yourservicegroupname/json&quot;</span>)<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JsonServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">SerializationService</span> </span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(Context context)</span> </span>&#123;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> &lt;T&gt; <span class="hljs-function">T <span class="hljs-title">json2Object</span><span class="hljs-params">(String text, Class&lt;T&gt; clazz)</span> </span>&#123;        <span class="hljs-function"><span class="hljs-keyword">return</span> JSON.<span class="hljs-title">parseObject</span><span class="hljs-params">(text, clazz)</span></span>;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-function">String <span class="hljs-title">object2Json</span><span class="hljs-params">(Object instance)</span> </span>&#123;        <span class="hljs-function"><span class="hljs-keyword">return</span> JSON.<span class="hljs-title">toJSONString</span><span class="hljs-params">(instance)</span></span>;    &#125;&#125;</code></pre><p>除了使用@Autowired注解注入参数外，还可以与普通页面跳转一样通过getIntent()获取参数。</p><p>以上就是ARouter的一些基本用法，了解这些基本用法之后并不等于已经掌握了ARouter。因为当你实际用到项目中的时候可能会面临诸多问题。</p><h1 id="三-、ARouter的采坑之路"><a href="#三-、ARouter的采坑之路" class="headerlink" title="三 、ARouter的采坑之路"></a>三 、ARouter的采坑之路</h1><p>如果你只是简单的写一个ARouter使用的Demo，那么可能上一章的内容已经足够了。但是当你在项目中引入ARouter后各种各样的问题便会接踵而至。</p><h2 id="1-使用ARouter实现登录拦截"><a href="#1-使用ARouter实现登录拦截" class="headerlink" title="1.使用ARouter实现登录拦截"></a>1.使用ARouter实现登录拦截</h2><p>这是在项目中引入ARouter后面临的第一个问题。通常情况下，大部分App不登录便可以进入主页面，在跳转需要用户权限的页面时会首先跳转到登录页面引导用户登录。我相信大部分的开发在最初时候都写过类似这样的代码：</p><pre><code class="hljs isbl"><span class="hljs-variable"><span class="hljs-keyword">if</span></span> (<span class="hljs-variable">isLogin</span>) &#123;    <span class="hljs-function"><span class="hljs-title">goToDestination</span>();</span><span class="hljs-function"> &#125; <span class="hljs-variable"><span class="hljs-keyword">else</span></span> &#123;</span><span class="hljs-function">    <span class="hljs-title">goToLogin</span>();</span><span class="hljs-function"> &#125;</span></code></pre><p>在每次跳转页面的时候都需要进行是否登录的判断，这样的代码显然有很大的弊端。而ARouter为我们提供了面向切面的登录拦截功能，ARouter的文档上给了我们一个例子：</p><pre><code class="hljs less"><span class="hljs-comment">// 比较经典的应用就是在跳转过程中处理登陆事件，这样就不需要在目标页重复做登陆检查</span><span class="hljs-comment">// 拦截器会在跳转之间执行，多个拦截器会按优先级顺序依次执行</span><span class="hljs-variable">@Interceptor</span>(priority = <span class="hljs-number">8</span>, name = <span class="hljs-string">&quot;测试用拦截器&quot;</span>)public class TestInterceptor implements IInterceptor &#123;    <span class="hljs-variable">@Override</span>    public void process(Postcard postcard, InterceptorCallback callback) &#123;    ...    <span class="hljs-selector-tag">callback</span><span class="hljs-selector-class">.onContinue</span>(postcard);  <span class="hljs-comment">// 处理完成，交还控制权</span>    <span class="hljs-comment">// callback.onInterrupt(new RuntimeException(&quot;我觉得有点异常&quot;));      // 觉得有问题，中断路由流程</span>    <span class="hljs-comment">// 以上两种至少需要调用其中一种，否则不会继续路由</span>    &#125;    <span class="hljs-variable">@Override</span>    public void init(Context context) &#123;    <span class="hljs-comment">// 拦截器的初始化，会在sdk初始化的时候调用该方法，仅会调用一次</span>    &#125;&#125;</code></pre><p>如果你按着官方文档上这样写，那么你大概率会碰到很多问题。列举如下：<br><strong>如何处理有些页面需要登录拦截，有些页面不需要登录拦截？</strong><br>如果你添加了拦截器，那么在每次路由跳转时都会优先走到拦截器中，在拦截器的process()方法中你可以通过判断当前是否登录来决定是否继续该路由操作，如果已经登录，那么直接通过 callback.onContinue(postcard)继续当前路由，而如果没有登录，那么就将目的页面修改为登录页。但是，不要忘了，添加拦截器后所有的路由操作都会优先走到这里，而我们的需求是只有需要用户权限的时候才需要跳转到登录页，否则即使没有登录依然可以跳转到目的页。此时我们应该怎么办？<br>如果你仔细的看了ARouter的开发文档，你可能注意到在@Route的注解有一个int类型的extras参数。如此我们便可以通过这个参数来对Activity进行标记是否需要登录：</p><pre><code class="hljs scala"><span class="hljs-meta">@Route</span>(path = <span class="hljs-type">PATH_TEST</span>, extras = <span class="hljs-type">IGNORE_LOGIN</span>)public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BaseTitleCompatActivity</span> </span>&#123;&#125;</code></pre><p>接下来，在拦截器中可以拿到extras参数，以此来确定该页面是否需要登录：</p><pre><code class="hljs reasonml"><span class="hljs-keyword">if</span>(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">UserInfoTools</span>.</span></span>is<span class="hljs-constructor">Login()</span><span class="hljs-operator"> || </span>IGNORE_LOGIN<span class="hljs-operator"> == </span>postcard.get<span class="hljs-constructor">Extra()</span>) &#123;  <span class="hljs-comment">//  已经登录或者不需要拦截的情况</span> <span class="hljs-comment">//  继续当前路由</span>      callback.on<span class="hljs-constructor">Continue(<span class="hljs-params">postcard</span>)</span>; &#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">// 未登录且需要登录的情况</span>    <span class="hljs-comment">//路由到登录页面</span>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ARouter</span>.</span></span>get<span class="hljs-constructor">Instance()</span>.build(RoutingTable.PATH_GUEST_LOGIN).navigation<span class="hljs-literal">()</span>;    ...  &#125;</code></pre><p>到这里这个问题解决了，但是当你兴致勃勃的运行起来App,在未登录的情况下点击跳转到需要用户权限的页面，你憧憬着跳转页面会被拦截到登录页，但是你又被无情的事实打脸了。竟然页面毫无反应？于是你断点、打Log发现ARouter.getInstance().build(RoutingTable.PATH_GUEST_LOGIN).navigation()这句代码确实执行了，但是为什么没有跳转到登录页？于是你苦思冥想，突然灵光一闪，哇！是因为这一句路由也会走到了拦截器里，如此岂不成了一个死循环。于是你Google如何解决，发现原来需要调用greenChannel()来避免出现死循环。于是有了如下代码：</p><pre><code class="hljs reasonml"><span class="hljs-keyword">if</span>(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">UserInfoTools</span>.</span></span>is<span class="hljs-constructor">Login()</span><span class="hljs-operator"> || </span>IGNORE_LOGIN<span class="hljs-operator"> == </span>postcard.get<span class="hljs-constructor">Extra()</span>) &#123;  <span class="hljs-comment">//  已经登录或者不需要拦截的情况</span> <span class="hljs-comment">//  继续当前路由</span>      callback.on<span class="hljs-constructor">Continue(<span class="hljs-params">postcard</span>)</span>; &#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">// 未登录且需要登录的情况</span>    <span class="hljs-comment">//路由到登录页面</span>   <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ARouter</span>.</span></span>get<span class="hljs-constructor">Instance()</span>.build(RoutingTable.PATH_GUEST_LOGIN).green<span class="hljs-constructor">Channel()</span>.navigation<span class="hljs-literal">()</span>;    ...  &#125;</code></pre><p>修改之后你怀着和刚才一样的心情兴致勃勃的运行起来App,心想，这次一定没问题。好！点击按钮….竟然成功跳转到了登录页面。于是你兴奋起来，疯狂的点击这些页面，发现都没问题。可是…当你点了几次之后突然发现，页面跳转无效了！！你简直不敢相信自己的眼睛，刚才明明是好好的…于是你在此陷入了沉思。<br>好吧，这次直接公布答案了，那是因为你需要将原来的路由打断，而之所以前几次有效大概猜测是因为greenChannel()去开启了多个channel，而ARouter的channel是有限的，因此在点击几次之后路由再次失效了。于是修改后代码如下：</p><pre><code class="hljs reasonml"><span class="hljs-keyword">if</span>(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">UserInfoTools</span>.</span></span>is<span class="hljs-constructor">Login()</span><span class="hljs-operator"> || </span>IGNORE_LOGIN<span class="hljs-operator"> == </span>postcard.get<span class="hljs-constructor">Extra()</span>) &#123;  <span class="hljs-comment">//  已经登录或者不需要拦截的情况</span> <span class="hljs-comment">//  继续当前路由</span>      callback.on<span class="hljs-constructor">Continue(<span class="hljs-params">postcard</span>)</span>; &#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">// 未登录且需要登录的情况</span>    <span class="hljs-comment">//路由到登录页面</span>   <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ARouter</span>.</span></span>get<span class="hljs-constructor">Instance()</span>.build(RoutingTable.PATH_GUEST_LOGIN).green<span class="hljs-constructor">Channel()</span>.navigation<span class="hljs-literal">()</span>;   callback.on<span class="hljs-constructor">Interrupt(<span class="hljs-params">null</span>)</span>;  &#125;</code></pre><p>关于登录拦截看似简单，实则使用时候竟然会碰到这么多问题！相信第一次使用时都会被虐的掉眼泪。</p><h2 id="2-处理一个Activity对应多个路径的情况"><a href="#2-处理一个Activity对应多个路径的情况" class="headerlink" title="2.处理一个Activity对应多个路径的情况"></a>2.处理一个Activity对应多个路径的情况</h2><p>在某些情况可能出现一个页面对应多个路径的情况。出现这种情况的原因可能是前期路由没有规划好，导致后边版本的路由路径做了修改。从而出现了一个Activity对应多个页面的情况。为了兼容旧版路由，我们不得不处理这种情况。但是，Route的注解中path是唯一的，并不能通过@Route注解解决一个Activity对应多个路径的情况。此时就需要用到ARouter的重写URL的功能。只需要实现PathReplaceService 接口，在重写的方法中对URI或者Path进行替换即可，注意，这个类一定要加@Route注解。代码参考如下：</p><pre><code class="hljs reasonml">@<span class="hljs-constructor">Route(<span class="hljs-params">path</span> = <span class="hljs-string">&quot;/lost/service&quot;</span>)</span>public <span class="hljs-keyword">class</span> ARouterLostReplaceService implements PathReplaceService &#123;    @Override    public String <span class="hljs-keyword">for</span><span class="hljs-constructor">String(String <span class="hljs-params">path</span>)</span> &#123;<span class="hljs-comment">//对于path处理与uri类似</span>        return path;    &#125;    @Override    public Uri <span class="hljs-keyword">for</span><span class="hljs-constructor">Uri(Uri <span class="hljs-params">uri</span>)</span> &#123;        String path = uri.get<span class="hljs-constructor">Path()</span>;        <span class="hljs-keyword">if</span>(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">PATH_LOST1</span>.</span></span>equals(path)) &#123;            uri = replace<span class="hljs-constructor">UriPath(<span class="hljs-params">uri</span>, PATH_REAL1)</span>;        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">PATH_LOST2</span>.</span></span>equals(path)) &#123;            uri = replace<span class="hljs-constructor">UriPath(<span class="hljs-params">uri</span>, PATH_REAL2)</span>;        &#125;        return uri;    &#125;    @Override    public void init(Context context) &#123;    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 替换URI中的path</span><span class="hljs-comment">     * </span><span class="hljs-comment">     * @param uri 被替换的uri</span><span class="hljs-comment">     * @param path 要替换的path</span><span class="hljs-comment">     * @return 替换后的uri</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">private</span> Uri replace<span class="hljs-constructor">UriPath(Uri <span class="hljs-params">uri</span>, String <span class="hljs-params">path</span>)</span> &#123;        StringBuilder resultUrl = <span class="hljs-keyword">new</span> <span class="hljs-constructor">StringBuilder(<span class="hljs-params">uri</span>.<span class="hljs-params">getScheme</span>()</span> + <span class="hljs-string">&quot;://&quot;</span> + uri.get<span class="hljs-constructor">Host()</span> + path);        String<span class="hljs-literal">[]</span> split = uri.<span class="hljs-keyword">to</span><span class="hljs-constructor">String()</span>.split(<span class="hljs-string">&quot;\\?&quot;</span>);        <span class="hljs-keyword">if</span>(split.length &gt;= <span class="hljs-number">2</span>) &#123;            resultUrl.append(<span class="hljs-string">&quot;?&quot;</span>).append(split<span class="hljs-literal">[<span class="hljs-number">1</span>]</span>);        &#125;        return <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Uri</span>.</span></span>parse(resultUrl.<span class="hljs-keyword">to</span><span class="hljs-constructor">String()</span>);    &#125;&#125;</code></pre><h2 id="3-ARouter全局降级策略"><a href="#3-ARouter全局降级策略" class="headerlink" title="3.ARouter全局降级策略"></a>3.ARouter全局降级策略</h2><p>在路由跳转时可能会出现找不到Path对应页面的情况，对于这种情况可以通过实现DegradeService 接口来处理，同样这个类也必须要添加@Route注解。这样当路由跳转时找不到路径就会走到这个类的onLost方法中，此时就可以在这个方法中来做相应的处理了。</p><pre><code class="hljs less"><span class="hljs-comment">// 实现DegradeService接口，并加上一个Path内容任意的注解即可</span><span class="hljs-variable">@Route</span>(path = <span class="hljs-string">&quot;/lost/path&quot;</span>)public class DegradeServiceImpl implements DegradeService &#123;<span class="hljs-variable">@Override</span>public void onLost(Context context, Postcard postcard) &#123;    <span class="hljs-comment">//  可以在此处统一处理，比如跳转到首页</span>&#125;<span class="hljs-variable">@Override</span>public void init(Context context) &#123;&#125;&#125;</code></pre><h1 id="四、通过浏览器跳转到App对应页面"><a href="#四、通过浏览器跳转到App对应页面" class="headerlink" title="四、通过浏览器跳转到App对应页面"></a>四、通过浏览器跳转到App对应页面</h1><h2 id="1-Schema协议"><a href="#1-Schema协议" class="headerlink" title="1.Schema协议"></a>1.Schema协议</h2><p>很多人对于Schema协议比较陌生，但是如果说URL大家一定都非常熟悉。其实URL就是一种Schema协议。Schema协议通常由四部分组成：</p><pre><code class="hljs inform7"><span class="hljs-comment">[scheme]</span>://<span class="hljs-comment">[host]</span>/<span class="hljs-comment">[path]</span>?<span class="hljs-comment">[query]</span>scheme：表示协议名称host：Schema所作用的地址域path：Schema指定的路径query：携带的参数</code></pre><p>拿百度搜索的URL来举例子：<a href="https://www.baidu.com/s?wd=%E8%A6%81%E6%90%9C%E7%B4%A2%E7%9A%84%E5%85%B3%E9%94%AE%E5%AD%97%E3%80%82%E8%BF%99%E4%B8%AAURL%E4%B8%8ESchema%E5%8D%8F%E8%AE%AE%E7%9A%84%E5%AF%B9%E5%BA%94%E5%85%B3%E7%B3%BB%E5%A6%82%E4%B8%8B">https://www.baidu.com/s?wd=要搜索的关键字。这个URL与Schema协议的对应关系如下</a></p><blockquote><p>schema:：https<br>host： <a href="http://www.baidu.com/">www.baidu.com</a><br>path： /s<br>query：wd=要搜索的关键字</p></blockquote><p>了解了Schema协议后，其实我们完全可以按照Schema协议的格式来自定义一个Schema链接，如下：</p><blockquote><p>myApp://<a href="http://www.myapp.com/main/home?id=1">www.myApp.com/main/home?id=1</a></p><p>我们自己定义的Schema链接的对应关系为：<br> schema:：myApp<br>host：<a href="http://www.myapp.com/">www.myApp.com</a><br>path：/main/home<br>query：id=1</p></blockquote><h2 id="2-通过Schema链接打开Activity"><a href="#2-通过Schema链接打开Activity" class="headerlink" title="2.通过Schema链接打开Activity"></a>2.通过Schema链接打开Activity</h2><p>通过浏览器打开App其实就是通过Schema链接来实现的。我们就以上一节中自定义的Schema链接为例来实现浏览器打开App。首先在项目中添加一个RouterActivity，RouterActivity在AndroidManifest中的配置如下：</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">activity</span></span><span class="hljs-tag">      <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;.activity.RouterActivity&quot;</span></span><span class="hljs-tag">      <span class="hljs-attr">android:configChanges</span>=<span class="hljs-string">&quot;orientation|keyboardHidden|screenSize&quot;</span></span><span class="hljs-tag">      <span class="hljs-attr">android:screenOrientation</span>=<span class="hljs-string">&quot;portrait&quot;</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">intent-filter</span>&gt;</span>          <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.intent.action.VIEW&quot;</span> /&gt;</span>          <span class="hljs-tag">&lt;<span class="hljs-name">category</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.intent.category.DEFAULT&quot;</span> /&gt;</span>           <span class="hljs-tag">&lt;<span class="hljs-name">category</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.intent.category.BROWSABLE&quot;</span> /&gt;</span>           <span class="hljs-tag">&lt;<span class="hljs-name">data</span> <span class="hljs-attr">android:scheme</span>=<span class="hljs-string">&quot;myApp&quot;</span> /&gt;</span>      <span class="hljs-tag">&lt;/<span class="hljs-name">intent-filter</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">activity</span>&gt;</span></code></pre><p>我们在AndroidManifest中为RouterActivity添加了schema，此时在HTML中写入以下代码：</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;myApp://www.myApp.com/main/home?id=1&quot;</span>&gt;</span>打开APP<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></code></pre><p>通过点击HTML页面的”打开App”便可启动RouterActivity。并且RouterActivity启动后可以通过Intent获取到启动的URI。代码如下：</p><pre><code class="hljs reasonml">  #RouterActivity @Override   protected void on<span class="hljs-constructor">Create(Bundle <span class="hljs-params">data</span>)</span> &#123;       super.on<span class="hljs-constructor">Create(<span class="hljs-params">data</span>)</span>;       Uri launchUri = get<span class="hljs-constructor">Intent()</span>.get<span class="hljs-constructor">Data()</span>;       dispatch<span class="hljs-constructor">RouterUri(<span class="hljs-params">launchUri</span>)</span>;   &#125;</code></pre><p>至此，我们已经可以通过App来打开项目的RouterActivity。</p><h2 id="3-通过路由跳转到目的页面"><a href="#3-通过路由跳转到目的页面" class="headerlink" title="3.通过路由跳转到目的页面"></a>3.通过路由跳转到目的页面</h2><p>上一节中我们通过HTML打开了RouterActivity，并在RouterActivity中拿到了跳转的URI，那么接下来我们便可以根据URI的信息打开对应的页面了。但是在开启路由跳转之前为了保险起见需要对URI进行一些校验。详细代码如下：</p><pre><code class="hljs reasonml"><span class="hljs-keyword">private</span> void dispatch<span class="hljs-constructor">RouterUri(Uri <span class="hljs-params">launchUri</span>)</span> &#123;        <span class="hljs-keyword">if</span>(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">RoutingTable</span>.</span></span>is<span class="hljs-constructor">ValidRouterUri(<span class="hljs-params">launchUri</span>)</span>) &#123;  <span class="hljs-comment">//判断是否是合法的URI，这里只有URI携带了Path才算合法</span>            <span class="hljs-keyword">if</span>(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">App</span>.</span></span>is<span class="hljs-constructor">RootActivityLaunched()</span>) &#123; <span class="hljs-comment">// app已启动</span>                <span class="hljs-keyword">if</span>(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">RoutingTable</span>.</span></span>is<span class="hljs-constructor">WxUri(<span class="hljs-params">launchUri</span>)</span>) &#123; <span class="hljs-comment">//如果是微信的URI那么目的地是要跳转到小程序的（此处为项目中的需求）</span>                    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">RoutingTable</span>.</span></span><span class="hljs-keyword">open</span><span class="hljs-constructor">MiniProgram(<span class="hljs-params">this</span>, <span class="hljs-params">launchUri</span>)</span>;                    finish<span class="hljs-literal">()</span>;                    return;                &#125;                <span class="hljs-comment">//通过ARouter路由到目的页面</span>               <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ARouter</span>.</span></span>get<span class="hljs-constructor">Instance()</span>.build(launchUri).navigation<span class="hljs-literal">()</span>;            &#125; <span class="hljs-keyword">else</span> &#123;  <span class="hljs-comment">// app未启动, 保存router uri, 幷尝试启动app</span>               <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">SharedPreferUtil</span>.</span></span>put(Constants.ROUTER_URI, launchUri.<span class="hljs-keyword">to</span><span class="hljs-constructor">String()</span>);               launch<span class="hljs-constructor">App()</span>;            &#125;        &#125; <span class="hljs-keyword">else</span> &#123;  <span class="hljs-comment">// 走到此处可能是因为URI没有携带Path，即并非要跳转目的页面，而是要启动APP  。因此直接启动App即可</span>            launch<span class="hljs-constructor">App()</span>;        &#125;        finish<span class="hljs-literal">()</span>;    &#125;</code></pre><p>上面代码中，我们对URI做了一系列校验，根据不同的URI做不同的处理。同时我们应该也注意到了，如果APP已经启动了，那么就可以直接跳转对应的页面了，而如果App没有启动，那么则是先将URI保存到了SharedPreference中，接着启动了App。那么此时App启动后会在MainActivity中读取SharedPreference中的配置，如果读取到URI的信息，那么就先将此数据从SharedPreference中移除，然后通过ARouter跳转到URI指定的页面去。MainActivity中的部分代码如下：</p><pre><code class="hljs csharp"><span class="hljs-meta">#MainActivity</span><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">resumeRoute</span>(<span class="hljs-params"></span>)</span> &#123;        <span class="hljs-comment">// Continue for interrupted router uri</span>        String interruptedLaunchUriString =                Configuration.<span class="hljs-keyword">get</span>(Constants.INTERRUPTED_ROUTER_URI, <span class="hljs-literal">null</span>);         <span class="hljs-comment">//移除SharedPreference中的URI，避免下次打开MainActivity错误跳转</span>        SharedPreferUtil.<span class="hljs-keyword">remove</span>(Constants.ROUTER_URI);        Uri launchUri = <span class="hljs-literal">null</span>;        <span class="hljs-keyword">if</span>(interruptedLaunchUriString != <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">// Activity未启动的情况下 通过外部Scheme跳转非MainActivity</span>            launchUri = Uri.parse(interruptedLaunchUriString);        &#125;        <span class="hljs-keyword">if</span>(launchUri == <span class="hljs-literal">null</span>) &#123;            <span class="hljs-keyword">return</span>;        &#125;<span class="hljs-comment">//通过路由跳转到URI对应的页面</span>        ARouter.getInstance().build(launchUri).navigation();    &#125;</code></pre><p>关于ARouter的路由方案所涉及的内容至此已经全部讲完了。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Arouter</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>自定义View之弹性滑动的LockView</title>
    <link href="/2018/07/14/14.%E8%87%AA%E5%AE%9A%E4%B9%89View%E4%B9%8B%E5%BC%B9%E6%80%A7%E6%BB%91%E5%8A%A8%E7%9A%84LockView/"/>
    <url>/2018/07/14/14.%E8%87%AA%E5%AE%9A%E4%B9%89View%E4%B9%8B%E5%BC%B9%E6%80%A7%E6%BB%91%E5%8A%A8%E7%9A%84LockView/</url>
    
    <content type="html"><![CDATA[<p><strong><em>本文已发表在<a href="https://juejin.im/post/5d465e18518825219c280e5c">掘金</a>，转载请注明出处。</em></strong></p><p>本篇文章我们来实现一个带有弹性滑动效果的自定义View。当然，文章的侧重点是自定义View但也会涉及到View的事件分发以及一些其他方面的知识，例如使用Scroller实现带有阻尼效果的弹性滑动。因此，我相信看完这篇文章你不仅能学到自定义View的相关知识，还会了解到View的事件分发！还是老规矩，看下最终实现效果。<br><img src="https://raw.githubusercontent.com/zhpanvip/Resource/master/image/1401.gif"></p><p> 分析图中效果会发现其核心功能类似于一个简单的下拉刷新、上拉加载的框架，但又有区别。开始前还是先来罗列一下几个核心步骤，如下：<br>      一. 明确需求，确定对外开放的接口<br>      二. 分析滑动效果，初步实现控件布局<br>      三. 关于滑动，不得不说的事件分发<br>      四. 实现自定义CircleWaveView</p><h2 id="一-明确需求，确定对外开放接口"><a href="#一-明确需求，确定对外开放接口" class="headerlink" title="一. 明确需求，确定对外开放接口"></a>一. 明确需求，确定对外开放接口</h2><p>首先应该明确控件的需求，确定有哪些功能，然后做针对性开发。这里先贴出该控件的使用方法，也是为了更好地认识控件的需求。<br><strong>1.布局文件添加</strong></p><pre><code class="hljs vim">&lt;RelativeLayout xmln<span class="hljs-variable">s:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span>    xmln<span class="hljs-variable">s:tools</span>=<span class="hljs-string">&quot;http://schemas.android.com/tools&quot;</span>    android:layout_width=<span class="hljs-string">&quot;match_parent&quot;</span>    android:layout_height=<span class="hljs-string">&quot;match_parent&quot;</span>    tool<span class="hljs-variable">s:context</span>=<span class="hljs-string">&quot;.MainActivity&quot;</span>&gt;    &lt;<span class="hljs-keyword">com</span>.zhpan.lockview.<span class="hljs-keyword">view</span>.LockView        android:id=<span class="hljs-string">&quot;@+id/lock_view&quot;</span>        android:layout_width=<span class="hljs-string">&quot;wrap_content&quot;</span>        android:layout_height=<span class="hljs-string">&quot;wrap_content&quot;</span>        android:layout_centerInParent=<span class="hljs-string">&quot;true&quot;</span> /&gt;&lt;/RelativeLayout&gt;</code></pre><p><strong>2.设置操作的监听事件。</strong>代码如下：</p><pre><code class="hljs less"><span class="hljs-selector-tag">mLockView</span><span class="hljs-selector-class">.setOnLockOperateListener</span>(new OnLockOperateListener() &#123;     <span class="hljs-variable">@Override</span>     public void onLockPrepared() &#123;<span class="hljs-comment">//  上锁就绪</span>              &#125;     <span class="hljs-variable">@Override</span>     public void onUnLockPrepared() &#123;<span class="hljs-comment">//  开锁就绪</span>     &#125;     <span class="hljs-variable">@Override</span>     public void onLockStart() &#123;<span class="hljs-comment">// 开始上锁</span>     &#125;     <span class="hljs-variable">@Override</span>     public void onUnlockStart() &#123;<span class="hljs-comment">// 开始开锁</span>     &#125;     <span class="hljs-variable">@Override</span>     public void onNotPrepared() &#123;<span class="hljs-comment">// 上下滑动距离未达到就绪状态</span>     &#125; &#125;);</code></pre><p><strong>3.对外开放接口</strong></p><pre><code class="hljs reasonml"><span class="hljs-comment">// 设置蓝牙是否连接</span>mLockView.set<span class="hljs-constructor">BluetoothConnect(<span class="hljs-params">false</span>)</span>;<span class="hljs-comment">// 设置上锁状态</span>mLockView.set<span class="hljs-constructor">LockState(<span class="hljs-params">isLock</span>)</span>;<span class="hljs-comment">// 设置View是否可以滑动</span>mLockView.set<span class="hljs-constructor">CanSlide(<span class="hljs-params">true</span>)</span><span class="hljs-comment">// 设置滑动阻尼大小</span>mLockView.set<span class="hljs-constructor">Damping(1.7)</span><span class="hljs-comment">// 设置View中心文字</span>mLockView.set<span class="hljs-constructor">Text(<span class="hljs-string">&quot;已上锁&quot;</span>)</span>;<span class="hljs-comment">// 设置中心大圆的颜色</span>mLockView.setCircleColor<span class="hljs-comment">// 开启心跳动画</span>mLockView.start<span class="hljs-constructor">Wave()</span>;<span class="hljs-comment">// 停止心跳动画</span>mLockView.stop<span class="hljs-constructor">Wave()</span>;<span class="hljs-comment">// 是否正在搜索/连接蓝牙</span>mLockView.connecting(<span class="hljs-literal">true</span>);<span class="hljs-comment">// 点击事件监听（只有在未连接蓝牙时有效）</span>mLockView.set<span class="hljs-constructor">OnClickListener(<span class="hljs-params">new</span> View.OnClickListener()</span> &#123;         @Override         public void on<span class="hljs-constructor">Click(View <span class="hljs-params">v</span>)</span> &#123;                      &#125;     &#125;);</code></pre><p>我们来总结下控件中需要实现的功能：</p><ol><li>控件布局的实现。</li><li>蓝牙未连接时，只能点击而不能滑动。</li><li>点击事件以及连接中动画。</li><li>更改连接状态。</li><li>实现上下弹性滑动，且需要控制滑动边界。</li><li>滑动事件回掉。</li><li>心跳动画实现。</li></ol><p>以上几点就是我们要完成的核心功能，有了需求之后就直接进入主题来实现我们想要的效果吧。</p><h2 id="二、分析控件，初步实现控件布局"><a href="#二、分析控件，初步实现控件布局" class="headerlink" title="二、分析控件，初步实现控件布局"></a>二、分析控件，初步实现控件布局</h2><p>分析上图的效果发现，中间的View是可滑动的，且覆盖在上下小圆点的上面。对于这种效果直接继承View实现起来会不太方便。因此我们可以想到利用自定义ViewGroup来布局页面。这么一来使开发简单了许多。那么接下来先新建一个layout_oval_lock.xml的布局为文件，并采用FrameLayout来布局控件，这样就实现了层次叠加效果，FrameLayout内部是两个自定义View，我们可以暂且搁置不管，后面会讲到如何实现。布局文件如下：</p><pre><code class="hljs stylus">&lt;FrameLayout xmlns:android=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span>    android:layout_width=<span class="hljs-string">&quot;match_parent&quot;</span>    android:layout_height=<span class="hljs-string">&quot;match_parent&quot;</span>    xmlns:app=<span class="hljs-string">&quot;http://schemas.android.com/apk/res-auto&quot;</span>    android:orientation=<span class="hljs-string">&quot;vertical&quot;</span>&gt;    &lt;com<span class="hljs-selector-class">.zhpan</span><span class="hljs-selector-class">.lockview</span><span class="hljs-selector-class">.view</span>.CircleView        android:id=<span class="hljs-string">&quot;@+id/green_cv&quot;</span>        android:layout_width=<span class="hljs-string">&quot;15dp&quot;</span>        android:layout_height=<span class="hljs-string">&quot;15dp&quot;</span>        android:layout_marginTop=<span class="hljs-string">&quot;110dp&quot;</span>        app:circle_color=<span class="hljs-string">&quot;@color/green&quot;</span>        android:layout_gravity=<span class="hljs-string">&quot;center&quot;</span>/&gt;    &lt;com<span class="hljs-selector-class">.zhpan</span><span class="hljs-selector-class">.lockview</span><span class="hljs-selector-class">.view</span>.CircleView        android:id=<span class="hljs-string">&quot;@+id/red_cv&quot;</span>        android:layout_width=<span class="hljs-string">&quot;15dp&quot;</span>        android:layout_height=<span class="hljs-string">&quot;15dp&quot;</span>        app:circle_color=<span class="hljs-string">&quot;@color/red&quot;</span>        android:layout_marginTop=<span class="hljs-string">&quot;-110dp&quot;</span>        android:layout_gravity=<span class="hljs-string">&quot;center&quot;</span>/&gt;    &lt;com<span class="hljs-selector-class">.zhpan</span><span class="hljs-selector-class">.lockview</span><span class="hljs-selector-class">.view</span>.CircleWaveView        android:id=<span class="hljs-string">&quot;@+id/circle_wave_view&quot;</span>        android:layout_width=<span class="hljs-string">&quot;220dp&quot;</span>        android:layout_height=<span class="hljs-string">&quot;300dp&quot;</span>        android:layout_gravity=<span class="hljs-string">&quot;center&quot;</span>        android:<span class="hljs-attribute">padding</span>=<span class="hljs-string">&quot;20dp&quot;</span>/&gt;    &lt;ProgressBar        android:id=<span class="hljs-string">&quot;@+id/progress&quot;</span>        android:layout_width=<span class="hljs-string">&quot;30dp&quot;</span>        android:layout_height=<span class="hljs-string">&quot;30dp&quot;</span>        android:<span class="hljs-attribute">visibility</span>=<span class="hljs-string">&quot;gone&quot;</span>        android:indeterminateTint=<span class="hljs-string">&quot;@color/white&quot;</span>        android:layout_gravity=<span class="hljs-string">&quot;center&quot;</span>/&gt;&lt;/FrameLayout&gt;</code></pre><p>接下来新建一个LockView类并继承FrameLayout。LockView与 上边layout_oval_lock的布局文件关联，并重写相应的方法。代码如下：</p><pre><code class="hljs reasonml">public <span class="hljs-constructor">LockView(Context <span class="hljs-params">context</span>)</span> &#123;        this(context, null);    &#125;    public <span class="hljs-constructor">LockView(Context <span class="hljs-params">context</span>, AttributeSet <span class="hljs-params">attrs</span>)</span> &#123;        this(context, attrs, <span class="hljs-number">0</span>);    &#125;    public <span class="hljs-constructor">LockView(Context <span class="hljs-params">context</span>, AttributeSet <span class="hljs-params">attrs</span>, <span class="hljs-params">int</span> <span class="hljs-params">defStyleAttr</span>)</span> &#123;        super(context, attrs, defStyleAttr);        init(context, attrs);    &#125;    <span class="hljs-keyword">private</span> void init(Context context, AttributeSet attrs) &#123;        mTouchSlop = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ViewConfiguration</span>.</span></span>get(context).get<span class="hljs-constructor">ScaledTouchSlop()</span>;        View view = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">View</span>.</span></span>inflate(context, <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">R</span>.</span></span>layout.layout_oval_lock, this);        mCircleWaveView = (CircleWaveView) view.find<span class="hljs-constructor">ViewById(R.<span class="hljs-params">id</span>.<span class="hljs-params">circle_wave_view</span>)</span>;        mCircleView = (CircleView) view.find<span class="hljs-constructor">ViewById(R.<span class="hljs-params">id</span>.<span class="hljs-params">green_cv</span>)</span>;        distance = ((LayoutParams) mCircleView.get<span class="hljs-constructor">LayoutParams()</span>).topMargin;        mProgressBar = (ProgressBar) view.find<span class="hljs-constructor">ViewById(R.<span class="hljs-params">id</span>.<span class="hljs-params">progress</span>)</span>;        mScroller = mCircleWaveView.get<span class="hljs-constructor">Scroller()</span>;        mContext = context;        mCircleWaveView.set<span class="hljs-constructor">OnClickListener(<span class="hljs-params">new</span> OnClickListener()</span> &#123;            @Override            public void on<span class="hljs-constructor">Click(View <span class="hljs-params">v</span>)</span> &#123;            &#125;        &#125;);    &#125;    @Override    protected void on<span class="hljs-constructor">Layout(<span class="hljs-params">boolean</span> <span class="hljs-params">changed</span>, <span class="hljs-params">int</span> <span class="hljs-params">l</span>, <span class="hljs-params">int</span> <span class="hljs-params">t</span>, <span class="hljs-params">int</span> <span class="hljs-params">r</span>, <span class="hljs-params">int</span> <span class="hljs-params">b</span>)</span> &#123;        View view = get<span class="hljs-constructor">ChildAt(0)</span>;        view.layout(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, get<span class="hljs-constructor">MeasuredWidth()</span>, get<span class="hljs-constructor">MeasuredHeight()</span>);    &#125;    @Override    protected void on<span class="hljs-constructor">SizeChanged(<span class="hljs-params">int</span> <span class="hljs-params">w</span>, <span class="hljs-params">int</span> <span class="hljs-params">h</span>, <span class="hljs-params">int</span> <span class="hljs-params">oldw</span>, <span class="hljs-params">int</span> <span class="hljs-params">oldh</span>)</span> &#123;        super.on<span class="hljs-constructor">SizeChanged(<span class="hljs-params">w</span>, <span class="hljs-params">h</span>, <span class="hljs-params">oldw</span>, <span class="hljs-params">oldh</span>)</span>;    &#125;</code></pre><h2 id="三-关于滑动，不得不说的事件分发"><a href="#三-关于滑动，不得不说的事件分发" class="headerlink" title="三.关于滑动，不得不说的事件分发"></a>三.关于滑动，不得不说的事件分发</h2><p>接下来就要来处理中心View的滑动了！说到滑动，避免不了的就应该想到Android中View的事件分发，那么对于滑动事件的处理我们需要重写三个方法。我想很多小伙伴肯定已经想到了！没错，就是事件分发的三个核心方法：dispatchTouchEvent、onInterceptTouchEvent、以及onTouchEvent。我觉得还是先简单来了解一下这三个方法吧，因为它确实挺重要的。</p><ul><li><strong><em>dispatchTouchEvent</em></strong>   顾名思义，这个方法就是用来对事件进行分发的。如果事件传递到了当前View，那么这个方法一定会被调用。它的返回结果受当前View的onTouchEvent或下级View的dispatchTouchEvent方法的影响，表示是否消费当前事件。</li><li><strong><em>onInterceptTouchEvent</em></strong>  这个方法在dispatchTouchEvent方法的内部被调用，用来表示是否拦截某个事件。返回结果表示是否拦截当前事件。需要注意的是View并没有该方法，这个方法仅仅存在于ViewGroup中！如果事件传递到View中，那么会直接调用该View的onTouchEvent方法。</li><li><strong><em>onTouchEvent</em></strong>  这个方法在dispatchTouchEvent方法中调用。用来处理点击事件。返回结果表示是否消费当前事件。View中的onTouchEvent方法默认会消费事件，只有当设置clickable和longClickable为false时则不会消费该事件。</li></ul><p><strong>首先来看LockView中重写的dispatchTouchEvent方法中的代码</strong>：</p><pre><code class="hljs aspectj"><span class="hljs-meta">@Override</span><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">dispatchTouchEvent</span><span class="hljs-params">(MotionEvent ev)</span> </span>&#123;    <span class="hljs-keyword">if</span> (!canSlide)        <span class="hljs-keyword">switch</span> (ev.getAction()) &#123;            <span class="hljs-keyword">case</span> ACTION_DOWN:                timestamp = System.currentTimeMillis();                <span class="hljs-keyword">break</span>;            <span class="hljs-keyword">case</span> ACTION_UP:                <span class="hljs-keyword">if</span> (System.currentTimeMillis() - timestamp &lt; 500) &#123;                    performClick();                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;                &#125;                <span class="hljs-keyword">break</span>;        &#125;    <span class="hljs-function"><span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.<span class="hljs-title">dispatchTouchEvent</span><span class="hljs-params">(ev)</span></span>;&#125;</code></pre><p>上面提到，只要有事件传递到当前的ViewGroup那么dispatchTouchEvent就会首先被调用！因此在这个方法里先来判断当前是否是可以滑动状态（蓝牙未连接时不可滑动）。如果不可以滑动，那么就去处理点击事件，我们认为ACTION_DOWN和ACTION_UP之间间隔小于500毫秒就是一次点击事件，那么就在此处调用performClick方法并消费掉当前事件，如果间隔大于500毫秒，不认为是点击事件，那么紧接着就去调用父类的dispatchTouchEvent方法。如果当前可以滑动，那么同样调用父类的dispatchTouchEvent方法来处理。</p><p><strong>接下来我们看重写的onInterceptTouchEvent方法</strong></p><pre><code class="hljs angelscript">@Override<span class="hljs-keyword">public</span> <span class="hljs-built_in">bool</span>ean onInterceptTouchEvent(MotionEvent ev) &#123;        <span class="hljs-built_in">bool</span>ean <span class="hljs-built_in">int</span>ercepted = <span class="hljs-literal">true</span>;        <span class="hljs-built_in">int</span> y = (<span class="hljs-built_in">int</span>) ev.getY();        <span class="hljs-keyword">switch</span> (ev.getAction()) &#123;            <span class="hljs-keyword">case</span> ACTION_DOWN:                <span class="hljs-built_in">int</span>ercepted = <span class="hljs-literal">false</span>;                <span class="hljs-keyword">if</span> (!mScroller.isFinished()) &#123;                    mScroller.abortAnimation();                &#125;                <span class="hljs-keyword">break</span>;            <span class="hljs-keyword">case</span> MotionEvent.ACTION_MOVE:                <span class="hljs-keyword">if</span> (Math.abs(y - mLastY) &gt; mTouchSlop) &#123;                    <span class="hljs-built_in">int</span>ercepted = <span class="hljs-literal">true</span>;                &#125;                <span class="hljs-keyword">break</span>;            <span class="hljs-keyword">case</span> MotionEvent.ACTION_UP:                <span class="hljs-built_in">int</span>ercepted = <span class="hljs-literal">false</span>;                <span class="hljs-keyword">break</span>;        &#125;        mLastY = y;        <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>ercepted;    &#125;</code></pre><p>在这个方法中我们重点来看ACTION_MOVE的时候，在这里先判断了滑动的距离是否大于mTouchSlop，这个值是认为滑动的最小距离，当大于这个值的时候就认为是滑动了。那么看此时intercepted返回了true，表示要拦截这个事件！此处拦截了这个滑动事件会怎么样呢？答案是当前View中的onTouchEvent方法被调用了！现在请将我们的目光聚焦到onTouchEvent方法中，注意前方高能！</p><p><strong>核心中最核心的onTouchEvent方法</strong></p><pre><code class="hljs reasonml">        @Override    public boolean on<span class="hljs-constructor">TouchEvent(MotionEvent <span class="hljs-params">event</span>)</span> &#123;        <span class="hljs-built_in">int</span> y = (<span class="hljs-built_in">int</span>) event.get<span class="hljs-constructor">Y()</span>;        <span class="hljs-built_in">int</span> scrollY = mCircleWaveView.get<span class="hljs-constructor">ScrollY()</span>;        switch (event.get<span class="hljs-constructor">Action()</span>) &#123;            case ACTION_DOWN:                <span class="hljs-keyword">if</span> (!mScroller.is<span class="hljs-constructor">Finished()</span>) &#123;                    mScroller.abort<span class="hljs-constructor">Animation()</span>;                &#125;                break;            case MotionEvent.ACTION_MOVE:                <span class="hljs-keyword">if</span> (!canSlide) &#123;                    return super.on<span class="hljs-constructor">TouchEvent(<span class="hljs-params">event</span>)</span>;                &#125;                <span class="hljs-built_in">int</span> deltaY = (<span class="hljs-built_in">int</span>) ((mLastY - y)<span class="hljs-operator"> / </span>damping);                <span class="hljs-keyword">if</span> (mCircleWaveView.get<span class="hljs-constructor">ScrollY()</span> &gt; mTouchSlop) &#123;                    mOption = Option.LOCK;                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (mCircleWaveView.get<span class="hljs-constructor">ScrollY()</span> &lt; -mTouchSlop) &#123;                    mOption = Option.UNLOCK;                &#125;                <span class="hljs-keyword">if</span> (<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Math</span>.</span></span>abs(scrollY) &gt; (distance - mCircleWaveView.get<span class="hljs-constructor">Radius()</span> + mCircleView.get<span class="hljs-constructor">Radius()</span>)) &#123;                    <span class="hljs-keyword">if</span> (mOption != null) &#123;                        switch (mOption) &#123;                            case LOCK:                                <span class="hljs-keyword">if</span> (mOnLockOperateListener != null)                                    mOnLockOperateListener.on<span class="hljs-constructor">LockPrepared()</span>;                                mCircleWaveView.set<span class="hljs-constructor">LockPrepared(<span class="hljs-params">true</span>)</span>;                                break;                            case UNLOCK:                                <span class="hljs-keyword">if</span> (mOnLockOperateListener != null)                                    mOnLockOperateListener.on<span class="hljs-constructor">UnLockPrepared()</span>;                                mCircleWaveView.set<span class="hljs-constructor">UnLockPrePared(<span class="hljs-params">true</span>)</span>;                                break;                        &#125;                    &#125;                &#125; <span class="hljs-keyword">else</span> &#123;                    mCircleWaveView.set<span class="hljs-constructor">UnLockPrePared(<span class="hljs-params">false</span>)</span>;                    mCircleWaveView.set<span class="hljs-constructor">LockPrepared(<span class="hljs-params">false</span>)</span>;                    mOnLockOperateListener.on<span class="hljs-constructor">NotPrepared()</span>;                   <span class="hljs-comment">/* if (isLock()) &#123;</span><span class="hljs-comment">                        mCircleWaveView.setText(mContext.getResources().getString(R.string.device_control_unlock));</span><span class="hljs-comment">                    &#125; else &#123;</span><span class="hljs-comment">                        mCircleWaveView.setText(mContext.getResources().getString(R.string.device_control_lock));</span><span class="hljs-comment">                    &#125;*/</span><span class="hljs-comment">//                    isOperating = false;</span>                &#125;                <span class="hljs-comment">/**</span><span class="hljs-comment">                 * 控制滑动边界</span><span class="hljs-comment">                 */</span>                <span class="hljs-built_in">int</span> border = (distance - mCircleWaveView.get<span class="hljs-constructor">Radius()</span> + mCircleView.get<span class="hljs-constructor">Radius()</span>) +                        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DensityUtils</span>.</span></span>dp2px(mContext, <span class="hljs-number">25</span>);<span class="hljs-comment">//  可上下滑动的最大距离</span>                <span class="hljs-comment">//  当前上下滑动的距离</span>                <span class="hljs-built_in">int</span> slideHeight = deltaY + mCircleWaveView.get<span class="hljs-constructor">ScrollY()</span>;                <span class="hljs-keyword">if</span> (slideHeight &gt; border) &#123;                    mCircleWaveView.scroll<span class="hljs-constructor">To(0, <span class="hljs-params">border</span>)</span>;                    return <span class="hljs-literal">true</span>;                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (slideHeight + border &lt; <span class="hljs-number">0</span>) &#123;                    mCircleWaveView.scroll<span class="hljs-constructor">To(0, -<span class="hljs-params">border</span>)</span>;                    return <span class="hljs-literal">true</span>;                &#125;                mCircleWaveView.scroll<span class="hljs-constructor">By(0, <span class="hljs-params">deltaY</span>)</span>;                break;            case MotionEvent.ACTION_UP:                mCircleWaveView.set<span class="hljs-constructor">UnLockPrePared(<span class="hljs-params">false</span>)</span>;                mCircleWaveView.set<span class="hljs-constructor">LockPrepared(<span class="hljs-params">false</span>)</span>;                scrollY = mCircleWaveView.get<span class="hljs-constructor">ScrollY()</span>;                <span class="hljs-keyword">if</span> (<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Math</span>.</span></span>abs(scrollY) &gt; (distance - mCircleWaveView.get<span class="hljs-constructor">Radius()</span> + mCircleView.get<span class="hljs-constructor">Radius()</span>)<span class="hljs-operator"> &amp;&amp; </span>mOption != null) &#123;                    switch (mOption) &#123;                        case LOCK:                            <span class="hljs-keyword">if</span> (mOnLockOperateListener != null)                                mOnLockOperateListener.on<span class="hljs-constructor">LockStart()</span>;                            break;                        case UNLOCK:                            <span class="hljs-keyword">if</span> (mOnLockOperateListener != null)                                mOnLockOperateListener.on<span class="hljs-constructor">UnlockStart()</span>;                            break;                    &#125;                &#125;                mCircleWaveView.smooth<span class="hljs-constructor">Scroll(0, 0)</span>;                break;        &#125;        mLastY = y;        return super.on<span class="hljs-constructor">TouchEvent(<span class="hljs-params">event</span>)</span>;    &#125;</code></pre><p>看到这个方法中这么多代码不知道各位是否已经懵逼？（好吧，我承认，这地方代码写的确实比较乱）不过没关系，其实细细分析来还是不难理解的！同样，我们选择比较重要的点来看。首先来看ACTION_MOVE的时候，在这里先判断了是否可以滑动（其实不可以滑动的情况下应该不会走到这个方法，但是为了严谨还是加了判断），如果不能滑动则下边的逻辑全都不会再走了。接下来<br>通过判断滑动的方向来确定是要开锁还是上锁，并根据滑动距离来给出回调处理。即当中心圆CircleWaveView向上或向下滑动并完全覆盖到上/下的小圆点时则会回掉上锁就绪或者开锁就绪（onLockPrepared、onUnLockPrepared）的方法。此时释放CircleWaveView，则会回调开锁或者上锁（onLockStart、onUnlockStart）的方法。如果CircleWaveView在完全覆盖到上/下的小圆点的状态下，再向反方向滑动至未完全覆盖小圆点，此时则会回掉未就绪（onNotPrepared）的方法。下边贴一下回调接口，一共五个方法，如下：</p><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span>  <span class="hljs-title">OnLockOperateListener</span> &#123;   <span class="hljs-comment">// 上锁就绪</span>   <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">onLockPrepared</span>(<span class="hljs-params"></span>)</span>;   <span class="hljs-comment">// 开锁就绪</span>   <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">onUnLockPrepared</span>(<span class="hljs-params"></span>)</span>;   <span class="hljs-comment">// 开始上锁</span>   <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">onLockStart</span>(<span class="hljs-params"></span>)</span>;   <span class="hljs-comment">// 开始开锁</span>   <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">onUnlockStart</span>(<span class="hljs-params"></span>)</span>;   <span class="hljs-comment">// 未就绪</span>   <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">onNotPrepared</span>(<span class="hljs-params"></span>)</span>;&#125;</code></pre><p>接下来是通过一系列计算来控制CircleWaveView的滑动边界。思路大致如此：首先根据CircleWaveView和上下小圆的位置来计算出可上下滑动的最大距离border。然后计算当CircleWaveView滑动的距离超过border时就强制将其滚动到border位置，已达到固定的效果。代码如下：</p><pre><code class="hljs reasonml"><span class="hljs-comment">/**</span><span class="hljs-comment">     * 控制滑动边界</span><span class="hljs-comment">     */</span>   <span class="hljs-built_in">int</span> border = (distance - mCircleWaveView.get<span class="hljs-constructor">Radius()</span> + mCircleView.get<span class="hljs-constructor">Radius()</span>) +                       <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DensityUtils</span>.</span></span>dp2px(mContext, <span class="hljs-number">25</span>);<span class="hljs-comment">//  可上下滑动的最大距离</span>   <span class="hljs-built_in">int</span> deltaY = (<span class="hljs-built_in">int</span>) ((mLastY - y)<span class="hljs-operator"> / </span>damping);   <span class="hljs-comment">//  当前上下滑动的距离</span>   <span class="hljs-built_in">int</span> slideHeight = deltaY + mCircleWaveView.get<span class="hljs-constructor">ScrollY()</span>;   <span class="hljs-keyword">if</span> (slideHeight &gt; border) &#123;        mCircleWaveView.scroll<span class="hljs-constructor">To(0, <span class="hljs-params">border</span>)</span>;        return <span class="hljs-literal">true</span>;       &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (slideHeight + border &lt; <span class="hljs-number">0</span>) &#123;         mCircleWaveView.scroll<span class="hljs-constructor">To(0, -<span class="hljs-params">border</span>)</span>;         return <span class="hljs-literal">true</span>;       &#125;   mCircleWaveView.scroll<span class="hljs-constructor">By(0, <span class="hljs-params">deltaY</span>)</span>;</code></pre><p>然后是实现CircleWaveView的弹性滑动，这里我们给CircleWaveView加了一个弹性滑动和阻尼效果。弹性滑动是在CircleWaveView中通过Scroller来实现的，CircleWaveView暴漏出来smoothScroll的弹性滑动接口供在LockView中调用。这点我们在后面讲解CircleWaveView时再说。而阻尼滑动则是将原滑动距离除以阻尼系数以减小滑动距离从而产生阻尼效果。<br>最后来看ACTION_UP，同样是根据Y轴滑动距离与滑动方向回掉对应的方法，并将CircleWaveView恢复到原位。代码如下：</p><pre><code class="hljs yaml"><span class="hljs-string">scrollY</span> <span class="hljs-string">=</span> <span class="hljs-string">mCircleWaveView.getScrollY();</span><span class="hljs-string">if</span> <span class="hljs-string">(Math.abs(scrollY)</span> <span class="hljs-string">&gt;</span> <span class="hljs-string">(distance</span> <span class="hljs-bullet">-</span> <span class="hljs-string">mCircleWaveView.getRadius()</span> <span class="hljs-string">+</span> <span class="hljs-string">mCircleView.getRadius())</span> <span class="hljs-string">&amp;&amp;</span> <span class="hljs-string">mOption</span> <span class="hljs-type">!=</span> <span class="hljs-literal">null</span><span class="hljs-string">)</span> &#123;   <span class="hljs-string">switch</span> <span class="hljs-string">(mOption)</span> &#123;         <span class="hljs-attr">case LOCK:</span>              <span class="hljs-string">if</span> <span class="hljs-string">(mOnLockOperateListener</span> <span class="hljs-type">!=</span> <span class="hljs-literal">null</span><span class="hljs-string">)</span>                   <span class="hljs-string">mOnLockOperateListener.onLockStart();</span>          <span class="hljs-string">break;</span>          <span class="hljs-attr">case UNLOCK:</span>              <span class="hljs-string">if</span> <span class="hljs-string">(mOnLockOperateListener</span> <span class="hljs-type">!=</span> <span class="hljs-literal">null</span><span class="hljs-string">)</span>                   <span class="hljs-string">mOnLockOperateListener.onUnlockStart();</span>          <span class="hljs-string">break;</span>    &#125;<span class="hljs-string">mCircleWaveView.smoothScroll(0</span>, <span class="hljs-number">0</span><span class="hljs-string">);</span></code></pre><h2 id="四-实现自定义CircleWaveView"><a href="#四-实现自定义CircleWaveView" class="headerlink" title="四. 实现自定义CircleWaveView"></a>四. 实现自定义CircleWaveView</h2><p>关于自定义CircleWaveView就不具体来讲了，因为关于自定义View都是一样的步骤。这里我们只选取几个重要的地方来说。1.CircleWaveView中内容的绘制。2.关于弹性滑动的实现。3.心跳动画的实现以及状态改变的扩散动画。</p><p><strong>1.CircleWaveView中内容的绘制。</strong></p><p><strong>绘制主体圆。</strong>主要分为几种情况：<br>a.蓝牙未连接，且未能获取到网络数据，背景色为灰色。<br>b.蓝牙未连接，且能获取到网络数据，背景色为淡绿色或淡红色。<br>c.蓝牙已连接，开锁状态为绿色，未开锁状态为红色。<br>d.上拉上锁就绪状态为深红色，下拉开锁就绪状态为深绿色。</p><p>结合以上需求有如下代码：</p><pre><code class="hljs reasonml"><span class="hljs-keyword">private</span> void draw<span class="hljs-constructor">Circle(Canvas <span class="hljs-params">canvas</span>)</span> &#123;        mPaint.set<span class="hljs-constructor">Color(<span class="hljs-params">circleColor</span>)</span>;        <span class="hljs-built_in">int</span> verticalCenter = get<span class="hljs-constructor">Height()</span><span class="hljs-operator"> / </span><span class="hljs-number">2</span>;        <span class="hljs-built_in">int</span> horizontalCenter = get<span class="hljs-constructor">Width()</span><span class="hljs-operator"> / </span><span class="hljs-number">2</span>;        <span class="hljs-built_in">int</span> mRadius = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Math</span>.</span></span>min(verticalCenter, horizontalCenter) - <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Math</span>.</span></span>min(verticalCenter, horizontalCenter)<span class="hljs-operator"> / </span><span class="hljs-number">5</span>;        radius = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Math</span>.</span></span>min(verticalCenter, horizontalCenter) - <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Math</span>.</span></span>min(verticalCenter, horizontalCenter)<span class="hljs-operator"> / </span><span class="hljs-number">5</span>;        <span class="hljs-keyword">if</span> (transforming) &#123;            mPaint.set<span class="hljs-constructor">Color(<span class="hljs-params">getResources</span>()</span>.get<span class="hljs-constructor">Color(R.<span class="hljs-params">color</span>.<span class="hljs-params">green</span>)</span>);            canvas.draw<span class="hljs-constructor">Circle(<span class="hljs-params">mPieCenterX</span>, <span class="hljs-params">mPieCenterY</span>, <span class="hljs-params">mRadius</span>, <span class="hljs-params">mPaint</span>)</span>;            mRadius = isLock ? transformDelta : mRadius - transformDelta;            mPaint.set<span class="hljs-constructor">Color(<span class="hljs-params">getResources</span>()</span>.get<span class="hljs-constructor">Color(R.<span class="hljs-params">color</span>.<span class="hljs-params">red</span>)</span>);            canvas.draw<span class="hljs-constructor">Circle(<span class="hljs-params">mPieCenterX</span>, <span class="hljs-params">mPieCenterY</span>, <span class="hljs-params">mRadius</span>, <span class="hljs-params">mPaint</span>)</span>;        &#125; <span class="hljs-keyword">else</span> &#123;            mRadius = mRadius - waveDelta;            <span class="hljs-keyword">if</span> (!isBluetoothConnect) &#123;                <span class="hljs-keyword">if</span> (isNoNetData) &#123;                    mPaint.set<span class="hljs-constructor">Color(<span class="hljs-params">getColor</span>(R.<span class="hljs-params">color</span>.<span class="hljs-params">gray</span>)</span>);                &#125; <span class="hljs-keyword">else</span>                    mPaint.set<span class="hljs-constructor">Color(<span class="hljs-params">isLock</span> ? <span class="hljs-params">getColor</span>(R.<span class="hljs-params">color</span>.<span class="hljs-params">redLight</span>)</span> : get<span class="hljs-constructor">Color(R.<span class="hljs-params">color</span>.<span class="hljs-params">greenLight</span>)</span>);            &#125; <span class="hljs-keyword">else</span> &#123;                <span class="hljs-keyword">if</span> (isLockPrepared) &#123;                    mPaint.set<span class="hljs-constructor">Color(<span class="hljs-params">getColor</span>(R.<span class="hljs-params">color</span>.<span class="hljs-params">redDark</span>)</span>);                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (isUnLockPrePared) &#123;                    mPaint.set<span class="hljs-constructor">Color(<span class="hljs-params">getColor</span>(R.<span class="hljs-params">color</span>.<span class="hljs-params">greenDark</span>)</span>);                &#125; <span class="hljs-keyword">else</span> &#123;                    mPaint.set<span class="hljs-constructor">Color(<span class="hljs-params">isLock</span> ? <span class="hljs-params">getColor</span>(R.<span class="hljs-params">color</span>.<span class="hljs-params">red</span>)</span> : get<span class="hljs-constructor">Color(R.<span class="hljs-params">color</span>.<span class="hljs-params">green</span>)</span>);                &#125;            &#125;            canvas.draw<span class="hljs-constructor">Circle(<span class="hljs-params">mPieCenterX</span>, <span class="hljs-params">mPieCenterY</span>, <span class="hljs-params">mRadius</span>, <span class="hljs-params">mPaint</span>)</span>;        &#125;    &#125;</code></pre><p><strong>绘制CircleWaveView中上下箭头。</strong>  关于箭头绘制，注释部分是通过Path来绘制的，但是发现效果不太好，绘制三角形圆角比较麻烦，所以后台改为了直接在canvas上绘制Bitmap来实现。代码如下：</p><pre><code class="hljs yaml"><span class="hljs-string">//</span>  <span class="hljs-string">绘制圆中两个三角</span>    <span class="hljs-string">private</span> <span class="hljs-string">void</span> <span class="hljs-string">drawTriangle(Canvas</span> <span class="hljs-string">canvas)</span> &#123;        <span class="hljs-string">int</span> <span class="hljs-string">left</span> <span class="hljs-string">=</span> <span class="hljs-string">(mWidth</span> <span class="hljs-bullet">-</span> <span class="hljs-string">arrowUp.getWidth())</span> <span class="hljs-string">/</span> <span class="hljs-number">2</span><span class="hljs-string">;</span>        <span class="hljs-string">canvas.drawBitmap(arrowUp</span>, <span class="hljs-string">left</span>, <span class="hljs-string">mHeight</span> <span class="hljs-string">/</span> <span class="hljs-number">2</span> <span class="hljs-bullet">-</span> <span class="hljs-string">radius</span> <span class="hljs-string">+</span> <span class="hljs-string">dp13</span>, <span class="hljs-string">mPaint);</span>        <span class="hljs-string">canvas.drawBitmap(arrowDown</span>, <span class="hljs-string">left</span>, <span class="hljs-string">mHeight</span> <span class="hljs-string">/</span> <span class="hljs-number">2</span> <span class="hljs-string">+</span> <span class="hljs-string">radius</span> <span class="hljs-bullet">-</span> <span class="hljs-string">dp13</span> <span class="hljs-bullet">-</span> <span class="hljs-string">arrowDown.getHeight()</span>, <span class="hljs-string">mPaint);</span>        <span class="hljs-string">/*int</span> <span class="hljs-string">radius</span> <span class="hljs-string">=</span> <span class="hljs-string">Math.min(mHeight</span>, <span class="hljs-string">mWidth)</span> <span class="hljs-string">/</span> <span class="hljs-number">2</span> <span class="hljs-bullet">-</span> <span class="hljs-string">Math.min(mHeight</span>, <span class="hljs-string">mWidth)</span> <span class="hljs-string">/</span> <span class="hljs-number">8</span><span class="hljs-string">;</span>        <span class="hljs-string">mPaintTrangel.setStyle(Paint.Style.FILL);</span>        <span class="hljs-string">mPaintTrangel.setShadowLayer(4</span>, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <span class="hljs-string">Color.GRAY);</span>        <span class="hljs-string">//</span>  <span class="hljs-string">三角形顶点到圆边的距离</span>        <span class="hljs-string">int</span> <span class="hljs-string">h0</span> <span class="hljs-string">=</span> <span class="hljs-string">DensityUtils.dp2px(mContext</span>, <span class="hljs-number">10</span><span class="hljs-string">);</span>        <span class="hljs-string">//</span>  <span class="hljs-string">三角形高</span>        <span class="hljs-string">int</span> <span class="hljs-string">h1</span> <span class="hljs-string">=</span> <span class="hljs-string">DensityUtils.dp2px(mContext</span>, <span class="hljs-number">12</span><span class="hljs-string">);</span>        <span class="hljs-string">//</span>  <span class="hljs-string">三角形底边长</span>        <span class="hljs-string">int</span> <span class="hljs-string">w</span> <span class="hljs-string">=</span> <span class="hljs-string">DensityUtils.dp2px(mContext</span>, <span class="hljs-number">14</span><span class="hljs-string">);</span>        <span class="hljs-string">mPaintTrangel.setColor(getResources().getColor(R.color.transparent_33));</span>        <span class="hljs-string">mPath.moveTo(mWidth</span> <span class="hljs-string">/</span> <span class="hljs-number">2</span>, <span class="hljs-string">mHeight</span> <span class="hljs-string">/</span> <span class="hljs-number">2</span> <span class="hljs-bullet">-</span> <span class="hljs-string">(radius</span> <span class="hljs-bullet">-</span> <span class="hljs-string">h0));</span>        <span class="hljs-string">mPath.lineTo(mWidth</span> <span class="hljs-string">/</span> <span class="hljs-number">2</span> <span class="hljs-bullet">-</span> <span class="hljs-string">w</span>, <span class="hljs-string">mHeight</span> <span class="hljs-string">/</span> <span class="hljs-number">2</span> <span class="hljs-bullet">-</span> <span class="hljs-string">(radius</span> <span class="hljs-bullet">-</span> <span class="hljs-string">h1</span> <span class="hljs-bullet">-</span> <span class="hljs-string">h0));</span>        <span class="hljs-string">mPath.lineTo(mWidth</span> <span class="hljs-string">/</span> <span class="hljs-number">2</span> <span class="hljs-string">+</span> <span class="hljs-string">w</span>, <span class="hljs-string">mHeight</span> <span class="hljs-string">/</span> <span class="hljs-number">2</span> <span class="hljs-bullet">-</span> <span class="hljs-string">(radius</span> <span class="hljs-bullet">-</span> <span class="hljs-string">h1</span> <span class="hljs-bullet">-</span> <span class="hljs-string">h0));</span>        <span class="hljs-string">canvas.drawPath(mPath</span>, <span class="hljs-string">mPaintTrangel);</span>        <span class="hljs-string">mPaintTrangel.setShadowLayer(4</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-3</span>, <span class="hljs-string">Color.GRAY);</span>        <span class="hljs-string">mPath.moveTo(mWidth</span> <span class="hljs-string">/</span> <span class="hljs-number">2</span>, <span class="hljs-string">mHeight</span> <span class="hljs-string">/</span> <span class="hljs-number">2</span> <span class="hljs-string">+</span> <span class="hljs-string">(radius</span> <span class="hljs-bullet">-</span> <span class="hljs-string">h0));</span>        <span class="hljs-string">mPath.lineTo(mWidth</span> <span class="hljs-string">/</span> <span class="hljs-number">2</span> <span class="hljs-bullet">-</span> <span class="hljs-string">w</span>, <span class="hljs-string">mHeight</span> <span class="hljs-string">/</span> <span class="hljs-number">2</span> <span class="hljs-string">+</span> <span class="hljs-string">(radius</span> <span class="hljs-bullet">-</span> <span class="hljs-string">h1</span> <span class="hljs-bullet">-</span> <span class="hljs-string">h0));</span>        <span class="hljs-string">mPath.lineTo(mWidth</span> <span class="hljs-string">/</span> <span class="hljs-number">2</span> <span class="hljs-string">+</span> <span class="hljs-string">w</span>, <span class="hljs-string">mHeight</span> <span class="hljs-string">/</span> <span class="hljs-number">2</span> <span class="hljs-string">+</span> <span class="hljs-string">(radius</span> <span class="hljs-bullet">-</span> <span class="hljs-string">h1</span> <span class="hljs-bullet">-</span> <span class="hljs-string">h0));</span>        <span class="hljs-string">canvas.drawPath(mPath</span>, <span class="hljs-string">mPaintTrangel);*/</span>    &#125;</code></pre><p><strong>绘制CircleWaveView中心的文字</strong> 中心文字分为两种情况：当蓝牙未连接时，显示为两行。当蓝牙已连接时显示为一行。绘制思路是先计算出中心基线，然后再来分情况实现。代码如下：</p><pre><code class="hljs reasonml"><span class="hljs-comment">//  绘制圆中的文字</span>    <span class="hljs-keyword">private</span> void draw<span class="hljs-constructor">Text(Canvas <span class="hljs-params">canvas</span>)</span> &#123;        <span class="hljs-keyword">if</span> (isConnecting) return;        <span class="hljs-keyword">if</span> (<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">TextUtils</span>.</span></span>is<span class="hljs-constructor">Empty(<span class="hljs-params">mText</span>)</span>) &#123; <span class="hljs-comment">//   绘制单行文字</span>            String text = mContext.get<span class="hljs-constructor">Resources()</span>.get<span class="hljs-constructor">String(R.<span class="hljs-params">string</span>.<span class="hljs-params">ble_not_connect</span>)</span>;            canvas.draw<span class="hljs-constructor">Text(<span class="hljs-params">text</span>, <span class="hljs-params">mPieCenterX</span>, <span class="hljs-params">getBaseline</span>(<span class="hljs-params">text</span>)</span>, mPaintText);            return;        &#125;        <span class="hljs-keyword">if</span> (isBluetoothConnect) &#123;   <span class="hljs-comment">//   绘制单行文字</span>            canvas.draw<span class="hljs-constructor">Text(<span class="hljs-params">mText</span>, <span class="hljs-params">mPieCenterX</span>, <span class="hljs-params">getBaseline</span>(<span class="hljs-params">mText</span>)</span>, mPaintText);        &#125; <span class="hljs-keyword">else</span> &#123;    <span class="hljs-comment">//   绘制两行文字</span>            String text = mContext.get<span class="hljs-constructor">Resources()</span>.get<span class="hljs-constructor">String(R.<span class="hljs-params">string</span>.<span class="hljs-params">ble_not_connect</span>)</span>;            <span class="hljs-built_in">int</span> baseline = get<span class="hljs-constructor">Baseline(<span class="hljs-params">text</span>)</span>;            canvas.draw<span class="hljs-constructor">Text(<span class="hljs-params">text</span>, <span class="hljs-params">mPieCenterX</span>, <span class="hljs-params">baseline</span> - 30, <span class="hljs-params">mPaintText</span>)</span>;            mPaintText.set<span class="hljs-constructor">TextSize(DensityUtils.<span class="hljs-params">dp2px</span>(<span class="hljs-params">mContext</span>, 12)</span>);            canvas.draw<span class="hljs-constructor">Text(<span class="hljs-params">mText</span>, <span class="hljs-params">mPieCenterX</span>, <span class="hljs-params">baseline</span> + 30, <span class="hljs-params">mPaintText</span>)</span>;        &#125;    &#125;    <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> get<span class="hljs-constructor">Baseline(String <span class="hljs-params">text</span>)</span> &#123;        mPaintText.set<span class="hljs-constructor">TextSize(<span class="hljs-params">mTextSize</span>)</span>;        mPaintText.get<span class="hljs-constructor">TextBounds(<span class="hljs-params">text</span>, 0, <span class="hljs-params">text</span>.<span class="hljs-params">length</span>()</span>, bounds);        Paint.FontMetricsInt fontMetricsInt = mPaintText.get<span class="hljs-constructor">FontMetricsInt()</span>;        return (get<span class="hljs-constructor">MeasuredHeight()</span> - fontMetricsInt.bottom + fontMetricsInt.top)<span class="hljs-operator"> / </span><span class="hljs-number">2</span>                - fontMetricsInt.top;    &#125;</code></pre><p><strong>2.关于弹性滑动的实现。</strong> 关于滑动，通常我们会想到用ScrollTo或ScrollBy来实现。但由于这两个方法实现滑动都是瞬间完成的，因此滑动看起来会比较生硬，体验也很不好。因此想到可以使用Scroller来做一个滑动延迟实现带有弹性效果的滑动。由于Scroller本身时无法实现滑动的，因此还必须配合computeScroll方法共同完成。这里我们封装一个smoothScroll方法，提供给LockView调用。具体代码如下：</p><pre><code class="hljs reasonml">public void smooth<span class="hljs-constructor">Scroll(<span class="hljs-params">int</span> <span class="hljs-params">destX</span>, <span class="hljs-params">int</span> <span class="hljs-params">destY</span>)</span> &#123;        <span class="hljs-built_in">int</span> scrollY = get<span class="hljs-constructor">ScrollY()</span>;        <span class="hljs-built_in">int</span> delta = destY - scrollY;        mScroller.start<span class="hljs-constructor">Scroll(<span class="hljs-params">destX</span>, <span class="hljs-params">scrollY</span>, 0, <span class="hljs-params">delta</span>, 400)</span>;        invalidate<span class="hljs-literal">()</span>;    &#125;    @Override    public void compute<span class="hljs-constructor">Scroll()</span> &#123;        <span class="hljs-keyword">if</span> (mScroller.compute<span class="hljs-constructor">ScrollOffset()</span>) &#123;            scroll<span class="hljs-constructor">To(<span class="hljs-params">mScroller</span>.<span class="hljs-params">getCurrX</span>()</span>, mScroller.get<span class="hljs-constructor">CurrY()</span>);            post<span class="hljs-constructor">Invalidate()</span>;        &#125;    &#125;</code></pre><p><strong>3.心跳动画的实现以及状态改变的扩散动画。</strong> </p><p>首先来看心跳动画的实现，这里使用属性动画，首先为ValueAnimator设置从0到1再到0的一个数值变化，并且周期时间设置为600毫秒、重复次数设置为ValueAnimator.INFINITE，即为无限次循环。通过ValueAnimator中不断变化的value来计算圆半径的大小，并通过invalidate()方法不断重绘View，从而达到一个心跳动画的效果。代码如下：</p><pre><code class="hljs reasonml"><span class="hljs-comment">//  开始心跳动画</span>public void start<span class="hljs-constructor">Wave()</span> &#123;        <span class="hljs-keyword">if</span> (animator != null<span class="hljs-operator"> &amp;&amp; </span>animator.is<span class="hljs-constructor">Running()</span>)            animator.<span class="hljs-keyword">end</span><span class="hljs-literal">()</span>;        animator = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ValueAnimator</span>.</span></span><span class="hljs-keyword">of</span><span class="hljs-constructor">Float(0f, 1f, 0f)</span>;        animator.set<span class="hljs-constructor">RepeatCount(ValueAnimator.INFINITE)</span>;        animator.set<span class="hljs-constructor">RepeatMode(ValueAnimator.RESTART)</span>;        animator.set<span class="hljs-constructor">Duration(600)</span>;        animator.add<span class="hljs-constructor">UpdateListener(<span class="hljs-params">new</span> ValueAnimator.AnimatorUpdateListener()</span> &#123;            @Override            public void on<span class="hljs-constructor">AnimationUpdate(ValueAnimator <span class="hljs-params">animation</span>)</span> &#123;                <span class="hljs-built_in">int</span> verticalCenter = get<span class="hljs-constructor">Height()</span><span class="hljs-operator"> / </span><span class="hljs-number">2</span>;                <span class="hljs-built_in">int</span> horizontalCenter = get<span class="hljs-constructor">Width()</span><span class="hljs-operator"> / </span><span class="hljs-number">2</span>;                waveDelta = (<span class="hljs-built_in">int</span>) (<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Math</span>.</span></span>min(verticalCenter, horizontalCenter)<span class="hljs-operator"> * </span>(<span class="hljs-built_in">float</span>) animation.get<span class="hljs-constructor">AnimatedValue()</span><span class="hljs-operator"> / </span><span class="hljs-number">16</span>);                invalidate<span class="hljs-literal">()</span>;            &#125;        &#125;);        animator.start<span class="hljs-literal">()</span>;    &#125; <span class="hljs-comment">//  停止心跳动画</span> public void stop<span class="hljs-constructor">Wave()</span> &#123;        <span class="hljs-keyword">if</span> (animator != null<span class="hljs-operator"> &amp;&amp; </span>animator.is<span class="hljs-constructor">Running()</span>)            animator.<span class="hljs-keyword">end</span><span class="hljs-literal">()</span>;    &#125;</code></pre><p>接下来看状态改变时扩散动画的实现，其实方法和心跳动画一样，都是采用ValueAnimator动态计算绘制圆的半径，不在赘述。参考如下代码：</p><pre><code class="hljs reasonml">public void change<span class="hljs-constructor">LockState(<span class="hljs-params">final</span> <span class="hljs-params">boolean</span> <span class="hljs-params">lock</span>)</span> &#123;        stop<span class="hljs-constructor">Wave()</span>;        <span class="hljs-keyword">if</span> (this.isLock != lock) &#123;            transforming = <span class="hljs-literal">true</span>;            ValueAnimator valueAnimator = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ValueAnimator</span>.</span></span><span class="hljs-keyword">of</span><span class="hljs-constructor">Float(0f, 0.99f)</span>;            valueAnimator.set<span class="hljs-constructor">Duration(500)</span>;            valueAnimator.add<span class="hljs-constructor">Listener(<span class="hljs-params">new</span> Animator.AnimatorListener()</span> &#123;                @Override                public void on<span class="hljs-constructor">AnimationStart(Animator <span class="hljs-params">animation</span>)</span> &#123;                &#125;                @Override                public void on<span class="hljs-constructor">AnimationEnd(Animator <span class="hljs-params">animation</span>)</span> &#123;                    transforming = <span class="hljs-literal">false</span>;                    isLock = lock;                    invalidate<span class="hljs-literal">()</span>;                &#125;                @Override                public void on<span class="hljs-constructor">AnimationCancel(Animator <span class="hljs-params">animation</span>)</span> &#123;                    transforming = <span class="hljs-literal">false</span>;                &#125;                @Override                public void on<span class="hljs-constructor">AnimationRepeat(Animator <span class="hljs-params">animation</span>)</span> &#123;                &#125;            &#125;);            valueAnimator.add<span class="hljs-constructor">UpdateListener(<span class="hljs-params">new</span> ValueAnimator.AnimatorUpdateListener()</span> &#123;                @Override                public void on<span class="hljs-constructor">AnimationUpdate(ValueAnimator <span class="hljs-params">animation</span>)</span> &#123;                    <span class="hljs-built_in">int</span> verticalCenter = get<span class="hljs-constructor">Height()</span><span class="hljs-operator"> / </span><span class="hljs-number">2</span>;                    <span class="hljs-built_in">int</span> horizontalCenter = get<span class="hljs-constructor">Width()</span><span class="hljs-operator"> / </span><span class="hljs-number">2</span>;                    transformDelta = (<span class="hljs-built_in">int</span>) ((<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Math</span>.</span></span>min(verticalCenter, horizontalCenter) - <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Math</span>.</span></span>min(verticalCenter, horizontalCenter)<span class="hljs-operator"> / </span><span class="hljs-number">6</span>)<span class="hljs-operator">                            * </span>(<span class="hljs-built_in">float</span>) animation.get<span class="hljs-constructor">AnimatedValue()</span>);                    invalidate<span class="hljs-literal">()</span>;                &#125;            &#125;);            valueAnimator.start<span class="hljs-literal">()</span>;        &#125;    &#125;</code></pre><p>至此，关于LockView的绘制到这里就完全结束了。回顾一下本篇文章，重讲解了自定义LockView以及弹性滑动实现，然后探讨了关于事件分发的一些知识以及使用属性动画来实现心跳和扩散效果。相信看完本篇文章的小伙伴也会有不小的收获，最后关于源码，已放在文章末尾，欢迎start、forck！</p><p> <a href="https://github.com/zhpanvip/CustomView">源码链接</a></p><h3 id="好库推荐"><a href="#好库推荐" class="headerlink" title="好库推荐"></a>好库推荐</h3><p>给大家推荐一下<a href="https://github.com/zhpanvip/BannerViewPager">BannerViewPager</a>。这是一个基于ViewPager实现的具有强大功能的无限轮播库。通过<a href="https://github.com/zhpanvip/BannerViewPager">BannerViewPager</a>可以实现腾讯视频、QQ音乐、酷狗音乐、支付宝、天猫、淘宝、优酷视频、喜马拉雅、网易云音乐、哔哩哔哩等APP的Banner样式以及指示器样式。</p><p>欢迎大家到github关注<a href="https://github.com/zhpanvip/BannerViewPager">BannerViewPager</a>！</p>]]></content>
    
    
    
    <tags>
      
      <tag>自定义View</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android Widget开发详解</title>
    <link href="/2018/06/21/13.Android-Widget%E5%BC%80%E5%8F%91%E8%AF%A6%E8%A7%A3/"/>
    <url>/2018/06/21/13.Android-Widget%E5%BC%80%E5%8F%91%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<p>好久没博客更新了，本篇文章来学习一下如何实现一个Android列表小部件，效果可以参看下图：<br><img src="https://raw.githubusercontent.com/zhpanvip/Resource/master/image/1303.gif"></p><p>这个页面如果是在App内部实现，相信只要有一点Android基础的童鞋都能很轻松写出来。但是如果放到Widget中可能就不是那么简单了。因为Widget并没有运行在我们App的进程中，而是运行在系统的SystemServer进程中。你可能会惊讶，Whf！竟然不在我们App进程中！那么是不是意味着我们也不能像在App中那样操作View控件了？答案确实如此。不过不必过于担心，为了我们能在远程进程中更新界面，Google爸爸专门为我们提供了一个RemoteViews类。从名字上看，可能会觉得RemoteViews就是一个View。但事实并非如此，RemoteViews仅仅表示的是一个View结构。它可以在远程进程中展示和更新界面。今天我们要实现的列表小部件就是基于RemoteVeiw实现的。<br>那么接下来我们来学习如何实现一个桌面Widget，我们先列出要实现Widget的几个核心步骤：</p><ul><li>widget页面布局  </li><li>小部件配置信息 </li><li>了解AppWidgetProvider</li><li>RemoteViewsFactory实现列表适配</li><li>点击的事件处理</li></ul><h2 id="一-实现Widget界面"><a href="#一-实现Widget界面" class="headerlink" title="一. 实现Widget界面"></a>一. 实现Widget界面</h2><p><strong>1.widget页面布局。</strong>首先创建一个布局文件layout_widget.xml，内容如下：</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">LinearLayout</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><span class="hljs-tag">    <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/ll_right&quot;</span></span><span class="hljs-tag">    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><span class="hljs-tag">    <span class="hljs-attr">android:background</span>=<span class="hljs-string">&quot;@drawable/bg_widget&quot;</span></span><span class="hljs-tag">    <span class="hljs-attr">android:orientation</span>=<span class="hljs-string">&quot;vertical&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">RelativeLayout</span></span><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;40dp&quot;</span></span><span class="hljs-tag">        <span class="hljs-attr">android:background</span>=<span class="hljs-string">&quot;#ccc&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">ImageView</span></span><span class="hljs-tag">            <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/iv_icon&quot;</span></span><span class="hljs-tag">            <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;30dp&quot;</span></span><span class="hljs-tag">            <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;30dp&quot;</span></span><span class="hljs-tag">            <span class="hljs-attr">android:layout_centerVertical</span>=<span class="hljs-string">&quot;true&quot;</span></span><span class="hljs-tag">            <span class="hljs-attr">android:layout_marginEnd</span>=<span class="hljs-string">&quot;5dp&quot;</span></span><span class="hljs-tag">            <span class="hljs-attr">android:layout_marginStart</span>=<span class="hljs-string">&quot;5dp&quot;</span></span><span class="hljs-tag">            <span class="hljs-attr">android:background</span>=<span class="hljs-string">&quot;@mipmap/ic_launcher_round&quot;</span> /&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">TextView</span></span><span class="hljs-tag">            <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/tv_title&quot;</span></span><span class="hljs-tag">            <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><span class="hljs-tag">            <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><span class="hljs-tag">            <span class="hljs-attr">android:layout_centerVertical</span>=<span class="hljs-string">&quot;true&quot;</span></span><span class="hljs-tag">            <span class="hljs-attr">android:layout_toEndOf</span>=<span class="hljs-string">&quot;@id/iv_icon&quot;</span></span><span class="hljs-tag">            <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;Widget&quot;</span> /&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">LinearLayout</span></span><span class="hljs-tag">            <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><span class="hljs-tag">            <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><span class="hljs-tag">            <span class="hljs-attr">android:layout_alignParentEnd</span>=<span class="hljs-string">&quot;true&quot;</span></span><span class="hljs-tag">            <span class="hljs-attr">android:gravity</span>=<span class="hljs-string">&quot;center_vertical&quot;</span></span><span class="hljs-tag">            <span class="hljs-attr">android:orientation</span>=<span class="hljs-string">&quot;horizontal&quot;</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">ProgressBar</span></span><span class="hljs-tag">                <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/progress_bar&quot;</span></span><span class="hljs-tag">                <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;20dp&quot;</span></span><span class="hljs-tag">                <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;20dp&quot;</span></span><span class="hljs-tag">                <span class="hljs-attr">android:indeterminateTint</span>=<span class="hljs-string">&quot;@color/colorAccent&quot;</span></span><span class="hljs-tag">                <span class="hljs-attr">android:indeterminateTintMode</span>=<span class="hljs-string">&quot;src_atop&quot;</span></span><span class="hljs-tag">                <span class="hljs-attr">android:visibility</span>=<span class="hljs-string">&quot;gone&quot;</span> /&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">TextView</span></span><span class="hljs-tag">                <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/tv_refresh&quot;</span></span><span class="hljs-tag">                <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><span class="hljs-tag">                <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><span class="hljs-tag">                <span class="hljs-attr">android:layout_marginEnd</span>=<span class="hljs-string">&quot;15dp&quot;</span></span><span class="hljs-tag">                <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;刷新&quot;</span></span><span class="hljs-tag">                <span class="hljs-attr">android:padding</span>=<span class="hljs-string">&quot;5dp&quot;</span></span><span class="hljs-tag">                <span class="hljs-attr">android:textSize</span>=<span class="hljs-string">&quot;12sp&quot;</span> /&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">LinearLayout</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">RelativeLayout</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">ListView</span></span><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/lv_device&quot;</span></span><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><span class="hljs-tag">        <span class="hljs-attr">android:columnWidth</span>=<span class="hljs-string">&quot;80dip&quot;</span></span><span class="hljs-tag">        <span class="hljs-attr">android:gravity</span>=<span class="hljs-string">&quot;center&quot;</span></span><span class="hljs-tag">        <span class="hljs-attr">android:horizontalSpacing</span>=<span class="hljs-string">&quot;4dip&quot;</span></span><span class="hljs-tag">        <span class="hljs-attr">android:numColumns</span>=<span class="hljs-string">&quot;auto_fit&quot;</span></span><span class="hljs-tag">        <span class="hljs-attr">android:verticalSpacing</span>=<span class="hljs-string">&quot;4dip&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">LinearLayout</span>&gt;</span></code></pre><p>看到布局中的ListView控件，你可能会不屑一笑，都什么年代了还在用ListView？RecyclerView才是王道吧？可是我只能说句抱歉，Widget不支持RecyclerView。对，你没看错，真的不支持。在Widget中我们没办法做到想用什么就用什么，甚至觉得原生用着不爽，自己撸一个控件出来。对不起，Widget都不支持。因此Widget也有很大的局限性。我们来看下支持在Widget中运行的有哪些控件：</p><blockquote><p>A RemoteViews object (and, consequently, an App Widget) can support the following layout classes:<br>FrameLayout<br>LinearLayout<br>RelativeLayout<br>GridLayout<br>And the following widget classes:<br>AnalogClock<br>Button<br>Chronometer<br>ImageButton<br>ImageView<br>ProgressBar<br>TextView<br>ViewFlipper<br>ListView<br>GridView<br>StackView<br>AdapterViewFlipper<br>Descendants of these classes are not supported.</p></blockquote><p>除了上述列出的几个View，其它的包括Android原生View和自定义View是都不支持在Widget中运行的。因此基于Widget页面限制我们基本就可以告别炫酷的动画效果了。</p><h2 id="二-小部件配置信息"><a href="#二-小部件配置信息" class="headerlink" title="二.小部件配置信息"></a>二.小部件配置信息</h2><p>配置信息主要是设定小部件的一些属性，比如宽高、缩放模式、更新时间间隔等。我们需要在res/xml目录下新建widget_provider.xml文件，文件名字可以任意取。文件内容如下（可做参考）：</p><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">appwidget-provider</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><span class="hljs-tag">    <span class="hljs-attr">android:minHeight</span>=<span class="hljs-string">&quot;180dp&quot;</span></span><span class="hljs-tag">    <span class="hljs-attr">android:minWidth</span>=<span class="hljs-string">&quot;300dp&quot;</span></span><span class="hljs-tag">    <span class="hljs-attr">android:previewImage</span>=<span class="hljs-string">&quot;@drawable/ic_launcher_background&quot;</span></span><span class="hljs-tag">    <span class="hljs-attr">android:initialLayout</span>=<span class="hljs-string">&quot;@layout/layout_widget&quot;</span></span><span class="hljs-tag">    <span class="hljs-attr">android:updatePeriodMillis</span>=<span class="hljs-string">&quot;50000&quot;</span></span><span class="hljs-tag">    <span class="hljs-attr">android:resizeMode</span>=<span class="hljs-string">&quot;horizontal|vertical&quot;</span></span><span class="hljs-tag">    <span class="hljs-attr">android:widgetCategory</span>=<span class="hljs-string">&quot;home_screen&quot;</span>&gt;</span>     <span class="hljs-tag">&lt;/<span class="hljs-name">appwidget-provider</span>&gt;</span></code></pre><p>针对上述文件中的配置信息来做下介绍。</p><ul><li><strong><em>minHeight、minWidth</em></strong> 定义Widget的最小高度和最小宽度（Widget可以通过拉伸来调整尺寸大小）。</li><li><strong><em>previewImage</em></strong> 定义添加小部件时显示的图标。</li><li><strong><em>initialLayout</em></strong> 定义了小部件使用的布局。</li><li><strong><em>updatePeriodMillis</em></strong>定义小部件自动更新的周期，单位为毫秒。</li><li><strong><em>resizeMode</em></strong> 指定了 widget 的调整尺寸的规则。可取的值有: “horizontal”, “vertical”, “none”。”horizontal”意味着widget可以水平拉伸，“vertical”意味着widget可以竖值拉伸，“none”意味着widget不能拉伸；默认值是”none”。</li><li><strong><em>widgetCategory</em></strong> 指定了 widget 能显示的地方：能否显示在 home Screen 或 lock screen 或 两者都可以。它的取值包括：”home_screen” 和 “keyguard”。Android 4.2 引入。<br>最后，需要我们在AndroidManifest中注册AppWidgetProvider时引用该文件，使用如下：</li></ul><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">receiver</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;.widget.ListWidgetProvider&quot;</span>&gt;</span>     ...    <span class="hljs-tag">&lt;<span class="hljs-name">meta-data</span></span><span class="hljs-tag">        <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.appwidget.provider&quot;</span></span><span class="hljs-tag">        <span class="hljs-attr">android:resource</span>=<span class="hljs-string">&quot;@xml/widget_provider&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">receiver</span>&gt;</span></code></pre><h2 id="三-了解AppWidgetProvider类"><a href="#三-了解AppWidgetProvider类" class="headerlink" title="三.了解AppWidgetProvider类"></a>三.了解AppWidgetProvider类</h2><p>我们来简单了解下AppWidgetProvider这个类。Widget的功能均是通过AppWidgetProvider来实现的。我们跟进源码可以发现它是继承自BroadcastReceiver类，也就是一个广播接收者。上面我们提到过RemoteViews是运行在SystemServer进程中的，再结合此处我们应该可以推测小部件的事件应该是通过广播来实现的。像小部件的添加、删除、更新、启用、禁用等均是在AppWidgetProvider中通过接受广播来完成的。看AppWidgetProvider中的几个方法：</p><ul><li>onUpdate() 当Widget被添加或者被更新时会调用该方法。上边我们提到通过配置updatePeriodMillis可以定期更新Widget。但是当我们在widget的配置文件中声明了android:configure的时候，添加Widget时则不会调用onUpdate方法。</li><li>onEnable() 这个方法会在用户首次添加Widget时调用。</li><li>onAppWidgetOptionsChanged() 这个方法会在添加Widget或者改变Widget的大小时候被调用。在这个方法中我们还可以根据Widget的大小来选择性的显示或隐藏某些控件。</li><li>onDeleted(Context, int[]) 当控件被删除的时候调用该方法</li><li>onEnabled(Context) 当第一个Widget被添加的时候调用。如果用户添加了两个这个小部件，那么只有第一个添加时才会调用onEnabled.</li><li>onDisabled(Context) 当最后一个Widget实例被移除的时候调用这个方法。在这个方法中我们可以做一些清除工作，例如删掉临时的数据库等。</li><li>onReceive(Context, Intent) 当接收到广播的时候会被调用。</li></ul><p>上述方法中，我们需要着重关心一下onUpdate()方法和onReceive()方法。因为onUpdate()方法会在Widget被添加时候调用，我们可以在此时为Widget添加一View的些交互事件，例如点击事件。由于本篇我们要实现的是一个列表小部件。因此我们还需要RemoteViewsFactory这个类来适配列表数据。</p><p>先来看下ListWidgetProvider这个类中的代码：</p><pre><code class="hljs arduino"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ListWidgetProvider</span> <span class="hljs-title">extends</span> <span class="hljs-title">AppWidgetProvider</span> &#123;</span>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">String</span> TAG = <span class="hljs-string">&quot;WIDGET&quot;</span>;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">String</span> REFRESH_WIDGET = <span class="hljs-string">&quot;com.oitsme.REFRESH_WIDGET&quot;</span>;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">String</span> COLLECTION_VIEW_ACTION = <span class="hljs-string">&quot;com.oitsme.COLLECTION_VIEW_ACTION&quot;</span>;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">String</span> COLLECTION_VIEW_EXTRA = <span class="hljs-string">&quot;com.oitsme.COLLECTION_VIEW_EXTRA&quot;</span>;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Handler mHandler=<span class="hljs-keyword">new</span> Handler();    <span class="hljs-keyword">private</span> Runnable runnable=<span class="hljs-keyword">new</span> Runnable() &#123;        @Override        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-built_in">run</span>() &#123;            hideLoading(Utils.getContext());            Toast.makeText(Utils.getContext(), <span class="hljs-string">&quot;刷新成功&quot;</span>, Toast.LENGTH_SHORT).show();        &#125;    &#125;;    @Override    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onUpdate</span><span class="hljs-params">(Context context, AppWidgetManager appWidgetManager,</span></span><span class="hljs-function"><span class="hljs-params">                         <span class="hljs-keyword">int</span>[] appWidgetIds)</span> </span>&#123;        Log.d(TAG, <span class="hljs-string">&quot;ListWidgetProvider onUpdate&quot;</span>);        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> appWidgetId : appWidgetIds) &#123;            <span class="hljs-comment">// 获取AppWidget对应的视图</span>            RemoteViews remoteViews = <span class="hljs-keyword">new</span> RemoteViews(context.getPackageName(), R.layout.layout_widget);            <span class="hljs-comment">// 设置响应 “按钮(bt_refresh)” 的intent</span>            Intent btIntent = <span class="hljs-keyword">new</span> Intent().setAction(REFRESH_WIDGET);            PendingIntent btPendingIntent = PendingIntent.getBroadcast(context, <span class="hljs-number">0</span>, btIntent, PendingIntent.FLAG_UPDATE_CURRENT);            remoteViews.setOnClickPendingIntent(R.id.tv_refresh, btPendingIntent);            <span class="hljs-comment">// 设置 “ListView” 的adapter。</span>            <span class="hljs-comment">// (01) intent: 对应启动 ListWidgetService(RemoteViewsService) 的intent</span>            <span class="hljs-comment">// (02) setRemoteAdapter: 设置 gridview的适配器</span>            <span class="hljs-comment">//    通过setRemoteAdapter将ListView和ListWidgetService关联起来，</span>            <span class="hljs-comment">//    以达到通过 ListWidgetService 更新 ListView的目的</span>            Intent serviceIntent = <span class="hljs-keyword">new</span> Intent(context, ListWidgetService.class);            remoteViews.setRemoteAdapter(R.id.lv_device, serviceIntent);            <span class="hljs-comment">// 设置响应 “ListView” 的intent模板</span>            <span class="hljs-comment">// 说明：“集合控件(如GridView、ListView、StackView等)”中包含很多子元素，如GridView包含很多格子。</span>            <span class="hljs-comment">//     它们不能像普通的按钮一样通过 setOnClickPendingIntent 设置点击事件，必须先通过两步。</span>            <span class="hljs-comment">//        (01) 通过 setPendingIntentTemplate 设置 “intent模板”，这是比不可少的！</span>            <span class="hljs-comment">//        (02) 然后在处理该“集合控件”的RemoteViewsFactory类的getViewAt()接口中 通过 setOnClickFillInIntent 设置“集合控件的某一项的数据”</span>            Intent gridIntent = <span class="hljs-keyword">new</span> Intent();            gridIntent.setAction(COLLECTION_VIEW_ACTION);            gridIntent.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, appWidgetId);            PendingIntent pendingIntent = PendingIntent.getBroadcast(context, <span class="hljs-number">0</span>, gridIntent, PendingIntent.FLAG_UPDATE_CURRENT);            <span class="hljs-comment">// 设置intent模板</span>            remoteViews.setPendingIntentTemplate(R.id.lv_device, pendingIntent);            <span class="hljs-comment">// 调用集合管理器对集合进行更新</span>            appWidgetManager.updateAppWidget(appWidgetId, remoteViews);        &#125;        super.onUpdate(context, appWidgetManager, appWidgetIds);    &#125;    @Override    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onReceive</span><span class="hljs-params">(Context context, Intent intent)</span> </span>&#123;        <span class="hljs-keyword">String</span> action = intent.getAction();        AppWidgetManager appWidgetManager = AppWidgetManager.getInstance(context);        <span class="hljs-keyword">if</span> (action.equals(COLLECTION_VIEW_ACTION)) &#123;            <span class="hljs-comment">// 接受“ListView”的点击事件的广播</span>            <span class="hljs-keyword">int</span> type = intent.getIntExtra(<span class="hljs-string">&quot;Type&quot;</span>, <span class="hljs-number">0</span>);            <span class="hljs-keyword">int</span> appWidgetId = intent.getIntExtra(AppWidgetManager.EXTRA_APPWIDGET_ID,                    AppWidgetManager.INVALID_APPWIDGET_ID);            <span class="hljs-keyword">int</span> index = intent.getIntExtra(COLLECTION_VIEW_EXTRA, <span class="hljs-number">0</span>);            <span class="hljs-keyword">switch</span> (type) &#123;                <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:                    Toast.makeText(context, <span class="hljs-string">&quot;item&quot;</span> + index, Toast.LENGTH_SHORT).show();                    <span class="hljs-keyword">break</span>;                <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:                    Toast.makeText(context, <span class="hljs-string">&quot;lock&quot;</span>+index, Toast.LENGTH_SHORT).show();                    <span class="hljs-keyword">break</span>;                <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:                    Toast.makeText(context, <span class="hljs-string">&quot;unlock&quot;</span>+index, Toast.LENGTH_SHORT).show();                    <span class="hljs-keyword">break</span>;            &#125;        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (action.equals(REFRESH_WIDGET)) &#123;            <span class="hljs-comment">// 接受“bt_refresh”的点击事件的广播</span>            Toast.makeText(context, <span class="hljs-string">&quot;刷新...&quot;</span>, Toast.LENGTH_SHORT).show();            <span class="hljs-keyword">final</span> AppWidgetManager mgr = AppWidgetManager.getInstance(context);            <span class="hljs-keyword">final</span> ComponentName cn = <span class="hljs-keyword">new</span> ComponentName(context,ListWidgetProvider.class);            ListRemoteViewsFactory.refresh();            mgr.notifyAppWidgetViewDataChanged(mgr.getAppWidgetIds(cn),R.id.lv_device);            mHandler.postDelayed(runnable,<span class="hljs-number">2000</span>);            showLoading(context);        &#125;        super.<span class="hljs-built_in">onReceive</span>(context, intent);    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 显示加载loading</span><span class="hljs-comment">     *</span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">showLoading</span><span class="hljs-params">(Context context)</span> </span>&#123;        RemoteViews remoteViews = <span class="hljs-keyword">new</span> RemoteViews(context.getPackageName(), R.layout.layout_widget);        remoteViews.setViewVisibility(R.id.tv_refresh, View.VISIBLE);        remoteViews.setViewVisibility(R.id.progress_bar, View.VISIBLE);        remoteViews.setTextViewText(R.id.tv_refresh, <span class="hljs-string">&quot;正在刷新...&quot;</span>);        refreshWidget(context, remoteViews, <span class="hljs-literal">false</span>);    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 隐藏加载loading</span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">hideLoading</span><span class="hljs-params">(Context context)</span> </span>&#123;        RemoteViews remoteViews = <span class="hljs-keyword">new</span> RemoteViews(context.getPackageName(), R.layout.layout_widget);        remoteViews.setViewVisibility(R.id.progress_bar, View.GONE);        remoteViews.setTextViewText(R.id.tv_refresh, <span class="hljs-string">&quot;刷新&quot;</span>);        refreshWidget(context, remoteViews, <span class="hljs-literal">false</span>);    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 刷新Widget</span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">refreshWidget</span><span class="hljs-params">(Context context, RemoteViews remoteViews, <span class="hljs-keyword">boolean</span> refreshList)</span> </span>&#123;        AppWidgetManager appWidgetManager = AppWidgetManager.getInstance(context);        ComponentName componentName = <span class="hljs-keyword">new</span> ComponentName(context, ListWidgetProvider.class);        appWidgetManager.updateAppWidget(componentName, remoteViews);        <span class="hljs-keyword">if</span> (refreshList)            appWidgetManager.notifyAppWidgetViewDataChanged(appWidgetManager.getAppWidgetIds(componentName), R.id.lv_device);    &#125;&#125;</code></pre><p>针对以上代码，我们着重来看onUpdate()方法。在onUpdate()中我们主要实现了两个功能，第一个功能ListView以外的事件点击，例如点击“刷新”来更新小部件。第二个功能是适配ListView并实现ListView内部Item控件的点击事件。在这个方法中我们首先获取到了一个RemoteView的实例，这个RemoteView对应的就是我们Widget布局的View。关于点击事件的实现代码中注释写的也比较详细，在这里就不做过多解释了。重点是需要了解如何实现并适配ListView，具体实现请看下节。</p><h2 id="四-RemoteViewsFactory实现列表适配"><a href="#四-RemoteViewsFactory实现列表适配" class="headerlink" title="四.RemoteViewsFactory实现列表适配"></a>四.RemoteViewsFactory实现列表适配</h2><p>上面我们提到了RemoteViewsFactory，这个类其实可以类比为ListView的Adapter，该类存在的意义就是为了适配ListView的数据。只不过这里是把Adapter换成RemoteViews来实现的。看下ListRemoteViewsFactory中的代码：</p><pre><code class="hljs arduino"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ListRemoteViewsFactory</span> <span class="hljs-title">implements</span> <span class="hljs-title">RemoteViewsService</span>.<span class="hljs-title">RemoteViewsFactory</span> &#123;</span>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">String</span> TAG=<span class="hljs-string">&quot;Widget&quot;</span>;    <span class="hljs-keyword">private</span> Context mContext;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> mAppWidgetId;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> List&lt;Device&gt; mDevices;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 构造GridRemoteViewsFactory</span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ListRemoteViewsFactory</span><span class="hljs-params">(Context context, Intent intent)</span> </span>&#123;        mContext = context;        mAppWidgetId = intent.getIntExtra(AppWidgetManager.EXTRA_APPWIDGET_ID,                AppWidgetManager.INVALID_APPWIDGET_ID);    &#125;    @Override    <span class="hljs-function"><span class="hljs-keyword">public</span> RemoteViews <span class="hljs-title">getViewAt</span><span class="hljs-params">(<span class="hljs-keyword">int</span> <span class="hljs-built_in">position</span>)</span> </span>&#123;        <span class="hljs-comment">//  HashMap&lt;String, Object&gt; map;</span>        <span class="hljs-comment">// 获取 item_widget_device.xml 对应的RemoteViews</span>        RemoteViews rv = <span class="hljs-keyword">new</span> RemoteViews(mContext.getPackageName(), R.layout.item_widget_device);        <span class="hljs-comment">// 设置 第position位的“视图”的数据</span>        Device device = mDevices.<span class="hljs-built_in">get</span>(<span class="hljs-built_in">position</span>);        <span class="hljs-comment">//  rv.setImageViewResource(R.id.iv_lock, ((Integer) map.get(IMAGE_ITEM)).intValue());</span>        rv.setTextViewText(R.id.tv_name, device.getName());        <span class="hljs-comment">// 设置 第position位的“视图”对应的响应事件</span>        Intent fillInIntent = <span class="hljs-keyword">new</span> Intent();        fillInIntent.putExtra(<span class="hljs-string">&quot;Type&quot;</span>, <span class="hljs-number">0</span>);        fillInIntent.putExtra(ListWidgetProvider.COLLECTION_VIEW_EXTRA, <span class="hljs-built_in">position</span>);        rv.setOnClickFillInIntent(R.id.rl_widget_device, fillInIntent);        Intent lockIntent = <span class="hljs-keyword">new</span> Intent();        lockIntent.putExtra(ListWidgetProvider.COLLECTION_VIEW_EXTRA, <span class="hljs-built_in">position</span>);        lockIntent.putExtra(<span class="hljs-string">&quot;Type&quot;</span>, <span class="hljs-number">1</span>);        rv.setOnClickFillInIntent(R.id.iv_lock, lockIntent);        Intent unlockIntent = <span class="hljs-keyword">new</span> Intent();        unlockIntent.putExtra(<span class="hljs-string">&quot;Type&quot;</span>, <span class="hljs-number">2</span>);        unlockIntent.putExtra(ListWidgetProvider.COLLECTION_VIEW_EXTRA, <span class="hljs-built_in">position</span>);        rv.setOnClickFillInIntent(R.id.iv_unlock, unlockIntent);        <span class="hljs-keyword">return</span> rv;    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 初始化ListView的数据</span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">initListViewData</span><span class="hljs-params">()</span> </span>&#123;        mDevices = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();        mDevices.add(<span class="hljs-keyword">new</span> Device(<span class="hljs-string">&quot;Hello&quot;</span>, <span class="hljs-number">0</span>));        mDevices.add(<span class="hljs-keyword">new</span> Device(<span class="hljs-string">&quot;Oitsme&quot;</span>, <span class="hljs-number">1</span>));        mDevices.add(<span class="hljs-keyword">new</span> Device(<span class="hljs-string">&quot;Hi&quot;</span>, <span class="hljs-number">0</span>));        mDevices.add(<span class="hljs-keyword">new</span> Device(<span class="hljs-string">&quot;Hey&quot;</span>, <span class="hljs-number">1</span>));    &#125;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> i;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">refresh</span><span class="hljs-params">()</span></span>&#123;        i++;        mDevices.add(<span class="hljs-keyword">new</span> Device(<span class="hljs-string">&quot;Refresh&quot;</span>+i, <span class="hljs-number">1</span>));    &#125;    @Override    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onCreate</span><span class="hljs-params">()</span> </span>&#123;        Log.e(TAG,<span class="hljs-string">&quot;onCreate&quot;</span>);        <span class="hljs-comment">// 初始化“集合视图”中的数据</span>        initListViewData();    &#125;    @Override    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getCount</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-comment">// 返回“集合视图”中的数据的总数</span>        <span class="hljs-keyword">return</span> mDevices.<span class="hljs-built_in">size</span>();    &#125;    @Override    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">long</span> <span class="hljs-title">getItemId</span><span class="hljs-params">(<span class="hljs-keyword">int</span> <span class="hljs-built_in">position</span>)</span> </span>&#123;        <span class="hljs-comment">// 返回当前项在“集合视图”中的位置</span>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">position</span>;    &#125;    @Override    <span class="hljs-function"><span class="hljs-keyword">public</span> RemoteViews <span class="hljs-title">getLoadingView</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> null;    &#125;    @Override    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getViewTypeCount</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-comment">// 只有一类 ListView</span>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;    &#125;    @Override    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">hasStableIds</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;    &#125;    @Override    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onDataSetChanged</span><span class="hljs-params">()</span> </span>&#123;    &#125;    @Override    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onDestroy</span><span class="hljs-params">()</span> </span>&#123;        mDevices.<span class="hljs-built_in">clear</span>();    &#125;&#125;</code></pre><p>有了RemoteViewsFactory 还需要有RemoteViewsService才能与ListView关联起来。来看RemoteViewsService的实现类ListWidgetService，很简单，只重写了onGetViewFactory方法：</p><pre><code class="hljs scala">public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ListWidgetService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">RemoteViewsService</span> </span>&#123;    <span class="hljs-meta">@Override</span>    public <span class="hljs-type">RemoteViewsService</span>.<span class="hljs-type">RemoteViewsFactory</span> onGetViewFactory(<span class="hljs-type">Intent</span> intent) &#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-type">ListRemoteViewsFactory</span>(<span class="hljs-keyword">this</span>, intent);    &#125;&#125;</code></pre><p>至此我们可以再次回到ListWidgetProvider中的onUpdate()方法，来看ListWidgetService 是如何与ListView关联到一起的了。</p><pre><code class="hljs reasonml"><span class="hljs-comment">//  设置 “ListView” 的adapter。</span><span class="hljs-comment">// (01) intent: 对应启动 ListWidgetService(RemoteViewsService) 的intent</span><span class="hljs-comment">// (02) setRemoteAdapter: 设置 ListView的适配器</span><span class="hljs-comment">//  通过setRemoteAdapter将ListView和ListWidgetService关联起来，</span><span class="hljs-comment">//  以达到通过 ListWidgetService 更新 ListView 的目的</span> Intent serviceIntent = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Intent(<span class="hljs-params">context</span>, ListWidgetService.<span class="hljs-params">class</span>)</span>; remoteViews.set<span class="hljs-constructor">RemoteAdapter(R.<span class="hljs-params">id</span>.<span class="hljs-params">lv_device</span>, <span class="hljs-params">serviceIntent</span>)</span>;</code></pre><h2 id="五-点击事件处理"><a href="#五-点击事件处理" class="headerlink" title="五.点击事件处理"></a>五.点击事件处理</h2><p>Widget中事件点击以及适配ListView，想必大家都有所了解了。那么对于事件的处理我们还没有提到，例如在Widget中点击了刷新后我们不能像在App中那样给控件设置一个事件监听来在回掉方法中处理。在文章开头我们就提到了Widget是依赖广播来实现，因此我们点击了刷新后其实仅仅是发送出来一个广播。如果我们不去处理广播那么点击事件其实是没有任何意义的。因此，来看ListWidgetProvider中第二个比较重要的方法onReceive()。这个方法比较简单，只要我们对特定的广播来做相应的处理就可以了。</p><pre><code class="hljs verilog">@Override    public <span class="hljs-keyword">void</span> onReceive(Context <span class="hljs-keyword">context</span>, Intent intent) &#123;        String action = intent<span class="hljs-variable">.getAction</span>();        AppWidgetManager appWidgetManager = AppWidgetManager<span class="hljs-variable">.getInstance</span>(<span class="hljs-keyword">context</span>);        <span class="hljs-keyword">if</span> (action<span class="hljs-variable">.equals</span>(COLLECTION_VIEW_ACTION)) &#123;<span class="hljs-comment">//处理列表中的事件</span>            <span class="hljs-comment">// 接受“ListView”的点击事件的广播</span>            <span class="hljs-keyword">int</span> <span class="hljs-keyword">type</span> = intent<span class="hljs-variable">.getIntExtra</span>(<span class="hljs-string">&quot;Type&quot;</span>, <span class="hljs-number">0</span>);            <span class="hljs-keyword">int</span> appWidgetId = intent<span class="hljs-variable">.getIntExtra</span>(AppWidgetManager<span class="hljs-variable">.EXTRA_APPWIDGET_ID</span>,                    AppWidgetManager<span class="hljs-variable">.INVALID_APPWIDGET_ID</span>);            <span class="hljs-keyword">int</span> index = intent<span class="hljs-variable">.getIntExtra</span>(COLLECTION_VIEW_EXTRA, <span class="hljs-number">0</span>);            switch (<span class="hljs-keyword">type</span>) &#123;                <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:                    Toast<span class="hljs-variable">.makeText</span>(<span class="hljs-keyword">context</span>, <span class="hljs-string">&quot;item&quot;</span> + index, Toast<span class="hljs-variable">.LENGTH_SHORT</span>)<span class="hljs-variable">.show</span>();                    <span class="hljs-keyword">break</span>;                <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:                    Toast<span class="hljs-variable">.makeText</span>(<span class="hljs-keyword">context</span>, <span class="hljs-string">&quot;lock&quot;</span>+index, Toast<span class="hljs-variable">.LENGTH_SHORT</span>)<span class="hljs-variable">.show</span>();                    <span class="hljs-keyword">break</span>;                <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:                    Toast<span class="hljs-variable">.makeText</span>(<span class="hljs-keyword">context</span>, <span class="hljs-string">&quot;unlock&quot;</span>+index, Toast<span class="hljs-variable">.LENGTH_SHORT</span>)<span class="hljs-variable">.show</span>();                    <span class="hljs-keyword">break</span>;            &#125;        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (action<span class="hljs-variable">.equals</span>(REFRESH_WIDGET)) &#123;<span class="hljs-comment">//处理刷新事件</span>            <span class="hljs-comment">// 接受“bt_refresh”的点击事件的广播</span>            Toast<span class="hljs-variable">.makeText</span>(<span class="hljs-keyword">context</span>, <span class="hljs-string">&quot;刷新...&quot;</span>, Toast<span class="hljs-variable">.LENGTH_SHORT</span>)<span class="hljs-variable">.show</span>();            <span class="hljs-keyword">final</span> AppWidgetManager mgr = AppWidgetManager<span class="hljs-variable">.getInstance</span>(<span class="hljs-keyword">context</span>);            <span class="hljs-keyword">final</span> ComponentName cn = <span class="hljs-keyword">new</span> ComponentName(<span class="hljs-keyword">context</span>,ListWidgetProvider<span class="hljs-variable">.class</span>);            ListRemoteViewsFactory<span class="hljs-variable">.refresh</span>();            mgr<span class="hljs-variable">.notifyAppWidgetViewDataChanged</span>(mgr<span class="hljs-variable">.getAppWidgetIds</span>(cn),R<span class="hljs-variable">.id</span><span class="hljs-variable">.lv_device</span>);            mHandler<span class="hljs-variable">.postDelayed</span>(runnable,<span class="hljs-number">2000</span>);            showLoading(<span class="hljs-keyword">context</span>);        &#125;        <span class="hljs-keyword">super</span><span class="hljs-variable">.onReceive</span>(<span class="hljs-keyword">context</span>, intent);    &#125;</code></pre><p>最后，别忘了ListWidgetProvider是广播，ListWidgetService是服务，都需要我们在AndroidManifest文件中来注册：</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">receiver</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;.widget.ListWidgetProvider&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">intent-filter</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.appwidget.action.APPWIDGET_UPDATE&quot;</span> /&gt;</span>            <span class="hljs-comment">&lt;!-- ListWidgetProvider接收点击ListView的响应事件 --&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;com.oitsme.COLLECTION_VIEW_ACTION&quot;</span> /&gt;</span>            <span class="hljs-comment">&lt;!-- ListWidgetProvider接收点击bt_refresh的响应事件 --&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;com.oitsme.REFRESH_WIDGET&quot;</span> /&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;com.oitsme.LOCK_ACTION&quot;</span>/&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;com.oitsme.UNLOCK_ACTION&quot;</span>/&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">intent-filter</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">meta-data</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.appwidget.provider&quot;</span></span><span class="hljs-tag">            <span class="hljs-attr">android:resource</span>=<span class="hljs-string">&quot;@xml/widget_provider&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">receiver</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">service</span></span><span class="hljs-tag">        <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;.widget.ListWidgetService&quot;</span></span><span class="hljs-tag">        <span class="hljs-attr">android:permission</span>=<span class="hljs-string">&quot;android.permission.BIND_REMOTEVIEWS&quot;</span> /&gt;</span></code></pre><h2 id="六-小结"><a href="#六-小结" class="headerlink" title="六.小结"></a>六.小结</h2><p>至此关于列表小部件的讲解就完成了。只是自我感觉文章的逻辑有点乱。如果没明白，大家可以参考下面Demo源码。其实关于Widget的这个Demo其实早在几个月前就已经写好了，但由于最近项目紧再加上本身也是第一次接触Widget控件，因此直至近日才开始动笔写这篇文章。所以文章中避免不了有错误和不合理的地方，欢迎留言指正。</p><p>参考<br><a href="https://developer.android.com/guide/topics/appwidgets/">https://developer.android.com/guide/topics/appwidgets/</a></p><p><a href="https://download.csdn.net/download/qq_20521573/11659588">源码下载</a></p><h3 id="好库推荐"><a href="#好库推荐" class="headerlink" title="好库推荐"></a>好库推荐</h3><p>给大家推荐一下<a href="https://github.com/zhpanvip/BannerViewPager">BannerViewPager</a>。这是一个基于ViewPager实现的具有强大功能的无限轮播库。通过<a href="https://github.com/zhpanvip/BannerViewPager">BannerViewPager</a>可以实现腾讯视频、QQ音乐、酷狗音乐、支付宝、天猫、淘宝、优酷视频、喜马拉雅、网易云音乐、哔哩哔哩等APP的Banner样式以及指示器样式。</p><p>欢迎大家到github关注<a href="https://github.com/zhpanvip/BannerViewPager">BannerViewPager</a>！</p>]]></content>
    
    
    
    <tags>
      
      <tag>Widget</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于Https的那些事儿</title>
    <link href="/2018/02/12/12.%E5%85%B3%E4%BA%8EHttps%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/"/>
    <url>/2018/02/12/12.%E5%85%B3%E4%BA%8EHttps%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/</url>
    
    <content type="html"><![CDATA[<p>*<strong>* 本篇文章已授权微信公众号 guolin_blog （郭霖）独家发布*</strong></p><p>由于前不久苹果公司已经强制IOS应用必须使用HTTPS协议开发，虽然Google没有强制开发者使用HTTPS，但相信不久的将来Android也会跟随IOS全面转向HTTPS。因此，HTTPS的学习也是相当重要。本篇文章涉及到的代码不多，主要内容是对HTTPS协议的讲解，最后将结合Retrofit实现HTTPS的单双向认证。</p><p>下面将通过以下几节内容来学习HTTPS。</p><ul><li>HTTPS概述 </li><li>HTTPS实现原理  </li><li>数字证书   </li><li>Https单项认证   </li><li>Https双向认证</li></ul><h2 id="一、HTTPS概述"><a href="#一、HTTPS概述" class="headerlink" title="一、HTTPS概述"></a>一、HTTPS概述</h2><p> <strong>1.什么是HTTPS？</strong><br> 我们看维基百科给HTTPS的定义：</p><blockquote><p>HTTPS（Hypertext Transfer Protocol Secure）是一种通过计算机网络进行安全通信的传输协议。HTTPS经由HTTP进行通信，但利用TLS来加密数据包。HTTPS开发的主要目的，是提供对网站服务器的身份认证，保护交换数据的隐私与完整性。</p></blockquote><p>原来HTTPS就是在HTTP协议的基础上加入了TLS协议。目的是保证我们的数据在网络上传输的安全性。</p><blockquote><p>TLS是传输层加密协议，前身是SSL协议。由网景公司于1995年发布。后改名为TLS。常用的 TLS 协议版本有：TLS1.2, TLS1.1, TLS1.0 和 SSL3.0。其中 SSL3.0 由于 POODLE 攻击已经被证明不安全。TLS1.0 也存在部分安全漏洞，比如 RC4 和 BEAST 攻击。</p></blockquote><p>由于HTTP协议采用明文传输，我们可以通过抓包很轻松的获取到HTTP所传输的数据。因此，采用HTTP协议是不安全的。这才催生了HTTPS的诞生。HTTPS相对HTTP提供了更安全的数据传输保障。主要体现在三个方面：</p><blockquote><p>1，  内容加密。客户端到服务器的内容都是以加密形式传输，中间者无法直接查看明文内容。<br>2，  身份认证。通过校验保证客户端访问的是自己的服务器。<br>3，  数据完整性。防止内容被第三方冒充或者篡改。</p></blockquote><h2 id="二、HTTPS实现原理"><a href="#二、HTTPS实现原理" class="headerlink" title="二、HTTPS实现原理"></a>二、HTTPS实现原理</h2><p>在学习HTTPS原理之前我们先了解一下两种加密方式： 对称加密和非对称加密。<br><strong>对称加密</strong> 即加密和解密使用同一个密钥，虽然对称加密破解难度很大，但由于对称加密需要在网络上传输密钥和密文，一旦被黑客截取很容就能被破解，因此对称加密并不是一个较好的选择。<br><strong>非对称加密</strong> 即加密和解密使用不同的密钥，分别称为公钥和私钥。我们可以用公钥对数据进行加密，但必须要用私钥才能解密。在网络上只需要传送公钥，私钥保存在服务端用于解密公钥加密后的密文。但是非对称加密消耗的CPU资源非常大，效率很低，严重影响HTTPS的性能和速度。因此非对称加密也不是HTTPS的理想选择。</p><p>那么HTTPS采用了怎样的加密方式呢？其实为了提高安全性和效率HTTPS结合了对称和非对称两种加密方式。即客户端使用对称加密生成密钥（key）对传输数据进行加密，然后使用非对称加密的公钥再对key进行加密。因此网络上传输的数据是被key加密的密文和用公钥加密后的密文key，因此即使被黑客截取，由于没有私钥，无法获取到明文key，便无法获取到明文数据。所以HTTPS的加密方式是安全的。</p><p>接下来我们以TLS1.2为例来认识HTTPS的握手过程。</p><blockquote><p>1，  客户端发送 client_hello，包含一个随机数 random1。<br>2，  服务端回复 server_hello，包含一个随机数 random2，携带了证书公钥 P。<br>3，  客户端接收到 random2 之后就能够生成 premaster_secrect （对称加密的密钥）以及 master_secrect（用premaster_secret加密后的数据）。<br>4，  客户端使用证书公钥 P 将 premaster_secrect 加密后发送给服务器 (用公钥P对premaster_secret加密)。<br>5，  服务端使用私钥解密得到 premaster_secrect。又由于服务端之前就收到了随机数 1，所以服务端根据相同的生成算法，在相同的输入参数下，求出了相同的 master secrect。</p></blockquote><p>HTTPS的握手过程如下图：<br><img src="https://raw.githubusercontent.com/zhpanvip/Resource/master/image/1201.jfif"></p><h2 id="三、数字证书"><a href="#三、数字证书" class="headerlink" title="三、数字证书"></a>三、数字证书</h2><p>我们上面提到了HTTPS的工作原理，通过对称加密和非对称加密实现数据的安全传输。我们也知道非对称加密过程需要用到公钥进行加密。那么公钥从何而来？其实公钥就被包含在数字证书中。数字证书通常来说是由受信任的数字证书颁发机构CA，在验证服务器身份后颁发，证书中包含了一个密钥对（公钥和私钥）和所有者识别信息。数字证书被放到服务端，具有服务器身份验证和数据传输加密功能。</p><p>除了CA机构颁发的证书之外，还有非CA机构颁发的证书和自签名证书。</p><ul><li>非CA机构即是不受信任的机构颁发的证书，理所当然这样的证书是不受信任的。</li><li>自签名证书，就是自己给自己颁发的证书。当然自签名证书也是不受信任的。</li></ul><p>例如大(chou)名(ming)鼎(zhao)鼎(zhu)的12306网站使用的就是非CA机构颁发的证书（最近发现12306购票页面已经改为CA证书了），12306的证书是由SRCA颁发，SRCA中文名叫中铁数字证书认证中心，简称中铁CA。这是个铁道部自己搞的机构，相当于是自己给自己颁发证书。因此我们访问12306时通常会看到如下情景：<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTgwMjExMTczMjQ4NjE3?x-oss-process=image/format,png" alt="这里写图片描述"></p><p>说了这么多，我们来总结一下数字证书的两个作用：</p><blockquote><p>1， 分发公钥。每个数字证书都包含了注册者生成的公钥。在 TLS握手时会通过 certificate 消息传输给客户端。<br>2， 身份授权。确保客户端访问的网站是经过 CA 验证的可信任的网站。（在自签名证书的情况下可以验证是否是我们自己的服务器）</p></blockquote><p>最后我们从<a href="http://blog.csdn.net/dd864140130/article/details/52625666">别处</a>搬来一个中间人攻击的例子，来认识证书是如何保证我们的数据安全的。<br>对于一个正常的网络请求，其流程通常如下：<br><img src="https://raw.githubusercontent.com/zhpanvip/Resource/master/image/1203.jfif"></p><p>但是，如果有黑客在通信过程中拦截了这个请求。试想在客户端和服务端中间有一个中间人，两者之间的传输对中间人来说是透明的，那么中间人完全可以获取两端之间的任何数据并加以修改，然后转发给两端。其流程如下图：<br><img src="https://raw.githubusercontent.com/zhpanvip/Resource/master/image/1204.jfif"></p><p>此时恶意服务端完全可以发起双向攻击：对上可以欺骗服务端，对下可以欺骗客户端，更严重的是客户端段和服务端完全感知不到已经被攻击了。这就是所谓的中间人攻击。</p><blockquote><p>中间人攻击（MITM攻击）是指，黑客拦截并篡改网络中的通信数据。又分为被动MITM和主动MITM，被动MITM只窃取通信数据而不修改，而主动MITM不但能窃取数据，还会篡改通信数据。最常见的中间人攻击常常发生在公共wifi或者公共路由上。</p></blockquote><p>现在可以看看使用证书是怎么样提高安全性，避免中间人攻击的，用一张简单的流程图来说明：</p><p><img src="https://raw.githubusercontent.com/zhpanvip/Resource/master/image/1205.jfif"></p><h2 id="四、HTTPS单项认证"><a href="#四、HTTPS单项认证" class="headerlink" title=" 四、HTTPS单项认证"></a> 四、HTTPS单项认证</h2><p>所谓单项认证只要服务端配置证书，客户端在请求服务端时验证服务器的证书即可。我们上述讲到的内容其实都是说的HTTPS单项认证。通常来说对于安全性要求不高的网站单项认证就可以满足我们的需求了。因此我们访问的HTTPS网站大部分都是单项认证。</p><p><strong>1.关于HTTPS的使用存在的误区</strong><br>由于我们对安全性的认识不够重视，通常对于HTTPS存在一些误区，这些误区可能直接给我们带来一些安全隐患。<br>*<strong>误区（1）：对于CA机构颁发的证书客户端无须内置***<br>上面提到访问HTTPS服务器是需要在客户端配置服务器证书的。有些小伙伴可能就纳闷了，说我们用的就是HTTPS但是并没有在客户端配置证书呢？比如请求百度的网站<a href="https://www.baidu.com/%EF%BC%8C%E5%92%8C%E8%AF%B7%E6%B1%82HTTP%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%B2%A1%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%E3%80%82%E5%85%B6%E5%AE%9E%E8%BF%99%E6%98%AF%E5%9B%A0%E4%B8%BA%E5%9C%A8Android%E7%B3%BB%E7%BB%9F%E4%B8%AD%E5%B7%B2%E7%BB%8F%E5%86%85%E7%BD%AE%E4%BA%86%E6%89%80%E6%9C%89CA%E6%9C%BA%E6%9E%84%E7%9A%84%E6%A0%B9%E8%AF%81%E4%B9%A6%EF%BC%8C%E4%B9%9F%E5%B0%B1%E6%98%AF%E5%8F%AA%E8%A6%81%E6%98%AFCA%E6%9C%BA%E6%9E%84%E9%A2%81%E5%8F%91%E7%9A%84%E8%AF%81%E4%B9%A6%EF%BC%8CAndroid%E6%98%AF%E7%9B%B4%E6%8E%A5%E4%BF%A1%E4%BB%BB%E7%9A%84%E3%80%82%E5%AF%B9%E4%BA%8E%E6%AD%A4%E7%A7%8D%E6%83%85%E5%86%B5%EF%BC%8C%E8%99%BD%E7%84%B6%E5%8F%AF%E4%BB%A5%E6%AD%A3%E5%B8%B8%E8%AE%BF%E9%97%AE%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%8C%E4%BD%86%E6%98%AF%E4%BB%8D%E7%84%B6%E5%AD%98%E5%9C%A8%E5%AE%89%E5%85%A8%E9%9A%90%E6%82%A3%E3%80%82%E5%81%87%E5%A6%82%E9%BB%91%E5%AE%A2%E8%87%AA%E5%AE%B6%E6%90%AD%E5%BB%BA%E4%BA%86%E4%B8%80%E4%B8%AA%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%B9%B6%E7%94%B3%E8%AF%B7%E5%88%B0%E4%BA%86CA%E8%AF%81%E4%B9%A6%EF%BC%8C%E7%94%B1%E4%BA%8E%E6%88%91%E4%BB%AC%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%B2%A1%E6%9C%89%E5%86%85%E7%BD%AE%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%AF%81%E4%B9%A6%EF%BC%8C%E9%BB%98%E8%AE%A4%E4%BF%A1%E4%BB%BB%E6%89%80%E6%9C%89CA%E8%AF%81%E4%B9%A6%EF%BC%88%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%8F%AF%E4%BB%A5%E8%AE%BF%E9%97%AE%E6%89%80%E6%9C%89%E6%8C%81%E6%9C%89%E7%94%B1CA%E6%9C%BA%E6%9E%84%E9%A2%81%E5%8F%91%E7%9A%84%E8%AF%81%E4%B9%A6%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%89%EF%BC%8C%E9%82%A3%E4%B9%88%E9%BB%91%E5%AE%A2%E4%BB%8D%E7%84%B6%E5%8F%AF%E4%BB%A5%E5%8F%91%E8%B5%B7%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB%E5%8A%AB%E6%8C%81%E6%88%91%E4%BB%AC%E7%9A%84%E8%AF%B7%E6%B1%82%E5%88%B0%E9%BB%91%E5%AE%A2%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%8C%E5%AE%9E%E9%99%85%E4%B8%8A%E5%B0%B1%E6%88%90%E4%BA%86%E6%88%91%E4%BB%AC%E7%9A%84%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%92%8C%E9%BB%91%E5%AE%A2%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%BB%BA%E7%AB%8B%E8%B5%B7%E4%BA%86%E8%BF%9E%E6%8E%A5%E3%80%82">https://www.baidu.com/，和请求HTTP服务器没什么区别。其实这是因为在Android系统中已经内置了所有CA机构的根证书，也就是只要是CA机构颁发的证书，Android是直接信任的。对于此种情况，虽然可以正常访问到服务器，但是仍然存在安全隐患。假如黑客自家搭建了一个服务器并申请到了CA证书，由于我们客户端没有内置服务器证书，默认信任所有CA证书（客户端可以访问所有持有由CA机构颁发的证书的服务器），那么黑客仍然可以发起中间人攻击劫持我们的请求到黑客的服务器，实际上就成了我们的客户端和黑客的服务器建立起了连接。</a><br>*</strong>误区（2）：对于非CA机构颁发的证书和自签名证书，可以忽略证书校验***<br>另外一种情况，如果我们服务器的证书是非认证机构颁发的 (例如12306)或者自签名证书，那么我们是无法直接访问到服务器的，直接访问通常会抛出如下异常：</p><pre><code class="hljs css"><span class="hljs-selector-tag">javax</span><span class="hljs-selector-class">.net</span><span class="hljs-selector-class">.ssl</span><span class="hljs-selector-class">.SSLHandshakeException</span>:     <span class="hljs-selector-tag">java</span><span class="hljs-selector-class">.security</span><span class="hljs-selector-class">.cert</span><span class="hljs-selector-class">.CertPathValidatorException</span>:         <span class="hljs-selector-tag">Trust</span> <span class="hljs-selector-tag">anchor</span> <span class="hljs-selector-tag">for</span> <span class="hljs-selector-tag">certification</span> <span class="hljs-selector-tag">path</span> <span class="hljs-selector-tag">not</span> <span class="hljs-selector-tag">found</span>.</code></pre><p>网上很多解决SSLHandshakeException异常的方案是自定义TrustManager忽略证书校验。代码如下：</p><pre><code class="hljs aspectj"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-function">SSLSocketFactory <span class="hljs-title">getSSLSocketFactory</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;        <span class="hljs-comment">//创建一个不验证证书链的证书信任管理器。</span>        <span class="hljs-keyword">final</span> TrustManager[] trustAllCerts = <span class="hljs-keyword">new</span> TrustManager[]&#123;<span class="hljs-keyword">new</span> X509TrustManager() &#123;            <span class="hljs-meta">@Override</span>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> checkClientTrusted(                    java.security.cert.X509Certificate[] chain,                    String authType) <span class="hljs-keyword">throws</span> CertificateException &#123;            &#125;            <span class="hljs-meta">@Override</span>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> checkServerTrusted(                    java.security.cert.X509Certificate[] chain,                    String authType) <span class="hljs-keyword">throws</span> CertificateException &#123;            &#125;            <span class="hljs-meta">@Override</span>            <span class="hljs-keyword">public</span> java.security.cert.X509Certificate[] getAcceptedIssuers() &#123;                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> java.security.cert.X509Certificate[<span class="hljs-number">0</span>];            &#125;        &#125;&#125;;        <span class="hljs-comment">// Install the all-trusting trust manager</span>        <span class="hljs-keyword">final</span> SSLContext sslContext = SSLContext.getInstance(<span class="hljs-string">&quot;TLS&quot;</span>);        sslContext.init(<span class="hljs-keyword">null</span>, trustAllCerts,                <span class="hljs-keyword">new</span> java.security.SecureRandom());        <span class="hljs-comment">// Create an ssl socket factory with our all-trusting manager</span>        <span class="hljs-keyword">return</span> sslContext                .getSocketFactory();    &#125;  <span class="hljs-comment">//使用自定义SSLSocketFactory</span>  <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">onHttps</span><span class="hljs-params">(OkHttpClient.Builder builder)</span> </span>&#123;       <span class="hljs-keyword">try</span> &#123;            builder.sslSocketFactory(getSSLSocketFactory()).hostnameVerifier(org.apache.http.conn.ssl.SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;            e.printStackTrace();        &#125;    &#125;</code></pre><p>对于这样的处理方式虽然解决了SSLHandshakeException异常，但是却存在更大的安全隐患。因为此种做法直接使我们的客户端信任了所有证书（包括CA机构颁发的证书和非CA机构颁发的证书以及自签名证书），因此，这样配置将比第一种情况危害更大。</p><p><strong>2.Retrofit绑定证书实现HTTPS单项认证</strong><br>对于上述两种情况中存在的安全隐患，我们应该如何应对？最简单的解决方案就是在客户端内置服务器的证书，我们在校验服务端证书的时候只比对和App内置的证书是否完全相同，如果不同则断开连接。那么此时再遭遇中间人攻击劫持我们的请求时由于黑客服务器没有相应的证书，此时HTTPS请求校验不通过，则无法与黑客的服务器建立起连接。</p><p>那么接下来我们就结合Retrofit以访问12306为例来实现HTTPS的单项认证。<br>首先从12306网站下载签名证书，并放置到我们项目资源目录raw下。然后根据证书构造SSLSocketFactory，代码如下：</p><pre><code class="hljs reasonml"><span class="hljs-comment">/**</span><span class="hljs-comment">    * 单项认证</span><span class="hljs-comment">    */</span>   public static SSLSocketFactory get<span class="hljs-constructor">SSLSocketFactoryForOneWay(InputStream<span class="hljs-operator">...</span> <span class="hljs-params">certificates</span>)</span> &#123;       <span class="hljs-keyword">try</span> &#123;           CertificateFactory certificateFactory = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">CertificateFactory</span>.</span></span>get<span class="hljs-constructor">Instance(CLIENT_TRUST_MANAGER, CLIENT_TRUST_PROVIDER)</span>;           KeyStore keyStore = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">KeyStore</span>.</span></span>get<span class="hljs-constructor">Instance(CLIENT_TRUST_KEYSTORE)</span>;           keyStore.load(null);           <span class="hljs-built_in">int</span> index = <span class="hljs-number">0</span>;           <span class="hljs-keyword">for</span> (InputStream certificate : certificates) &#123;               String certificateAlias = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Integer</span>.</span></span><span class="hljs-keyword">to</span><span class="hljs-constructor">String(<span class="hljs-params">index</span><span class="hljs-operator">++</span>)</span>;               keyStore.set<span class="hljs-constructor">CertificateEntry(<span class="hljs-params">certificateAlias</span>, <span class="hljs-params">certificateFactory</span>.<span class="hljs-params">generateCertificate</span>(<span class="hljs-params">certificate</span>)</span>);               <span class="hljs-keyword">try</span> &#123;                   <span class="hljs-keyword">if</span> (certificate != null)                       certificate.close<span class="hljs-literal">()</span>;               &#125; catch (IOException e) &#123;                   e.print<span class="hljs-constructor">StackTrace()</span>;               &#125;           &#125;           SSLContext sslContext = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">SSLContext</span>.</span></span>get<span class="hljs-constructor">Instance(CLIENT_AGREEMENT)</span>;           TrustManagerFactory trustManagerFactory =                   <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">TrustManagerFactory</span>.</span></span>get<span class="hljs-constructor">Instance(TrustManagerFactory.<span class="hljs-params">getDefaultAlgorithm</span>()</span>);           trustManagerFactory.init(keyStore);           sslContext.init(null, trustManagerFactory.get<span class="hljs-constructor">TrustManagers()</span>, <span class="hljs-keyword">new</span> <span class="hljs-constructor">SecureRandom()</span>);           return sslContext.get<span class="hljs-constructor">SocketFactory()</span>;       &#125; catch (Exception e) &#123;           e.print<span class="hljs-constructor">StackTrace()</span>;       &#125;       return null;   &#125;</code></pre><p>接下来为OKHttpClient设置SslSocketFactory以及hostnameVerifier，代码如下：</p><pre><code class="hljs reasonml">InputStream certificate12306 = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Utils</span>.</span></span>get<span class="hljs-constructor">Context()</span>.get<span class="hljs-constructor">Resources()</span>.<span class="hljs-keyword">open</span><span class="hljs-constructor">RawResource(R.<span class="hljs-params">raw</span>.<span class="hljs-params">srca</span>)</span>;        OkHttpClient okHttpClient = <span class="hljs-keyword">new</span> OkHttpClient.<span class="hljs-constructor">Builder()</span>                .read<span class="hljs-constructor">Timeout(Constants.DEFAULT_TIMEOUT, TimeUnit.MILLISECONDS)</span>                .connect<span class="hljs-constructor">Timeout(Constants.DEFAULT_TIMEOUT, TimeUnit.MILLISECONDS)</span>                .add<span class="hljs-constructor">Interceptor(<span class="hljs-params">interceptor</span>)</span>                .add<span class="hljs-constructor">Interceptor(<span class="hljs-params">new</span> HttpHeaderInterceptor()</span>)                .add<span class="hljs-constructor">NetworkInterceptor(<span class="hljs-params">new</span> HttpCacheInterceptor()</span>)                .ssl<span class="hljs-constructor">SocketFactory(SslContextFactory.<span class="hljs-params">getSSLSocketFactoryForOneWay</span>(<span class="hljs-params">certificate12306</span>)</span>)                  .hostname<span class="hljs-constructor">Verifier(<span class="hljs-params">new</span> SafeHostnameVerifier()</span>)                .cache(cache)                .build<span class="hljs-literal">()</span>;</code></pre><p>上述代码中hostnameVerifier是对服务器的校验，SafeHostnameVerifier代码如下：</p><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SafeHostnameVerifier</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">HostnameVerifier</span> </span>&#123;       <span class="hljs-meta">@Override</span>       <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">verify</span><span class="hljs-params">(String hostname, SSLSession session)</span> </span>&#123;           <span class="hljs-keyword">if</span> (Constants.IP.equals(hostname)) &#123;<span class="hljs-comment">//校验hostname是否正确，如果正确则建立连接</span>               <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;           &#125;           <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;       &#125;   &#125;</code></pre><p>verify方法中对比了请求的IP和服务器的IP是否一致，一致则返回true表示校验通过，否则返回false，检验不通过，断开连接。对于网上有些处理是直接返回true，即不对请求的服务器IP做校验，我们不推荐这样使用。而且现在谷歌应用商店已经对此种做法做了限制，禁止在verify方法中直接返回true的App上线。</p><h2 id="五、HTTPS双向认证"><a href="#五、HTTPS双向认证" class="headerlink" title=" 五、HTTPS双向认证"></a> 五、HTTPS双向认证</h2><p>对于HTTPS双向认证，用到的情况不多。但是对于像金融行业等对安全性要求较高的企业，通常都会使用双向认证。所谓双向认证就是客户端校验服务器证书，同时服务器也需要校验客户端的证书。因此，双向认证就另需一张证书放到客户端待服务端去验证。</p><blockquote><p>单项认证保证了我们自己的客户端只能访问我们自己的服务器，但并不能保证我们自己的服务器只能被我们自己的客户端访问（第三方客户端忽略证书校验即可）。那么双向认证则保证了我们的客户端只能访问我们自己的服务器，同时我们的服务器也只能被我们自己的客户端访问。因此双向认证可以说相比单项认证安全性足足提高一个等级。</p></blockquote><p><strong>1.双向认证流程</strong><br>接下来我们来了解下双向认证的流程，以加深对双向认证的理解：</p><blockquote><p>a. 客户端发送一个连接请求给服务器。<br>　　b. 服务器将自己的证书，以及同证书相关的信息发送给客户端。<br>　　c. 客户端检查服务器送过来的证书是否和App内置证书相同。如果是，就继续执行协议；如果不是则终止此次请求。<br>　　d. 接着客户端比较证书里的消息，例如域名和公钥，与服务器刚刚发送的相关消息是否一致，如果是一致的，客户端认可这个服务器的合法身份。<br>　　e. 服务器要求客户发送客户自己的证书。收到后，服务器验证客户端的证书，如果没有通过验证，拒绝连接；如果通过验证，服务器获得用户的公钥。<br>　　f. 客户端告诉服务器自己所能够支持的通讯对称密码方案。<br>　　g. 服务器从客户发送过来的密码方案中，选择一种加密程度最高的密码方案，用客户的公钥加过密后通知客户端。<br>　　h. 客户端针对这个密码方案，选择一个通话密钥，接着用服务器的公钥加过密后发送给服务器。<br>　　i. 服务器接收到客户端送过来的消息，用自己的私钥解密，获得通话密钥。<br>　　j. 服务器通过密钥解密客户端发送的被加密数据，得到明文数据。</p></blockquote><p><strong>2.Retrofit实现HTTPS双向认证</strong><br>对于双向认证，我们以华为北向平台登录接口为例来进行学习。想了解华为北向API<a href="http://developer.huawei.com/ict/cn/doc/site-oceanconnect-northbound_api_reference-zh/index.html/zh-cn_topic_0087306564">请戳此处</a><br>我们直接通过浏览器访问登录接口可以看到如下情景：<br><img src="https://raw.githubusercontent.com/zhpanvip/Resource/master/image/1206.jfif"></p><p>哈，惊喜不？直接被拒绝了！这就是双向认证，没有证书想访问服务器门都没有。那么对于双向认证我们应该做怎样的配置？我们可以参考华为开源出来的代码<a href="https://github.com/Huawei/IoT_OceanConnect_North_GUI_APPDemo">戳此处</a><br>源码中由两个证书文件ca.jks和outgoing.CertwithKey.pkcs12，其中ca.jks是在客户端配置的证书，outgoing.CertwithKey.pkcs12是在服务端配置的证书。因为我们当前客户端是Android系统，由于Android系统不支持jks格式的证书，因此需要把jks转成Android支持的bks格式。转换方式不再贴出，可自行查阅。<br>有了证书，接下来看获取SSLSocketFactory的代码：</p><pre><code class="hljs reasonml"><span class="hljs-comment">/**</span><span class="hljs-comment">   * 双向认证</span><span class="hljs-comment">   *</span><span class="hljs-comment">   * @return SSLSocketFactory</span><span class="hljs-comment">   */</span>  public static SSLSocketFactory get<span class="hljs-constructor">SSLSocketFactoryForTwoWay()</span> &#123;      <span class="hljs-keyword">try</span> &#123;          InputStream certificate = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Utils</span>.</span></span>get<span class="hljs-constructor">Context()</span>.get<span class="hljs-constructor">Resources()</span>.<span class="hljs-keyword">open</span><span class="hljs-constructor">RawResource(R.<span class="hljs-params">raw</span>.<span class="hljs-params">capk</span>)</span>;          <span class="hljs-comment">//  CertificateFactory certificateFactory = CertificateFactory.getInstance(&quot;X.509&quot;, &quot;BC&quot;);</span>          KeyStore keyStore = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">KeyStore</span>.</span></span>get<span class="hljs-constructor">Instance(CLIENT_TRUST_KEY)</span>;          keyStore.load(certificate, <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">SELF_CERT_PWD</span>.</span></span><span class="hljs-keyword">to</span><span class="hljs-constructor">CharArray()</span>);          KeyManagerFactory kmf = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">KeyManagerFactory</span>.</span></span>get<span class="hljs-constructor">Instance(KeyManagerFactory.<span class="hljs-params">getDefaultAlgorithm</span>()</span>);          kmf.init(keyStore, <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">SELF_CERT_PWD</span>.</span></span><span class="hljs-keyword">to</span><span class="hljs-constructor">CharArray()</span>);          <span class="hljs-keyword">try</span> &#123;              <span class="hljs-keyword">if</span> (certificate != null)                  certificate.close<span class="hljs-literal">()</span>;          &#125; catch (IOException e) &#123;              e.print<span class="hljs-constructor">StackTrace()</span>;          &#125;          <span class="hljs-comment">//初始化keystore</span>          KeyStore clientKeyStore = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">KeyStore</span>.</span></span>get<span class="hljs-constructor">Instance(CLIENT_TRUST_KEYSTORE)</span>;          clientKeyStore.load(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Utils</span>.</span></span>get<span class="hljs-constructor">Context()</span>.get<span class="hljs-constructor">Resources()</span>.<span class="hljs-keyword">open</span><span class="hljs-constructor">RawResource(R.<span class="hljs-params">raw</span>.<span class="hljs-params">cabks</span>)</span>, <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">TRUST_CA_PWD</span>.</span></span><span class="hljs-keyword">to</span><span class="hljs-constructor">CharArray()</span>);          SSLContext sslContext = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">SSLContext</span>.</span></span>get<span class="hljs-constructor">Instance(CLIENT_AGREEMENT)</span>;          TrustManagerFactory trustManagerFactory = TrustManagerFactory.                  get<span class="hljs-constructor">Instance(TrustManagerFactory.<span class="hljs-params">getDefaultAlgorithm</span>()</span>);          trustManagerFactory.init(clientKeyStore);          KeyManagerFactory keyManagerFactory = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">KeyManagerFactory</span>.</span></span>get<span class="hljs-constructor">Instance(KeyManagerFactory.<span class="hljs-params">getDefaultAlgorithm</span>()</span>);          keyManagerFactory.init(clientKeyStore, <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">SELF_CERT_PWD</span>.</span></span><span class="hljs-keyword">to</span><span class="hljs-constructor">CharArray()</span>);          sslContext.init(kmf.get<span class="hljs-constructor">KeyManagers()</span>, trustManagerFactory.get<span class="hljs-constructor">TrustManagers()</span>, <span class="hljs-keyword">new</span> <span class="hljs-constructor">SecureRandom()</span>);          return sslContext.get<span class="hljs-constructor">SocketFactory()</span>;      &#125; catch (Exception e) &#123;          e.print<span class="hljs-constructor">StackTrace()</span>;      &#125;      return null;  &#125;</code></pre><p>接下来同样需要配置OKHttpClient，代码如下：</p><pre><code class="hljs reasonml">OkHttpClient okHttpClient = <span class="hljs-keyword">new</span> OkHttpClient.<span class="hljs-constructor">Builder()</span>                .read<span class="hljs-constructor">Timeout(Constants.DEFAULT_TIMEOUT, TimeUnit.MILLISECONDS)</span>                .connect<span class="hljs-constructor">Timeout(Constants.DEFAULT_TIMEOUT, TimeUnit.MILLISECONDS)</span>                .add<span class="hljs-constructor">Interceptor(<span class="hljs-params">interceptor</span>)</span>                .add<span class="hljs-constructor">Interceptor(<span class="hljs-params">new</span> HttpHeaderInterceptor()</span>)                .add<span class="hljs-constructor">NetworkInterceptor(<span class="hljs-params">new</span> HttpCacheInterceptor()</span>)                .ssl<span class="hljs-constructor">SocketFactory(SslContextFactory.<span class="hljs-params">getSSLSocketFactoryForTwoWay</span>()</span>)                 .hostname<span class="hljs-constructor">Verifier(<span class="hljs-params">new</span> SafeHostnameVerifier()</span>)                .cache(cache)                .build<span class="hljs-literal">()</span>;</code></pre><p>这样就完成了HTTPS的配置，接下来就可以愉快的访问HTTPS 双向认证的接口了。由于北向登录接口中需要appId和secret两个参数，因此，登录相关代码就不再贴出。</p><p>好了，到此关于HTTPS的学习就结束了，如果有不明白的地方可以参看文末源码。以上内容纯属个人对HTTPS的一些认识，如果文中有错误之处还请多多包涵，欢迎留言指正。</p><p>本文写成参考了大量的相关文章，在此表示感谢。</p><p><a href="https://github.com/zhpanvip/Retrofit2/tree/master/idea/src/main/java/com/zhpan/idea/net/https">源码参考</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://blog.jobbole.com/86660/">大型网站的 HTTPS 实践（1）：HTTPS 协议和原理</a><br><a href="http://blog.csdn.net/dd864140130/article/details/52625666">Retrofit中如何正确的使用https？</a><br><a href="http://blog.csdn.net/lmj623565791/article/details/48129405">Android Https相关完全解析 当OkHttp遇到Https</a><br><a href="https://www.jianshu.com/p/f2097616e65e">HTTPS原理及OKHTTP对HTTPS的支持</a></p><h3 id="好库推荐"><a href="#好库推荐" class="headerlink" title="好库推荐"></a>好库推荐</h3><p>给大家推荐一下<a href="https://github.com/zhpanvip/BannerViewPager">BannerViewPager</a>。这是一个基于ViewPager实现的具有强大功能的无限轮播库。通过<a href="https://github.com/zhpanvip/BannerViewPager">BannerViewPager</a>可以实现腾讯视频、QQ音乐、酷狗音乐、支付宝、天猫、淘宝、优酷视频、喜马拉雅、网易云音乐、哔哩哔哩等APP的Banner样式以及指示器样式。</p><p>欢迎大家到github关注<a href="https://github.com/zhpanvip/BannerViewPager">BannerViewPager</a>！</p>]]></content>
    
    
    
    <tags>
      
      <tag>https</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>追根溯源--探究Handler的实现原理</title>
    <link href="/2017/09/10/11.%E8%BF%BD%E6%A0%B9%E6%BA%AF%E6%BA%90-%E6%8E%A2%E7%A9%B6Handler%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/"/>
    <url>/2017/09/10/11.%E8%BF%BD%E6%A0%B9%E6%BA%AF%E6%BA%90-%E6%8E%A2%E7%A9%B6Handler%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h2 id="一、初识Handler"><a href="#一、初识Handler" class="headerlink" title="一、初识Handler"></a>一、初识Handler</h2><p>要分析一个框架的源码，首先需要了解它的使用。我们就从最基础的知识开始吧！</p><h3 id="场景1：将数据从子线程发送到主线程。"><a href="#场景1：将数据从子线程发送到主线程。" class="headerlink" title="场景1：将数据从子线程发送到主线程。"></a>场景1：将数据从子线程发送到主线程。</h3><p>我们知道Android系统中更新UI只能在主线程中进行。而通常网络请求实在子线程中进行的。在获取到服务器数据后我们需要切换到主线程来更新UI。通常在这种情况下我们会考虑使用Handler来进行线程切换。我们来模拟一个网络请求，并通过Handler将数据发送出去：</p><pre><code class="hljs java"><span class="hljs-keyword">private</span> Handler mHandler = <span class="hljs-keyword">new</span> Handler()&#123;        <span class="hljs-meta">@Override</span>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">dispatchMessage</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> Message msg)</span> </span>&#123;            <span class="hljs-keyword">super</span>.dispatchMessage(msg);            updateUI(msg);        &#125;    &#125;;<span class="hljs-comment">// 或者可以通过传入Handler.Callback的参数</span>Handler mHandler = <span class="hljs-keyword">new</span> Handler(<span class="hljs-keyword">new</span> Handler.Callback() &#123;       <span class="hljs-meta">@Override</span>       <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">handleMessage</span><span class="hljs-params">(Message msg)</span> </span>&#123;updateUI(msg);           <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;       &#125;   &#125;);    <span class="hljs-comment">// 模拟网络请求</span> <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">fetchData</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">new</span> Thread()&#123;            <span class="hljs-meta">@Override</span>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;                <span class="hljs-keyword">super</span>.run();                Message message = mHandler.obtainMessage();                message.obj=<span class="hljs-string">&quot;data from server&quot;</span>;                mHandler.sendMessage(message);            &#125;        &#125;.start();    &#125;</code></pre><p>我们通过子线程模拟网络请求，并将获取的数据通过Handler的sendMessage方法将数据发送了出去。而在Handler的dispatchMessage方法中便可收到刚刚发送的message。并且此时dispatchMessage处于主线程，因此可以直接在dispatchMessage方法中更新UI了。</p><h3 id="场景2：延迟发送Runnable"><a href="#场景2：延迟发送Runnable" class="headerlink" title="场景2：延迟发送Runnable"></a>场景2：延迟发送Runnable</h3><p>场景1是Handler很典型的一个应用，除此之外，我们还经常会通过Handler延迟发送一个Runnable，在delayMillis时间之后会执行Runnable的run方法。代码示例如下：</p><pre><code class="hljs java"><span class="hljs-comment">// 假设是运行在Activity中的代码</span><span class="hljs-keyword">private</span> Handler mHandler = <span class="hljs-keyword">new</span> Handler();<span class="hljs-keyword">private</span> Runnable mRunnable = <span class="hljs-keyword">new</span> Runnable() &#123;        <span class="hljs-meta">@Override</span>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;            handleMessage();        &#125;    &#125;; <span class="hljs-meta">@Override</span>   <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> </span>&#123;       <span class="hljs-keyword">super</span>.onCreate(savedInstanceState); <span class="hljs-keyword">new</span> Thread()&#123;           <span class="hljs-meta">@Override</span>           <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;               <span class="hljs-keyword">super</span>.run();               mHandler.postDelayed(mRunnable,<span class="hljs-number">1000</span>);           &#125;       &#125;.start();&#125;</code></pre><h3 id="场景3：在子线程中初始化Handler"><a href="#场景3：在子线程中初始化Handler" class="headerlink" title="场景3：在子线程中初始化Handler"></a>场景3：在子线程中初始化Handler</h3><pre><code class="hljs java">Handler mHandler;<span class="hljs-keyword">new</span> Thread()&#123;           <span class="hljs-meta">@Override</span>           <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;               <span class="hljs-keyword">super</span>.run();               mHandler=<span class="hljs-keyword">new</span> Handler();           &#125;       &#125;.start();</code></pre><p>此时，运行程序我们会发现程序Crash掉了，并且抛出了以下错误日志：</p><blockquote><p>java.lang.RuntimeException: Can’t create handler inside thread that has not called Looper.prepare()</p></blockquote><p>日志信息提示我们在子线程中创建Handler需要调用Looper.prepare()方法。</p><p>(注:以上场景均未考虑内存泄露问题)</p><p>那么针对以上三个应用场景，有些同学可能表示会有问题：</p><p><strong>问题1：</strong> 在场景1中Handler在子线程中发送出来的消息为什么到了dispatchMessage方法就变成了主线程呢？</p><p><strong>问题2：</strong> 在场景2的代码中我故意在子线程中调用了Handler的postDelayed方法，那么此时通过postDelayed方法发出来的Runnable究竟是运行在主线程还是子线程呢？</p><p><strong>问题3：</strong>  为什么在主线程中直接创建Handler可以正常运行而在子线程中创建Handler需要调用Looper.prepare()方法呢？</p><p>如果想要解开以上几个疑惑，就需要我们对Handler的源码有深入的了解。那么接下来我们就进入Handler的源码分析环节吧！</p><h2 id="二、Handler源码溯源历程"><a href="#二、Handler源码溯源历程" class="headerlink" title="二、Handler源码溯源历程"></a>二、Handler源码溯源历程</h2><h3 id="1-从实例化一个Handler说起"><a href="#1-从实例化一个Handler说起" class="headerlink" title="1.从实例化一个Handler说起"></a>1.从实例化一个Handler说起</h3><p>在使用Handler的第一步就需要我们先实例化一个Handler。那么，我们就从new Handler()着手，看看在初始化Handler的时候做了哪些操作：</p><pre><code class="hljs java"><span class="hljs-keyword">final</span> Looper mLooper;   <span class="hljs-keyword">final</span> MessageQueue mQueue;<span class="hljs-keyword">final</span> Callback mCallback;   <span class="hljs-keyword">final</span> <span class="hljs-keyword">boolean</span> mAsynchronous;   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Handler</span><span class="hljs-params">()</span> </span>&#123;       <span class="hljs-keyword">this</span>(<span class="hljs-keyword">null</span>, <span class="hljs-keyword">false</span>);   &#125;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Handler</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> Callback callback, <span class="hljs-keyword">boolean</span> async)</span> </span>&#123;        <span class="hljs-keyword">if</span> (FIND_POTENTIAL_LEAKS) &#123;            <span class="hljs-keyword">final</span> Class&lt;? extends Handler&gt; klass = getClass();            <span class="hljs-keyword">if</span> ((klass.isAnonymousClass() || klass.isMemberClass() || klass.isLocalClass()) &amp;&amp;                    (klass.getModifiers() &amp; Modifier.STATIC) == <span class="hljs-number">0</span>) &#123;                Log.w(TAG, <span class="hljs-string">&quot;The following Handler class should be static or leaks might occur: &quot;</span> +                    klass.getCanonicalName());            &#125;        &#125;        mLooper = Looper.myLooper();        <span class="hljs-keyword">if</span> (mLooper == <span class="hljs-keyword">null</span>) &#123;            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(                <span class="hljs-string">&quot;Can&#x27;t create handler inside thread &quot;</span> + Thread.currentThread()                        + <span class="hljs-string">&quot; that has not called Looper.prepare()&quot;</span>);        &#125;        mQueue = mLooper.mQueue;        mCallback = callback;        mAsynchronous = async;    &#125;</code></pre><p>可以看到，调用Handler的无参构造方法实例化Handler最终调用了Handler(@Nullable Callback callback, boolean async)的构造方法，而在这个构造方法中的逻辑似乎也很简单，通过调用Looper.myLooper()方法得到了一个Looper对象，如果此时mLooper为null，则会抛出一个RuntimeException。仔细看看发现这个异常信息不就是我们在第一章场景三中在子线程中初始化Handler的时候抛出来的异常吗？那么，什么时候通过Looper.myPrepare()方法得到的Handler会是空呢？要解决这个问题怕是要到Looper中一探究竟了。</p><p>首先来看下Looper.myPrepare()方法的源码：</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-meta">@Nullable</span> <span class="hljs-function">Looper <span class="hljs-title">myLooper</span><span class="hljs-params">()</span> </span>&#123;    <span class="hljs-keyword">return</span> sThreadLocal.get();&#125;</code></pre><p>这是Looper中的一个静态方法，这个方法简单到只有一行代码，即调用了ThreadLocal的get()方法来得到一个Looper。ThreadLocal是Java中的一个类，它是一个泛型类，有set(T)和T get()两个方法。ThreadLocal的神奇之处在于它可以在指定线程中存储数据，什么意思呢？即你在某个线程中存储的数据只能在该线程中获取的到。关于ThreadLocal我们只需要了解这些就够了，其实现原理不做深究，有兴趣的可以自从查阅源码。</p><p>既然了解了ThreadLocal的作用，那么在Looper内部一定事先调用了ThreadLocal的set方法。通过全局搜索sThreadLocal，发现了prepare()方法，其源码如下：</p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">prepare</span><span class="hljs-params">(<span class="hljs-keyword">boolean</span> quitAllowed)</span> </span>&#123;     <span class="hljs-keyword">if</span> (sThreadLocal.get() != <span class="hljs-keyword">null</span>) &#123;         <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;Only one Looper may be created per thread&quot;</span>);     &#125;     sThreadLocal.set(<span class="hljs-keyword">new</span> Looper(quitAllowed)); &#125;</code></pre><p>果真如我们预料的那样，在Looper的prepare方法中实例化了Looper，并将其放入到了ThreadLocal中。而如果没有调用Looper.prepare()方法，那么获取到的Looper一定是null。到这里似乎解释了第一章的场景三在子线程中实例化Handler需要事先调用Looper.prepare()方法。但是，到这里我们似乎还是没有解释清楚疑惑三，为什么在主线程中直接实例化Handler却没有抛出异常呢？其实，当程序启动的时候会同时启动主线程，我们知道Java程序的入口是main方法。而在Android程序启动的入口同样是main方法。我们在ActivityThread中找到main方法，源码如下：</p><pre><code class="hljs java"># ActivityThread<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        ...        Looper.prepareMainLooper();...        Looper.loop();        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;Main thread loop unexpectedly exited&quot;</span>);    &#125; # Looper <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">prepareMainLooper</span><span class="hljs-params">()</span> </span>&#123;        prepare(<span class="hljs-keyword">false</span>);        <span class="hljs-keyword">synchronized</span> (Looper.class) &#123;            <span class="hljs-keyword">if</span> (sMainLooper != <span class="hljs-keyword">null</span>) &#123;                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalStateException(<span class="hljs-string">&quot;The main Looper has already been prepared.&quot;</span>);            &#125;            sMainLooper = myLooper();        &#125;    &#125;</code></pre><p>在main方法中调用了Looper.prepareMauinLooper()方法，而Looper.prepareMauinLooper()中又调用了prepare方法。因此，我们可以在主线程中直接实例化Handler而不用担心抛出异常。</p><h3 id="2-Handler的postXXX-或sendXXX"><a href="#2-Handler的postXXX-或sendXXX" class="headerlink" title="2.Handler的postXXX()或sendXXX"></a>2.Handler的postXXX()或sendXXX</h3><p>实例化Handler后，我们通常会通过Handler提供的方法来发送一个消息。在第一章节中列举了Handler的sendMessage()和postDelay()方法，其实除了这两个方法之外，Handler还提供了一系列的sendXXX()和postXXX()的方法。但追踪源码发现这些方法最终都会调用到sendMessageAtTime方法。</p><p>我们就以postDelayed方法为例来分析。首先，来看postDelayed的源码：</p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">postDelayed</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> Runnable r, <span class="hljs-keyword">long</span> delayMillis)</span> </span>&#123;        <span class="hljs-keyword">return</span> sendMessageDelayed(getPostMessage(r), delayMillis);    &#125;</code></pre><p>在postDelayed中调用了sendMessageDelayed方法，这个方法的第一个参数接收一个Message，这里通过getPostMessage(r)方法得到了Message对象，getPostMessage(r)源码如下：</p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Message <span class="hljs-title">getPostMessage</span><span class="hljs-params">(Runnable r)</span> </span>&#123;        Message m = Message.obtain();        m.callback = r;        <span class="hljs-keyword">return</span> m;    &#125;</code></pre><p>可以看到，在getPostMessage方法中将Runnable赋值给了Message.callback，此处我们先立一个Flag。</p><p>接下来追溯到sendMessageDelayed方法中：</p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">sendMessageDelayed</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> Message msg, <span class="hljs-keyword">long</span> delayMillis)</span> </span>&#123;        <span class="hljs-keyword">if</span> (delayMillis &lt; <span class="hljs-number">0</span>) &#123;            delayMillis = <span class="hljs-number">0</span>;        &#125;        <span class="hljs-keyword">return</span> sendMessageAtTime(msg, SystemClock.uptimeMillis() + delayMillis);    &#125;</code></pre><p>在这个方法中我们终于看到了sendMessageAtTime方法，其源码如下：</p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">sendMessageAtTime</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> Message msg, <span class="hljs-keyword">long</span> uptimeMillis)</span> </span>&#123;        MessageQueue queue = mQueue;        <span class="hljs-keyword">if</span> (queue == <span class="hljs-keyword">null</span>) &#123;            RuntimeException e = <span class="hljs-keyword">new</span> RuntimeException(                    <span class="hljs-keyword">this</span> + <span class="hljs-string">&quot; sendMessageAtTime() called with no mQueue&quot;</span>);            Log.w(<span class="hljs-string">&quot;Looper&quot;</span>, e.getMessage(), e);            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;        &#125;        <span class="hljs-keyword">return</span> enqueueMessage(queue, msg, uptimeMillis);    &#125;</code></pre><p>这个方法中的代码逻辑很简单，仅仅调用了enqueueMessage方法，源码如下：</p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">enqueueMessage</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> MessageQueue queue, <span class="hljs-meta">@NonNull</span> Message msg,</span></span><span class="hljs-function"><span class="hljs-params">            <span class="hljs-keyword">long</span> uptimeMillis)</span> </span>&#123;        msg.target = <span class="hljs-keyword">this</span>;        msg.workSourceUid = ThreadLocalWorkSource.getUid();        <span class="hljs-keyword">if</span> (mAsynchronous) &#123;            msg.setAsynchronous(<span class="hljs-keyword">true</span>);        &#125;        <span class="hljs-keyword">return</span> queue.enqueueMessage(msg, uptimeMillis);    &#125;</code></pre><p>在这个方法中我们需要注意的一点– msg.target = this，把当前Handler的对象赋值给了Message.target。紧接着调用了MessageQueue的enqueueMessage方法。MessageQueue这个类我们在上边已经碰到过了。即在实例化Handler的时候将mLooper.mQueue赋值给了Handler的mQueue.那么现在是时候来认识一下MessageQueue了。</p><h3 id="3-MessageQueue"><a href="#3-MessageQueue" class="headerlink" title="3.MessageQueue"></a>3.MessageQueue</h3><p>上一小节中我们在Handler的构造方法中看到了将mLooper.mQueue赋值给了Handler中的mQueue。而MessageQueue从名字上似乎也可以看出来它是一个存储消息的队列。并且在Handler的enqueueMessage方法中通过MessageQueue的enqueueMessage将消息添加到了MessageQueue中。接下来，我们看下enqueueMessage的源码：</p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">enqueueMessage</span><span class="hljs-params">(Message msg, <span class="hljs-keyword">long</span> when)</span> </span>&#123;        <span class="hljs-keyword">if</span> (msg.target == <span class="hljs-keyword">null</span>) &#123;            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(<span class="hljs-string">&quot;Message must have a target.&quot;</span>);        &#125;        <span class="hljs-keyword">if</span> (msg.isInUse()) &#123;            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalStateException(msg + <span class="hljs-string">&quot; This message is already in use.&quot;</span>);        &#125;        <span class="hljs-keyword">synchronized</span> (<span class="hljs-keyword">this</span>) &#123;            <span class="hljs-keyword">if</span> (mQuitting) &#123;                IllegalStateException e = <span class="hljs-keyword">new</span> IllegalStateException(                        msg.target + <span class="hljs-string">&quot; sending message to a Handler on a dead thread&quot;</span>);                Log.w(TAG, e.getMessage(), e);                msg.recycle();                <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;            &#125;            msg.markInUse();            msg.when = when;            Message p = mMessages;            <span class="hljs-keyword">boolean</span> needWake;            <span class="hljs-keyword">if</span> (p == <span class="hljs-keyword">null</span> || when == <span class="hljs-number">0</span> || when &lt; p.when) &#123;                <span class="hljs-comment">// New head, wake up the event queue if blocked.</span>                msg.next = p;                mMessages = msg;                needWake = mBlocked;            &#125; <span class="hljs-keyword">else</span> &#123;                <span class="hljs-comment">// Inserted within the middle of the queue.  Usually we don&#x27;t have to wake</span>                <span class="hljs-comment">// up the event queue unless there is a barrier at the head of the queue</span>                <span class="hljs-comment">// and the message is the earliest asynchronous message in the queue.</span>                needWake = mBlocked &amp;&amp; p.target == <span class="hljs-keyword">null</span> &amp;&amp; msg.isAsynchronous();                Message prev;                <span class="hljs-keyword">for</span> (;;) &#123;                    prev = p;                    p = p.next;                    <span class="hljs-keyword">if</span> (p == <span class="hljs-keyword">null</span> || when &lt; p.when) &#123;                        <span class="hljs-keyword">break</span>;                    &#125;                    <span class="hljs-keyword">if</span> (needWake &amp;&amp; p.isAsynchronous()) &#123;                        needWake = <span class="hljs-keyword">false</span>;                    &#125;                &#125;                msg.next = p; <span class="hljs-comment">// invariant: p == prev.next</span>                prev.next = msg;            &#125;            <span class="hljs-comment">// We can assume mPtr != 0 because mQuitting is false.</span>            <span class="hljs-keyword">if</span> (needWake) &#123;                nativeWake(mPtr);            &#125;        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;    &#125;</code></pre><p>emmmmmm…阅读源码发现MessageQueue是一个用单项链表实现的队列，为什么是用链表？其实细想一下也不奇怪，因为我们可能频繁的将Message进行插入和删除。而使用链表性能上很明显要优于顺序表。这一段代码就是一个将Message插入到链表的一个过程，其实也没什么可以解释的。</p><p>既然有插入消息，那必然也会有取出消息。我们进入MessageQueue的源码，发现在MessageQueue中发现还有另外一个叫next的方法：</p><pre><code class="hljs java"><span class="hljs-function">Message <span class="hljs-title">next</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-comment">// Return here if the message loop has already quit and been disposed.</span>        <span class="hljs-comment">// This can happen if the application tries to restart a looper after quit</span>        <span class="hljs-comment">// which is not supported.</span>        <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> ptr = mPtr;        <span class="hljs-keyword">if</span> (ptr == <span class="hljs-number">0</span>) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;        &#125;        <span class="hljs-keyword">int</span> pendingIdleHandlerCount = -<span class="hljs-number">1</span>; <span class="hljs-comment">// -1 only during first iteration</span>        <span class="hljs-keyword">int</span> nextPollTimeoutMillis = <span class="hljs-number">0</span>;        <span class="hljs-keyword">for</span> (;;) &#123;            <span class="hljs-keyword">if</span> (nextPollTimeoutMillis != <span class="hljs-number">0</span>) &#123;                Binder.flushPendingCommands();            &#125;            nativePollOnce(ptr, nextPollTimeoutMillis);            <span class="hljs-keyword">synchronized</span> (<span class="hljs-keyword">this</span>) &#123;                <span class="hljs-comment">// Try to retrieve the next message.  Return if found.</span>                <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> now = SystemClock.uptimeMillis();                Message prevMsg = <span class="hljs-keyword">null</span>;                Message msg = mMessages;                <span class="hljs-keyword">if</span> (msg != <span class="hljs-keyword">null</span> &amp;&amp; msg.target == <span class="hljs-keyword">null</span>) &#123;                    <span class="hljs-comment">// Stalled by a barrier.  Find the next asynchronous message in the queue.</span>                    <span class="hljs-keyword">do</span> &#123;                        prevMsg = msg;                        msg = msg.next;                    &#125; <span class="hljs-keyword">while</span> (msg != <span class="hljs-keyword">null</span> &amp;&amp; !msg.isAsynchronous());                &#125;                <span class="hljs-keyword">if</span> (msg != <span class="hljs-keyword">null</span>) &#123;                    <span class="hljs-keyword">if</span> (now &lt; msg.when) &#123;                        <span class="hljs-comment">// Next message is not ready.  Set a timeout to wake up when it is ready.</span>                        nextPollTimeoutMillis = (<span class="hljs-keyword">int</span>) Math.min(msg.when - now, Integer.MAX_VALUE);                    &#125; <span class="hljs-keyword">else</span> &#123;                        <span class="hljs-comment">// Got a message.</span>                        mBlocked = <span class="hljs-keyword">false</span>;                        <span class="hljs-keyword">if</span> (prevMsg != <span class="hljs-keyword">null</span>) &#123;                            prevMsg.next = msg.next;                        &#125; <span class="hljs-keyword">else</span> &#123;                            mMessages = msg.next;                        &#125;                        msg.next = <span class="hljs-keyword">null</span>;                        <span class="hljs-keyword">if</span> (DEBUG) Log.v(TAG, <span class="hljs-string">&quot;Returning message: &quot;</span> + msg);                        msg.markInUse();                        <span class="hljs-keyword">return</span> msg;                    &#125;                &#125; <span class="hljs-keyword">else</span> &#123;                    <span class="hljs-comment">// No more messages.</span>                    nextPollTimeoutMillis = -<span class="hljs-number">1</span>;                &#125;                <span class="hljs-comment">// Process the quit message now that all pending messages have been handled.</span>                <span class="hljs-keyword">if</span> (mQuitting) &#123;                    dispose();                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;                &#125;                <span class="hljs-comment">// If first time idle, then get the number of idlers to run.</span>                <span class="hljs-comment">// Idle handles only run if the queue is empty or if the first message</span>                <span class="hljs-comment">// in the queue (possibly a barrier) is due to be handled in the future.</span>                <span class="hljs-keyword">if</span> (pendingIdleHandlerCount &lt; <span class="hljs-number">0</span>                        &amp;&amp; (mMessages == <span class="hljs-keyword">null</span> || now &lt; mMessages.when)) &#123;                    pendingIdleHandlerCount = mIdleHandlers.size();                &#125;                <span class="hljs-keyword">if</span> (pendingIdleHandlerCount &lt;= <span class="hljs-number">0</span>) &#123;                    <span class="hljs-comment">// No idle handlers to run.  Loop and wait some more.</span>                    mBlocked = <span class="hljs-keyword">true</span>;                    <span class="hljs-keyword">continue</span>;                &#125;                <span class="hljs-keyword">if</span> (mPendingIdleHandlers == <span class="hljs-keyword">null</span>) &#123;                    mPendingIdleHandlers = <span class="hljs-keyword">new</span> IdleHandler[Math.max(pendingIdleHandlerCount, <span class="hljs-number">4</span>)];                &#125;                mPendingIdleHandlers = mIdleHandlers.toArray(mPendingIdleHandlers);            &#125;            <span class="hljs-comment">// Run the idle handlers.</span>            <span class="hljs-comment">// We only ever reach this code block during the first iteration.</span>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; pendingIdleHandlerCount; i++) &#123;                <span class="hljs-keyword">final</span> IdleHandler idler = mPendingIdleHandlers[i];                mPendingIdleHandlers[i] = <span class="hljs-keyword">null</span>; <span class="hljs-comment">// release the reference to the handler</span>                <span class="hljs-keyword">boolean</span> keep = <span class="hljs-keyword">false</span>;                <span class="hljs-keyword">try</span> &#123;                    keep = idler.queueIdle();                &#125; <span class="hljs-keyword">catch</span> (Throwable t) &#123;                    Log.wtf(TAG, <span class="hljs-string">&quot;IdleHandler threw exception&quot;</span>, t);                &#125;                <span class="hljs-keyword">if</span> (!keep) &#123;                    <span class="hljs-keyword">synchronized</span> (<span class="hljs-keyword">this</span>) &#123;                        mIdleHandlers.remove(idler);                    &#125;                &#125;            &#125;            <span class="hljs-comment">// Reset the idle handler count to 0 so we do not run them again.</span>            pendingIdleHandlerCount = <span class="hljs-number">0</span>;            <span class="hljs-comment">// While calling an idle handler, a new message could have been delivered</span>            <span class="hljs-comment">// so go back and look again for a pending message without waiting.</span>            nextPollTimeoutMillis = <span class="hljs-number">0</span>;        &#125;    &#125;</code></pre><p>这个方法的返回值是一个Message，很显然，这个方法就是从MessageQueue中取出消息的。我们注意到第12行代码，这里是一个for(;;)死循环。如果在MessageQueue中有Message的时候，next会将这个Message移除并返回。而当MessageQueue为空时，next方法将会被阻塞。</p><h3 id="4-回归Looper"><a href="#4-回归Looper" class="headerlink" title="4.回归Looper"></a>4.回归Looper</h3><p>我们了解了MessageQueue的插入和删除，但直到此时还没有看到在什么地方调用了MessageQueue的next方法将消息取出的。此时，我们将目光再次回归到Looper中。如果你刚才留意了ActivityThread中的main方法的话，应该注意到了main方法中的Looper.loop()方法,没错，一切将从这里开始，只有调用loop方法后消息循环系统才会真正运作起来，我们们来看loop的源码：</p><pre><code class="hljs reasonml"><span class="hljs-comment">/**</span><span class="hljs-comment">    * Run the message queue in this thread. Be sure to call</span><span class="hljs-comment">    * &#123;@link #quit()&#125; to end the loop.</span><span class="hljs-comment">    */</span>   public static void loop<span class="hljs-literal">()</span> &#123;       final Looper me = my<span class="hljs-constructor">Looper()</span>;       <span class="hljs-keyword">if</span> (me<span class="hljs-operator"> == </span>null) &#123;           throw <span class="hljs-keyword">new</span> <span class="hljs-constructor">RuntimeException(<span class="hljs-string">&quot;No Looper; Looper.prepare() wasn&#x27;t called on this thread.&quot;</span>)</span>;       &#125;       final MessageQueue queue = me.mQueue;       <span class="hljs-comment">// Make sure the identity of this thread is that of the local process,</span>       <span class="hljs-comment">// and keep track of what that identity token actually is.</span>       <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Binder</span>.</span></span>clear<span class="hljs-constructor">CallingIdentity()</span>;       final long ident = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Binder</span>.</span></span>clear<span class="hljs-constructor">CallingIdentity()</span>;       <span class="hljs-keyword">for</span> (;;) &#123;           Message msg = queue.next<span class="hljs-literal">()</span>; <span class="hljs-comment">// might block</span>           <span class="hljs-keyword">if</span> (msg<span class="hljs-operator"> == </span>null) &#123;               <span class="hljs-comment">// No message indicates that the message queue is quitting.</span>               return;           &#125;           <span class="hljs-comment">// This must be in a local variable, in case a UI event sets the logger</span>           final Printer logging = me.mLogging;           <span class="hljs-keyword">if</span> (logging != null) &#123;               logging.println(<span class="hljs-string">&quot;&gt;&gt;&gt;&gt;&gt; Dispatching to &quot;</span> + msg.target + <span class="hljs-string">&quot; &quot;</span> +                       msg.callback + <span class="hljs-string">&quot;: &quot;</span> + msg.what);           &#125;           final long traceTag = me.mTraceTag;           <span class="hljs-keyword">if</span> (traceTag != <span class="hljs-number">0</span><span class="hljs-operator"> &amp;&amp; </span><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Trace</span>.</span></span>is<span class="hljs-constructor">TagEnabled(<span class="hljs-params">traceTag</span>)</span>) &#123;               <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Trace</span>.</span></span>trace<span class="hljs-constructor">Begin(<span class="hljs-params">traceTag</span>, <span class="hljs-params">msg</span>.<span class="hljs-params">target</span>.<span class="hljs-params">getTraceName</span>(<span class="hljs-params">msg</span>)</span>);           &#125;           <span class="hljs-keyword">try</span> &#123;               msg.target.dispatch<span class="hljs-constructor">Message(<span class="hljs-params">msg</span>)</span>;           &#125; finally &#123;               <span class="hljs-keyword">if</span> (traceTag != <span class="hljs-number">0</span>) &#123;                   <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Trace</span>.</span></span>trace<span class="hljs-constructor">End(<span class="hljs-params">traceTag</span>)</span>;               &#125;           &#125;           <span class="hljs-keyword">if</span> (logging != null) &#123;               logging.println(<span class="hljs-string">&quot;&lt;&lt;&lt;&lt;&lt; Finished to &quot;</span> + msg.target + <span class="hljs-string">&quot; &quot;</span> + msg.callback);           &#125;           <span class="hljs-comment">// Make sure that during the course of dispatching the</span>           <span class="hljs-comment">// identity of the thread wasn&#x27;t corrupted.</span>           final long newIdent = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Binder</span>.</span></span>clear<span class="hljs-constructor">CallingIdentity()</span>;           <span class="hljs-keyword">if</span> (ident != newIdent) &#123;               <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Log</span>.</span></span>wtf(TAG, <span class="hljs-string">&quot;Thread identity changed from 0x&quot;</span>                       + <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Long</span>.</span></span><span class="hljs-keyword">to</span><span class="hljs-constructor">HexString(<span class="hljs-params">ident</span>)</span> + <span class="hljs-string">&quot; to 0x&quot;</span>                       + <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Long</span>.</span></span><span class="hljs-keyword">to</span><span class="hljs-constructor">HexString(<span class="hljs-params">newIdent</span>)</span> + <span class="hljs-string">&quot; while dispatching to &quot;</span>                       + msg.target.get<span class="hljs-constructor">Class()</span>.get<span class="hljs-constructor">Name()</span> + <span class="hljs-string">&quot; &quot;</span>                       + msg.callback + <span class="hljs-string">&quot; what=&quot;</span> + msg.what);           &#125;           msg.recycle<span class="hljs-constructor">Unchecked()</span>;       &#125;   &#125;</code></pre><p>这里的loop方法同样也是一个死循环。只有当MessageQueue.next()返回null时才会跳出循环。上一小节中我们分析了Message.next方法是一个阻塞操作当MessageQueue中没有消息时next方法会一直被阻塞，因此也致使loop方法被阻塞。而当MessageQueue中添加了一条消息后，loop方法则会立即通过MessageQueue.next方法将消息取出并处理。可以看到通过调用msg.target.dispatchMessage(msg)处理消息。而msg.target是什么呢？我们回过头来看本章第二小节，在Handler的enqueueMessage中将Handler赋值给了msg.target,我们从Message的源码中也可以得到印证：</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Message</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Parcelable</span> </span>&#123;...  <span class="hljs-comment">/*package*/</span> Handler target;...&#125;</code></pre><p>也就是此时的target其实就是Handler本身，此时我们找到Handler的dispatchMessage方法，源码如下：</p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">dispatchMessage</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> Message msg)</span> </span>&#123;       <span class="hljs-keyword">if</span> (msg.callback != <span class="hljs-keyword">null</span>) &#123;           handleCallback(msg);       &#125; <span class="hljs-keyword">else</span> &#123;           <span class="hljs-keyword">if</span> (mCallback != <span class="hljs-keyword">null</span>) &#123;               <span class="hljs-keyword">if</span> (mCallback.handleMessage(msg)) &#123;                   <span class="hljs-keyword">return</span>;               &#125;           &#125;           handleMessage(msg);       &#125;   &#125;</code></pre><p>看到这里想必大家应该就都明白了，上述代码首先检查了Message的callback是否为null，不为null就通过handleCallback来处理消息。Message的callback是一个Runnable对象，实际上就是Handler的post方法传递的Runnable参数，此时对应的是我们在第一章中的场景二。handleCallback方法代码如下：</p><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">handleCallback</span><span class="hljs-params">(Message message)</span> </span>&#123;        message.callback.<span class="hljs-built_in">run</span>();    &#125;</code></pre><p>emmmm….原来我们post出来的Runnable的run方法就是在这里被调用的呀！</p><p>接着检查mCallback是否为null，不为null就调用mCallback的handleMessage方法处理消息，这里对应的是我们在实例化Handler时传入的Callback参数。如果mCallback也为null的话则调用了Handler中的handleMessage(msg)方法。这不正对应了我们第一章的场景一嘛！因此现在再来看下面的代码会不会豁然开朗呢？</p><pre><code class="hljs aspectj"><span class="hljs-comment">//实例化Handler对象 传入Callback参数并重写handleMessage(Message msg)</span> <span class="hljs-keyword">static</span> Handler mHandler1 = <span class="hljs-keyword">new</span> Handler(<span class="hljs-keyword">new</span> Handler.Callback() &#123;        <span class="hljs-meta">@Override</span>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">handleMessage</span><span class="hljs-params">(Message msg)</span> </span>&#123;            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;        &#125;    &#125;);<span class="hljs-comment">//实例化Handler对象 并重写Handler中的handleMessage(Message msg)</span>handleMessage(Message msg) <span class="hljs-keyword">static</span> Handler mHandler = <span class="hljs-keyword">new</span> Handler()&#123;  <span class="hljs-meta">@Override</span>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">handleMessage</span><span class="hljs-params">(Message msg)</span> </span>&#123;            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;        &#125;&#125;;</code></pre><p>到这里我们总算把Handler的消息机制给串联了起来。</p><h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h2><p> Handler、Looper和MessageQueue三者共支撑了Android中的消息机制。在使用的时候我们通常只需要和Handler打交道，通过Handler将消息发送出来。而在Handler内部的MessageQueue通过equeueMessage方法将Handler发送的消息以队列的形式进行存储。而Looper则作为一个消息泵，通过loop方法不断的调用MessageQueue的next方法将消息取出并进行处理，依次完成了整个的消息循环。同时，我们还应该特别强调ThreadLocal，正是有了它的存在，才使得我们能够轻松的进行切换线程。</p><p>整个过程当如下图所示：</p><p><img src="https://raw.githubusercontent.com/zhpanvip/Resource/master/image/1101.jfif"></p><p>看到这里，在第一章中提到的几点疑惑相信你心中应该也已经有了答案。我们不妨再来总结一下：</p><p><strong>问题1：</strong> 在场景1中Handler在子线程中发送出来的消息为什么到了dispatchMessage方法就变成了主线程呢？<br>虽然post消息是在子线程，但因为Handler是在主线程中被实例化的，由于在ActivityThread的main方法中调用了Looper.prepare(),因此，通过ThreadLocal将Looper缓存到了主线程中，而MessageQueue是Looper的成员变量，所以其也应是在主线程中。同时，Looper.loop方法将Message取出并通过Message.target.handlerMessage方法最终调用了dispatchMessage方法，所以dispatchMessage方法当然也是在主线程了。</p><p><strong>问题2：</strong> 在场景2的代码中我故意在子线程中调用了Handler的postDelayed方法，那么此时通过postDelayed方法发出来的Runnable究竟是运行在主线程还是子线程呢？</p><p>这个问题其实和问题1本质上是同一个问题，就无需多言了！</p><p><strong>问题3</strong>在文中已经给出了答案，这里也不再赘述。</p>]]></content>
    
    
    
    <tags>
      
      <tag>源码分析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android夜间模式实现方案</title>
    <link href="/2017/07/27/10.Android%E5%A4%9C%E9%97%B4%E6%A8%A1%E5%BC%8F%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%A1%88/"/>
    <url>/2017/07/27/10.Android%E5%A4%9C%E9%97%B4%E6%A8%A1%E5%BC%8F%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%A1%88/</url>
    
    <content type="html"><![CDATA[<p>对于一款阅读类的软件，夜间模式是不可缺少的。最初看到这个需求时候觉得无从下手，没有一点头绪。后来通过查阅资料发现Android官方在Support Library 23.2.0中已经加入了夜间主题。也就是只需要通过更换主题便可实现日间模式和夜间模式的切换。下面截取项目实现的夜间模式效果图：<br><img src="https://raw.githubusercontent.com/zhpanvip/Resource/master/image/1001.jfif"></p><p>效果看起来还比较nice，没有闪屏，过度也比较平滑。那么项目中的这个日间、夜间模式切换效果是如何实现的呢？下面将从以下几个方面来讲解：</p><ul><li>一 实现夜间模式需要的配置</li><li>二 实现白天和夜间模式的切换</li><li>三 实现夜间模式时遇到的问题及解决方案</li></ul><p>一、实现夜间模式需要的配置<br>1.首先在gradel中引入以下依赖</p><pre><code class="hljs apache"><span class="hljs-attribute">compile</span> &#x27;com.android.support:appcompat-v<span class="hljs-number">7</span>:<span class="hljs-number">25</span>.<span class="hljs-number">3</span>.<span class="hljs-number">1</span>&#x27;</code></pre><p>2.让我们项目的主题继承夜间模式主题，在style中设置如下主题：</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;AppTheme&quot;</span> <span class="hljs-attr">parent</span>=<span class="hljs-string">&quot;Theme.AppCompat.DayNight&quot;</span>&gt;</span><span class="xml">       <span class="hljs-comment">&lt;!-- Customize your theme here. --&gt;</span></span><span class="xml">       <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;colorPrimary&quot;</span>&gt;</span>@color/colorPrimary<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span></span><span class="xml">       <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;colorPrimaryDark&quot;</span>&gt;</span>@color/colorPrimaryDark<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span></span><span class="xml">       <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;colorAccent&quot;</span>&gt;</span>@color/colorAccent<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span></span>   <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></code></pre><p>3.新建drawable-night和values-night的资源目录。如果要适配不同分辨率的屏幕则可新建drawable-night-hdip、drawable-night-xhdpi等目录来存放不同分辨率的图片资源。values-night目录下存放与夜间模式相关的value文件。本篇文章讲解仅以夜间模式和日间模式的颜色为例，在values-night目录下新建color.xml文件。</p><p>（1）新建values-night目录，如下：</p><p><img src="https://raw.githubusercontent.com/zhpanvip/Resource/master/image/1002.jfif"></p><p><img src="https://raw.githubusercontent.com/zhpanvip/Resource/master/image/1003.jfif"></p><p>（2）在values-night目录下新建colors文件，如下：<br><img src="https://raw.githubusercontent.com/zhpanvip/Resource/master/image/1004.jfif"></p><p><img src="https://raw.githubusercontent.com/zhpanvip/Resource/master/image/1005.jfif"></p><p>接下来只需要在对应的colors文件下写不同的颜色值(夜间颜色值和白天颜色值)即可。至此关于实现夜间模式的配置已经基本完成。</p><p>二、实现白天和夜间模式的切换<br>1.启动App时检测是否处于夜间模式，如果是则切换至夜间主题。这个需要在自己项目的Application中实现。可在自己项目的Application中添加以下代码：</p><pre><code class="hljs arduino"><span class="hljs-comment">/**</span><span class="hljs-comment">  * 初始化夜间模式</span><span class="hljs-comment">  */</span>   <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setNightMode</span><span class="hljs-params">()</span> </span>&#123;       <span class="hljs-keyword">boolean</span> nightMode = UserInfoTools.isNightMode(<span class="hljs-keyword">this</span>);       AppCompatDelegate.setDefaultNightMode(nightMode ?               AppCompatDelegate.MODE_NIGHT_YES : AppCompatDelegate.MODE_NIGHT_NO);   &#125;</code></pre><p>这里需要介绍一下有关夜间模式的几个常量值。AppCompatDelegate.setDefaultNightMode(mode),其中mode有一下四个值：</p><ul><li>MODE_NIGHT_NO： 亮色(light)主题，不使用夜间模式</li><li>MODE_NIGHT_YES：暗色(dark)主题，使用夜间模式</li><li>MODE_NIGHT_AUTO：根据当前时间自动切换 亮色(light)/暗色(dark)主题（22：00-07：00时间段内自动切换为夜间模式）</li><li>MODE_NIGHT_FOLLOW_SYSTEM(默认选项)：设置为跟随系统，通常为MODE_NIGHT_NO<br>2.接下来需要我们在设置页面点击ToggleButton时切换白天/夜间模式。<br>具体实现如下：<pre><code class="hljs jboss-cli">private void <span class="hljs-keyword">set</span>NightMode<span class="hljs-params">()</span> &#123;         <span class="hljs-string">//</span>  获取当前模式        int currentNightMode = getResources<span class="hljs-params">()</span><span class="hljs-string">.getConfiguration</span><span class="hljs-params">()</span><span class="hljs-string">.uiMode</span> &amp; Configuration.UI_MODE_NIGHT_MASK;        <span class="hljs-string">//</span>  将是否为夜间模式保存到SharedPreferences        UserInfoTools.<span class="hljs-keyword">set</span>NightMode<span class="hljs-params">(this, <span class="hljs-attr">currentNightMode</span> == Configuration.UI_MODE_NIGHT_NO)</span>;        <span class="hljs-string">//</span>  切换模式        getDelegate<span class="hljs-params">()</span><span class="hljs-string">.setDefaultNightMode</span><span class="hljs-params">(<span class="hljs-attr">currentNightMode</span> == Configuration.UI_MODE_NIGHT_NO ?</span><span class="hljs-params">                AppCompatDelegate.MODE_NIGHT_YES : AppCompatDelegate.MODE_NIGHT_NO)</span>;        UserInfoTools.<span class="hljs-keyword">set</span>ChangeNightMode<span class="hljs-params">(this,true)</span>;        <span class="hljs-string">//</span>  重启Activity        recreate<span class="hljs-params">()</span>;    &#125;private void <span class="hljs-keyword">set</span>Listener<span class="hljs-params">()</span> &#123;        mToggleButton.<span class="hljs-keyword">set</span>OnClickListener<span class="hljs-params">((View v)</span> -&gt; &#123;            <span class="hljs-keyword">set</span>NightMode<span class="hljs-params">()</span>;        &#125;);    &#125;</code></pre>注意，上面代码中设置白天/夜间模式的代码的最后调用了recreate()方法重启了当前Activity。但这样写切换模式时会有闪屏问题，体验比较差。具体优化将在下一节中实现。</li></ul><p>三 、实现夜间模式时遇到的问题及解决方案<br>利用谷歌官方提供的这个方案实现夜间模式的过程中遇到了不少的问题。且网上资料较少，大多文章讲解仅仅以一个简单的demo为例。但在用到实际项目中时会遇到很多的麻烦。这里主要总结了笔者曾经遇到过的难以解决的几个问题。<br>1.白天/夜间模式切换时闪屏问题<br>上一节中已经提到了在调用recreate()方法时会有闪屏问题。其实闪屏问题的解决比较简单。我们大可以不掉用recreate()方法，而是自己重启当前activity并为activity设置启动和退出动画即可！实现代码如下：</p><pre><code class="hljs groovy"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> setNightMode() &#123;       <span class="hljs-comment">//  获取当前模式</span>       <span class="hljs-keyword">int</span> currentNightMode = getResources().getConfiguration().uiMode &amp; Configuration.UI_MODE_NIGHT_MASK;       <span class="hljs-comment">//  将是否为夜间模式保存到SharedPreferences</span>       UserInfoTools.setNightMode(<span class="hljs-built_in">this</span>, currentNightMode == Configuration.UI_MODE_NIGHT_NO);       <span class="hljs-comment">//  切换模式</span>       getDelegate().setDefaultNightMode(currentNightMode == Configuration.UI_MODE_NIGHT_NO ?               AppCompatDelegate.MODE_NIGHT_YES : AppCompatDelegate.MODE_NIGHT_NO);       UserInfoTools.setChangeNightMode(<span class="hljs-built_in">this</span>,<span class="hljs-literal">true</span>);              <span class="hljs-comment">//recreate();</span>       startActivity(<span class="hljs-keyword">new</span> Intent(<span class="hljs-built_in">this</span>,SettingActivity.<span class="hljs-keyword">class</span>));       overridePendingTransition(R.anim.animo_alph_close, R.anim.animo_alph_close);       finish();   &#125;</code></pre><p>如上代码，我们自行调用startActivity启动了设置页面并为其添加了一个透明渐变的启动动画。最后调用finish结束掉旧的设置页面。这样闪屏问题便迎刃而解。模式切换也变得流畅自然。<br> 2.切换夜间模式后返回MainActivity,MainActivity页面没有更新。解决这个问题可以在切换模式后从设置页面发送一个广播，然后在MainActivity中接收到这个广播后重启MainActivity即可。根据官方的推荐更换夜间模式后需要调用recreate()方法刷新页面。但是recreate()方法巨坑无比，调用recreate()方法引起了诸多问题。详见问题3、4、5。因此解决这个问题笔者并没有在MainActivity调用中调用recreate()方法。而是在SettingActivity中定义了一个boolean值来标记是否切换了夜间模式。然后重写了onKeyDown()方法。如果切换了夜间模式则在返回时发出一个广播结束掉MainActivity,然后调用startActivity()重启了MainActivity并添加了启动动画，让用户感觉是只是返回了主页面。其实思想跟解决问题1有些类似。还是结合代码来看吧。</p><p>SettingActivity中的代码</p><pre><code class="hljs reasonml">@Override   public boolean on<span class="hljs-constructor">KeyDown(<span class="hljs-params">int</span> <span class="hljs-params">keyCode</span>, KeyEvent <span class="hljs-params">event</span>)</span> &#123;       <span class="hljs-keyword">if</span> (keyCode<span class="hljs-operator"> == </span>KeyEvent.KEYCODE_BACK<span class="hljs-operator"> &amp;&amp; </span>event.get<span class="hljs-constructor">Action()</span><span class="hljs-operator"> == </span>KeyEvent.ACTION_DOWN) &#123;           go<span class="hljs-constructor">Back()</span>;           return <span class="hljs-literal">true</span>;       &#125;       return super.on<span class="hljs-constructor">KeyDown(<span class="hljs-params">keyCode</span>, <span class="hljs-params">event</span>)</span>;   &#125;   <span class="hljs-keyword">private</span> void go<span class="hljs-constructor">Back()</span> &#123;       <span class="hljs-keyword">if</span> (isChangeNightMode) &#123;  <span class="hljs-comment">//  如果改变了夜间模式，则重启MainActivity</span>           <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">EventBus</span>.</span></span>get<span class="hljs-constructor">Default()</span>.post(<span class="hljs-keyword">new</span> <span class="hljs-constructor">NightModeEvent()</span>);           Intent intent = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Intent(<span class="hljs-params">this</span>, MainActivity.<span class="hljs-params">class</span>)</span>;           intent.put<span class="hljs-constructor">Extra(<span class="hljs-string">&quot;nightMode&quot;</span>, <span class="hljs-params">true</span>)</span>;           start<span class="hljs-constructor">Activity(<span class="hljs-params">intent</span>)</span>;           override<span class="hljs-constructor">PendingTransition(R.<span class="hljs-params">anim</span>.<span class="hljs-params">animo_alph_close</span>, R.<span class="hljs-params">anim</span>.<span class="hljs-params">activity_close</span>)</span>;       &#125;       finish<span class="hljs-literal">()</span>;   &#125;</code></pre><p>MainActivity中的代码：</p><pre><code class="hljs reasonml"> @Override   public void on<span class="hljs-constructor">Create(Bundle <span class="hljs-params">savedInstanceState</span>)</span> &#123;       super.on<span class="hljs-constructor">Create(<span class="hljs-params">savedInstanceState</span>)</span>;       set<span class="hljs-constructor">ContentView(R.<span class="hljs-params">layout</span>.<span class="hljs-params">activity_main</span>)</span>;              re<span class="hljs-constructor">StartActivity()</span>   &#125;<span class="hljs-comment">//  改变夜间模式后返回时重启Activity</span>   <span class="hljs-keyword">private</span> void re<span class="hljs-constructor">StartActivity()</span> &#123;       Intent intent = get<span class="hljs-constructor">Intent()</span>;       boolean nightMode = intent.get<span class="hljs-constructor">BooleanExtra(<span class="hljs-string">&quot;nightMode&quot;</span>, <span class="hljs-params">false</span>)</span>;       <span class="hljs-keyword">if</span>(nightMode&amp;&amp;<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">UserInfoTools</span>.</span></span>get<span class="hljs-constructor">IsLogin(<span class="hljs-params">this</span>)</span>)&#123;           <span class="hljs-comment">//  自动切换到“我的”页面</span>           mRbMe.perform<span class="hljs-constructor">Click()</span>;       &#125;   &#125;<span class="hljs-comment">/**</span><span class="hljs-comment">    * 接收到夜间模式改变的事件后结束当前Activity</span><span class="hljs-comment">    * @param event</span><span class="hljs-comment">    */</span> @Subscribe   public void set<span class="hljs-constructor">NightMode(NightModeEvent <span class="hljs-params">event</span>)</span> &#123;       finish<span class="hljs-literal">()</span>;   &#125;</code></pre><p>最后还有点问题需要说明，由问题1我们可以知道，改变模式后，我们重启了SettingActivity。因此在该类中定义的一个标记是否切换了夜间模式的boolean值并不能起到作用。解决办法是将这个值保存到SharedPreference中。然后重启SettingActivity后再取出该值。可以看代码，这点真心有点绕啊。。。<br>注意问题1中的setNightMode()方法中有一句代码 UserInfoTools.setChangeNightMode(this,true);将改变了夜间模式设置为了true并保存到了SharedPreferences中，然后在onCreate()中有以下代码来初始化isChangeNightMode的值。</p><pre><code class="hljs reasonml">@Override   public void on<span class="hljs-constructor">Create(Bundle <span class="hljs-params">savedInstanceState</span>)</span> &#123;       super.on<span class="hljs-constructor">Create(<span class="hljs-params">savedInstanceState</span>)</span>;       set<span class="hljs-constructor">ContentView(R.<span class="hljs-params">layout</span>.<span class="hljs-params">activity_main</span>)</span>;                isChangeNightMode=<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">UserInfoTools</span>.</span></span>is<span class="hljs-constructor">ChangeNightMode(<span class="hljs-params">this</span>)</span>;       <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">UserInfoTools</span>.</span></span>set<span class="hljs-constructor">ChangeNightMode(<span class="hljs-params">this</span>,<span class="hljs-params">false</span>)</span>;   &#125;</code></pre><p>3.设置白天/夜间模式后出现无故闪退问题<br>这个问题说来比较奇怪，原因是切换了夜间模式后在MainActivity中调用了recreate()方法。具体原因笔者也没有弄清楚，调试了好一阵子也没有找出个所以然来。后来果断放弃了在MainActivity中调用recreate()方法，而是换成了startActivity()重新启动了MainActivity。之后这个问题便不复存在了。</p><p>4.点击ToggleButton切换模式后应用黑屏，随后挂掉。这个问题的最终原因还是因为recreate()方法引起的。如果你用了ToggleButton切换白天/夜间模式，并且为ToggleButton设置了setOnCheckChangedListener()方法，那么你将有很大概率碰到这个问题。引起这个问题的原因是因为调用了recreate()方法后Activity重新启动，但是新启动的Activity保存了之前Activity的状态。因此在重启时候重新设置了TouggleButton，继而调用了又setOnCheckChangedListener()方法，结果悲剧了。。。一个死循环产生了，程序不黑屏才怪。因此最简单的办法是放弃recreate()方法，改用问题1中的方法！（其实细心的小伙伴应该已经发现了，我的代码中仅仅是为ToggleButton设置了setOnClickListener()….机智如我啊）如果你有强迫症必须要使用setOnCheckChangedListener和recreate()方法那么也不是没有解决方案。可以定义一个boolean成员变量，然后在onCreate()方法中判断savedInstanceState是否为null，然后给这个boolean成员变量赋值，并在setOnCheckChangedListener()方法中根据这个boolean成员变量的值去调用设置夜间模式的方法即可。</p><p>5.设置夜间模式后MainActivity调用recreate()方法，MainActivity中的”发现“页面没有加载出来。发现页面如下面图片所示，也就是一个Fragment中嵌套了一个ViewPager。调用recreate()后整个ViewPager消失了。。。没有加载出来！！！<br><img src="https://raw.githubusercontent.com/zhpanvip/Resource/master/image/1006.jfif"></p><p>解决方案，放弃使用recreate()，改用问题1中的方法！</p><p>万恶的recreate()方法！难道是我使用的姿势不对？</p><h3 id="好库推荐"><a href="#好库推荐" class="headerlink" title="好库推荐"></a>好库推荐</h3><p>给大家推荐一下<a href="https://github.com/zhpanvip/BannerViewPager">BannerViewPager</a>。这是一个基于ViewPager实现的具有强大功能的无限轮播库。通过<a href="https://github.com/zhpanvip/BannerViewPager">BannerViewPager</a>可以实现腾讯视频、QQ音乐、酷狗音乐、支付宝、天猫、淘宝、优酷视频、喜马拉雅、网易云音乐、哔哩哔哩等APP的Banner样式以及指示器样式。</p><p>欢迎大家到github关注<a href="https://github.com/zhpanvip/BannerViewPager">BannerViewPager</a>！</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>RxJava+Retrofit之token自动刷新（二）</title>
    <link href="/2017/07/27/9.RxJava-Retrofit%E4%B9%8Btoken%E8%87%AA%E5%8A%A8%E5%88%B7%E6%96%B0%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <url>/2017/07/27/9.RxJava-Retrofit%E4%B9%8Btoken%E8%87%AA%E5%8A%A8%E5%88%B7%E6%96%B0%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p><a href="http://blog.csdn.net/qq_20521573/article/details/70991850"> 上篇文章</a>主要对Retrofit做了封装，使之使用起来更加方便。在之前的封装中token过期再次刷新token后需要手动调用之前的请求，这种处理方式不够优雅，因此，在原有的基础上，本篇文章将基于上篇文章的封装并优化Token验证机制。使之能够实现过期自动刷新并重新调用请求。<br>接下来将通过以下几个小节来学习如何实现token验证。</p><ul><li>为什么要引入token机制</li><li>token机制的验证流程</li><li>RxJava+Retrofit封装实现token验证</li></ul><h1 id="一、为什么引入token机制"><a href="#一、为什么引入token机制" class="headerlink" title="一、为什么引入token机制"></a>一、为什么引入token机制</h1><h1 id="1-token是什么？"><a href="#1-token是什么？" class="headerlink" title="1.token是什么？"></a>1.token是什么？</h1><p>token意为令牌，通常是由客户端携带IMEI/Mac到服务器，服务器根据客户端的IMEI/Mac生成一段字符串并返回给客户端，并为其设置有效期。以此作为客户端和服务端交互的令牌。客户端每次请求都会携带token到服务器来代替用户名和密码。服务端验证token有效后则返回数据给客户端，否则返回特定的错误码给客户端。客户端根据错误码去做相应的处理。</p><h2 id="2-那么为什么引入token机制呢？"><a href="#2-那么为什么引入token机制呢？" class="headerlink" title="2.那么为什么引入token机制呢？"></a>2.那么为什么引入token机制呢？</h2><p>主要有以下两个原因：<br>（1）保证安全性。如果不引入token机制，那么我们每次请求数据都要携带用户名和密码。也就是每次请求数据用户名和密码都会在网络上传输。这样大大增加了安全风险，很容易被黑客截取。因此引入token机制也一定程度上保证了安全性。<br>（2）减小服务器压力。在引入token机制前，我们需要通过用户名和密码到服务器去验证用户身份是否合法。服务器认证用户名和密码是一个查询操作，如果用户量大，那么就会相应增加服务器的压力。而引入token机制后，服务器就可以将token作为一个用户的唯一标识来验证用户身份是否合法。这样可以大大减少服务器的压力。</p><h2 id="二、token机制的验证流程"><a href="#二、token机制的验证流程" class="headerlink" title="二、token机制的验证流程"></a>二、token机制的验证流程</h2><p>token的验证流程并非唯一的，至于使用怎样的验证流程可以自行确定。本文中采用OAuth2.0协议实现token验证机制。<br>主要步骤如下：</p><ol><li>通过用户名和密码登录成功获取token和refreshToken并保存到本地。</li><li>token的有效期为2小时，refreshToken的有效期为15天。</li><li>每次网络请求都需要带上token，而不必带上refreshToken。</li><li>如果服务器端判断token过期，则返回对应的错误码，客户端判断错误码后调用刷新token接口,重新获取token和refreshToken并存储。</li><li>如果连续15天未使用app或者用户修改了密码，则refreshToken过期，需要重新登录获取token和refreshToken。</li></ol><h1 id="三、RxJava-Retrofit封装实现token自动刷新"><a href="#三、RxJava-Retrofit封装实现token自动刷新" class="headerlink" title="三、RxJava+Retrofit封装实现token自动刷新"></a>三、RxJava+Retrofit封装实现token自动刷新</h1><p>有了以上两节的基础，我们就可以来自己实现token机制的验证了。在这里我们使用<a href="http://blog.csdn.net/qq_20521573/article/details/70991850">上篇文章</a>中封装的RxJava和Retrofit来实现token机制。</p><h2 id="1-登录认证，获取token和refresh-token"><a href="#1-登录认证，获取token和refresh-token" class="headerlink" title="1.登录认证，获取token和refresh_token"></a>1.登录认证，获取token和refresh_token</h2><p>登录时我们需要两个参数：用户名username、密码password以及appkey作为一个唯一id，每次登录成功服务器会返回token和refreshToken。登录请求的实体类LoginRequest如下：</p><pre><code class="hljs scala">public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginRequest</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BaseRequest</span></span>&#123;    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> userId;    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> password;&#125;</code></pre><p>接下来我们就可以来调用登录接口获取token了。登录成功后我们可将token和refreshToekn存储到本地。以提交表单为例，代码如下：</p><pre><code class="hljs reasonml">public void login<span class="hljs-literal">()</span> &#123;         Map&lt;String, Object&gt; map = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">MapUtils</span>.</span></span>entity<span class="hljs-constructor">ToMap(<span class="hljs-params">new</span> BaseRequest()</span>);        map.put(<span class="hljs-string">&quot;userId&quot;</span>,<span class="hljs-string">&quot;123456&quot;</span>);        map.put(<span class="hljs-string">&quot;password&quot;</span>,<span class="hljs-string">&quot;123123&quot;</span>);        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">IdeaApi</span>.</span></span>get<span class="hljs-constructor">ApiService()</span>                .login(map)                .subscribe<span class="hljs-constructor">On(Schedulers.<span class="hljs-params">io</span>()</span>)                .compose(activity.&lt;BasicResponse&lt;LoginResponse&gt;&gt;bind<span class="hljs-constructor">ToLifecycle()</span>)                .observe<span class="hljs-constructor">On(AndroidSchedulers.<span class="hljs-params">mainThread</span>()</span>)                .subscribe(<span class="hljs-keyword">new</span> DefaultObserver&lt;BasicResponse&lt;LoginResponse&gt;&gt;(activity) &#123;                    @Override                    public void on<span class="hljs-constructor">Success(BasicResponse&lt;LoginResponse&gt; <span class="hljs-params">response</span>)</span> &#123;                        LoginResponse results = response.get<span class="hljs-constructor">Results()</span>;                        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ToastUtils</span>.</span></span>show(<span class="hljs-string">&quot;登录成功！获取到token&quot;</span> + results.get<span class="hljs-constructor">Token()</span> + <span class="hljs-string">&quot;,可以存储到本地了&quot;</span>);                        <span class="hljs-comment">/**</span><span class="hljs-comment">                         * 可以将这些数据存储到User中，User存储到本地数据库</span><span class="hljs-comment">                         */</span>                        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">SharedPreferencesHelper</span>.</span></span>put(activity, <span class="hljs-string">&quot;token&quot;</span>, results.get<span class="hljs-constructor">Token()</span>);                        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">SharedPreferencesHelper</span>.</span></span>put(activity, <span class="hljs-string">&quot;refresh_token&quot;</span>, results.get<span class="hljs-constructor">Refresh_token()</span>);                        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">SharedPreferencesHelper</span>.</span></span>put(activity, <span class="hljs-string">&quot;refresh_secret&quot;</span>, results.get<span class="hljs-constructor">Refresh_secret()</span>);                    &#125;                &#125;);    &#125;</code></pre><h2 id="2-明确需求，抛出异常"><a href="#2-明确需求，抛出异常" class="headerlink" title="2.明确需求，抛出异常"></a>2.明确需求，抛出异常</h2><p>由于token的有效期较短，因此我们需要经常刷新token来保证token的有效性。在请求网络的时候如果token过期或者无效服务器会给我们返回对应的错误码。我们需要根据状态码来判断token是否失效。如果失效则调用刷新token接口重新获取token。如果refreshToekn也过期那么我们需要重新登录。</p><p>现在，我们的需求是要实现token过期后自动刷新，刷新成功后自动调用原来的请求，如果refreshToken也过期，则退出登录。基于此，我们可以联想到RxJava的retryWhen操作符，我们可以通过retryWhen操作符判断token过期并自动刷新。</p><p>那么，接下来我们首要任务是如何判断token和refreshToken过期。还记得上篇文章中我们修改GsonResponseBodyConverter类来根据后台响应码来获取data中的数据。显然在此处判断token是否过期是比较合适的。接下来看GsonResponseBodyConverter中的代码：</p><pre><code class="hljs reasonml">@Override public Object convert(ResponseBody value) throws IOException &#123;     <span class="hljs-keyword">try</span> &#123;         BasicResponse response = (BasicResponse) adapter.from<span class="hljs-constructor">Json(<span class="hljs-params">value</span>.<span class="hljs-params">charStream</span>()</span>);         <span class="hljs-keyword">if</span> (response.get<span class="hljs-constructor">Code()</span><span class="hljs-operator"> == </span>SUCCESS) &#123;             <span class="hljs-keyword">if</span> (response.get<span class="hljs-constructor">Data()</span><span class="hljs-operator"> == </span>null)                 throw <span class="hljs-keyword">new</span> <span class="hljs-constructor">ServerNoDataException(0, <span class="hljs-string">&quot;&quot;</span>)</span>;             return response.get<span class="hljs-constructor">Data()</span>;         &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (response.get<span class="hljs-constructor">Code()</span><span class="hljs-operator"> == </span>TOKEN_EXPIRED) &#123;             throw <span class="hljs-keyword">new</span> <span class="hljs-constructor">TokenExpiredException(<span class="hljs-params">response</span>.<span class="hljs-params">getCode</span>()</span>, response.get<span class="hljs-constructor">Message()</span>);         &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (response.get<span class="hljs-constructor">Code()</span><span class="hljs-operator"> == </span>REFRESH_TOKEN_EXPIRED) &#123;             throw <span class="hljs-keyword">new</span> <span class="hljs-constructor">RefreshTokenExpiredException(<span class="hljs-params">response</span>.<span class="hljs-params">getCode</span>()</span>, response.get<span class="hljs-constructor">Message()</span>);         &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (response.get<span class="hljs-constructor">Code()</span> != SUCCESS) &#123;             <span class="hljs-comment">// 特定 API 的错误，在相应的 DefaultObserver 的 onError 的方法中进行处理</span>             throw <span class="hljs-keyword">new</span> <span class="hljs-constructor">ServerResponseException(<span class="hljs-params">response</span>.<span class="hljs-params">getCode</span>()</span>, response.get<span class="hljs-constructor">Message()</span>);         &#125;     &#125; finally &#123;         value.close<span class="hljs-literal">()</span>;     &#125;     return null; &#125;</code></pre><p>上面代码中我们自定义了几个异常，在判断对应的错误码后抛出对应的异常。此处我们可以着重关心下TokenExpiredException和RefreshTokenExpiredException，分别代表了token过期和refreshToken过期。</p><h2 id="3-添加代理，实现token过期自动刷新"><a href="#3-添加代理，实现token过期自动刷新" class="headerlink" title="3.添加代理，实现token过期自动刷新"></a>3.添加代理，实现token过期自动刷新</h2><p>因为几乎所有的请求都需要验证token是否过期，因此需要做统一处理。我们可以采用代理类来对Retrofit的API做统一的代理处理。代码如下：</p><pre><code class="hljs reasonml">public <span class="hljs-keyword">class</span> IdeaApiProxy implements IGlobalManager &#123;    @<span class="hljs-constructor">SuppressWarnings(<span class="hljs-string">&quot;unchecked&quot;</span>)</span>    public &lt;T&gt; T get<span class="hljs-constructor">ApiService(Class&lt;T&gt; <span class="hljs-params">tClass</span>,String <span class="hljs-params">baseUrl</span>)</span> &#123;        T t = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">RetrofitService</span>.</span></span>get<span class="hljs-constructor">RetrofitBuilder(<span class="hljs-params">baseUrl</span>)</span>                .build<span class="hljs-literal">()</span>.create(tClass);        return (T) <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Proxy</span>.</span></span><span class="hljs-keyword">new</span><span class="hljs-constructor">ProxyInstance(<span class="hljs-params">tClass</span>.<span class="hljs-params">getClassLoader</span>()</span>, <span class="hljs-keyword">new</span> Class&lt;?&gt;<span class="hljs-literal">[]</span> &#123; tClass &#125;, <span class="hljs-keyword">new</span> <span class="hljs-constructor">ProxyHandler(<span class="hljs-params">t</span>, <span class="hljs-params">this</span>)</span>);    &#125;    @Override    public void exit<span class="hljs-constructor">Login()</span> &#123;    &#125;&#125;</code></pre><p>这样，我们就需要通过IdeaApiProxy 中的getApiService方法来创建API请求。其中的ProxyHandler则是实现了InvocationHandler。ProxyHandler类是我们处理token自动刷新的核心类。思想就是针对 method 的调用，做以 retryWhen 的包装，在retryWhen 中获取相应的异常信息来做处理，看 retryWhen 的代码：</p><pre><code class="hljs php">@Override  <span class="hljs-keyword">public</span> <span class="hljs-keyword">Object</span> invoke(<span class="hljs-keyword">Object</span> proxy, <span class="hljs-keyword">final</span> Method method, <span class="hljs-keyword">final</span> <span class="hljs-keyword">Object</span>[] args) throws <span class="hljs-built_in">Throwable</span> &#123;      <span class="hljs-keyword">return</span> Observable.just(<span class="hljs-literal">true</span>).flatMap(<span class="hljs-keyword">new</span> <span class="hljs-function"><span class="hljs-keyword">Function</span>&lt;<span class="hljs-title">Object</span>, <span class="hljs-title">ObservableSource</span>&lt;?&gt;&gt;(<span class="hljs-params"></span>) </span>&#123;          @Override          <span class="hljs-keyword">public</span> ObservableSource<span class="hljs-meta">&lt;?</span>&gt; apply(<span class="hljs-keyword">Object</span> o) throws <span class="hljs-built_in">Exception</span> &#123;              <span class="hljs-keyword">try</span> &#123;                  <span class="hljs-keyword">try</span> &#123;                      <span class="hljs-keyword">if</span> (mIsTokenNeedRefresh) &#123;                          updateMethodToken(method, args);                      &#125;                      <span class="hljs-keyword">return</span> (Observable<span class="hljs-meta">&lt;?</span>&gt;) method.invoke(mProxyObject, args);                  &#125; <span class="hljs-keyword">catch</span> (InvocationTargetException e) &#123;                      e.printStackTrace();                  &#125;              &#125; <span class="hljs-keyword">catch</span> (IllegalAccessException e) &#123;                  e.printStackTrace();              &#125;              <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;          &#125;      &#125;).retryWhen(<span class="hljs-keyword">new</span> <span class="hljs-function"><span class="hljs-keyword">Function</span>&lt;<span class="hljs-title">Observable</span>&lt;<span class="hljs-title">Throwable</span>&gt;, <span class="hljs-title">ObservableSource</span>&lt;?&gt;&gt;(<span class="hljs-params"></span>) </span>&#123;          @Override          <span class="hljs-keyword">public</span> ObservableSource<span class="hljs-meta">&lt;?</span>&gt; apply(Observable&lt;<span class="hljs-built_in">Throwable</span>&gt; observable) throws <span class="hljs-built_in">Exception</span> &#123;              <span class="hljs-keyword">return</span> observable.flatMap(<span class="hljs-keyword">new</span> <span class="hljs-function"><span class="hljs-keyword">Function</span>&lt;<span class="hljs-title">Throwable</span>, <span class="hljs-title">ObservableSource</span>&lt;?&gt;&gt;(<span class="hljs-params"></span>) </span>&#123;                  @Override                  <span class="hljs-keyword">public</span> ObservableSource<span class="hljs-meta">&lt;?</span>&gt; apply(<span class="hljs-built_in">Throwable</span> <span class="hljs-built_in">throwable</span>) throws <span class="hljs-built_in">Exception</span> &#123;                      <span class="hljs-keyword">if</span> (<span class="hljs-built_in">throwable</span> <span class="hljs-keyword">instanceof</span> TokenExpiredException) &#123;<span class="hljs-comment">// token过期</span>                          <span class="hljs-keyword">return</span> refreshTokenWhenTokenInvalid();                      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">throwable</span> <span class="hljs-keyword">instanceof</span> RefreshTokenExpiredException) &#123;                          <span class="hljs-comment">// RefreshToken过期，执行退出登录的操作。</span>                          mGlobalManager.logout();                          <span class="hljs-keyword">return</span> Observable.<span class="hljs-built_in">error</span>(<span class="hljs-built_in">throwable</span>);                      &#125;                      <span class="hljs-keyword">return</span> Observable.<span class="hljs-built_in">error</span>(<span class="hljs-built_in">throwable</span>);                  &#125;              &#125;);          &#125;      &#125;);  &#125;</code></pre><p>这里针对 token 过期的 TokenExpiredException的异常，执行刷新 token 的操作，刷新 token 的操作则是直接调用 Retrofit 的方法，而不需要走代理了。另外它必须是个同步的代码块，一起来看refreshTokenWhenTokenInvalid方法中的代码：</p><pre><code class="hljs reasonml"><span class="hljs-keyword">private</span> Observable&lt;?&gt; refresh<span class="hljs-constructor">TokenWhenTokenInvalid()</span> &#123;        synchronized (<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ProxyHandler</span>.</span></span><span class="hljs-keyword">class</span>) &#123;            <span class="hljs-comment">// Have refreshed the token successfully in the valid time.</span>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">new</span> <span class="hljs-constructor">Date()</span>.get<span class="hljs-constructor">Time()</span> - tokenChangedTime &lt; REFRESH_TOKEN_VALID_TIME) &#123;   <span class="hljs-comment">//  防止重复刷新token</span>                mIsTokenNeedRefresh = <span class="hljs-literal">true</span>;                return <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Observable</span>.</span></span>just(<span class="hljs-literal">true</span>);            &#125; <span class="hljs-keyword">else</span> &#123;                Map&lt;String, Object&gt; map = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">MapUtils</span>.</span></span>entity<span class="hljs-constructor">ToMap(<span class="hljs-params">new</span> BaseRequestData()</span>);                <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">RetrofitHelper</span>.</span></span>get<span class="hljs-constructor">ApiService()</span>                        .refresh<span class="hljs-constructor">Token(<span class="hljs-params">map</span>)</span>                        <span class="hljs-comment">//.observeOn(AndroidSchedulers.mainThread())</span>                        .subscribe(<span class="hljs-keyword">new</span> DefaultObserver&lt;RefreshTokenResponse&gt;<span class="hljs-literal">()</span> &#123;                            @Override                            public void on<span class="hljs-constructor">Success(RefreshTokenResponse <span class="hljs-params">response</span>)</span> &#123;                                <span class="hljs-keyword">if</span> (response != null) &#123;                                    <span class="hljs-comment">// 保存数据到本地</span>                                    mGlobalManager.token<span class="hljs-constructor">Refresh(<span class="hljs-params">response</span>)</span>;                                    mIsTokenNeedRefresh = <span class="hljs-literal">true</span>;                                    tokenChangedTime = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Date()</span>.get<span class="hljs-constructor">Time()</span>;                                &#125;                            &#125;                            @Override                            public void on<span class="hljs-constructor">Error(Throwable <span class="hljs-params">e</span>)</span> &#123;                                super.on<span class="hljs-constructor">Error(<span class="hljs-params">e</span>)</span>;                                mRefreshTokenError = e;                            &#125;                        &#125;);                <span class="hljs-keyword">if</span> (mRefreshTokenError != null) &#123;                    return <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Observable</span>.</span></span>error(mRefreshTokenError);                &#125; <span class="hljs-keyword">else</span> &#123;                    return <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Observable</span>.</span></span>just(<span class="hljs-literal">true</span>);                &#125;            &#125;        &#125;    &#125;</code></pre><h2 id="4-刷新token成功后替换旧的token"><a href="#4-刷新token成功后替换旧的token" class="headerlink" title="4.刷新token成功后替换旧的token"></a>4.刷新token成功后替换旧的token</h2><p>当token刷新成功之后，我们将旧的token替换掉呢？java8中的method类，已经支持了动态获取方法名称，而之前的Java版本则是不支持的。那这里怎么办呢？通过看retrofit的调用，可以知道retrofit是可以将接口中的方法转换成API请求，并需要封装参数的。那就需要看一下Retrofit是如何实现的呢？最后发现重头戏是在Retrofit对每个方法添加的@interface的注解，通过Method类中的getParameterAnnotations来进行获取，主要的代码实现如下：</p><pre><code class="hljs crystal"><span class="hljs-keyword">private</span> void updateMethodToken(Method method, Object[] args) &#123;        ServerKey serverKey = RealmDatabaseHelper.queryFirstFrom(ServerKey.<span class="hljs-keyword">class</span>);        String token = serverKey.getToken();        <span class="hljs-keyword">if</span> (mIsTokenNeedRefresh &amp;&amp; !TextUtils.isEmpty(token)) &#123;            Annotation[][] annotationsArray = method.getParameterAnnotations();            Annotation[] annotations;            <span class="hljs-keyword">if</span> (annotationsArray != null &amp;&amp; annotationsArray.length &gt; <span class="hljs-number">0</span>) &#123;                <span class="hljs-keyword">for</span> (int i = <span class="hljs-number">0</span>; i &lt; annotationsArray.length; i++) &#123;                    annotations = annotationsArray[i];                    <span class="hljs-keyword">for</span> (Annotation <span class="hljs-keyword">annotation</span> : <span class="hljs-title">annotations</span>) &#123;                        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">annotation</span> <span class="hljs-title">instanceof</span> <span class="hljs-title">FieldMap</span>||<span class="hljs-title">annotation</span> <span class="hljs-title">instanceof</span> <span class="hljs-title">QueryMap</span>) &#123;// 以<span class="hljs-title">Map</span>方式提交表单                            <span class="hljs-keyword">if</span> (args[i] instanceof Map)                                ((Map&lt;String, Object&gt;) args[i]).put(TOKEN, token);                        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">annotation</span> <span class="hljs-title">instanceof</span> <span class="hljs-title">Query</span>) &#123;                            <span class="hljs-keyword">if</span> (TOKEN.equals(((Query) <span class="hljs-keyword">annotation</span>).<span class="hljs-title">value</span>())) &#123;                                args[i] = token;                            &#125;                        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">annotation</span> <span class="hljs-title">instanceof</span> <span class="hljs-title">Field</span>) &#123;                            <span class="hljs-keyword">if</span> (TOKEN.equals(((Field) <span class="hljs-keyword">annotation</span>).<span class="hljs-title">value</span>())) &#123;                                args[i] = token;                            &#125;                        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-keyword">annotation</span> <span class="hljs-title">instanceof</span> <span class="hljs-title">Part</span>)&#123;   //  上传文件                            <span class="hljs-keyword">if</span> (TOKEN.equals(((Part) <span class="hljs-keyword">annotation</span>).<span class="hljs-title">value</span>())) &#123;                                RequestBody tokenBody = RequestBody.create(MediaType.parse(<span class="hljs-string">&quot;multipart/form-data&quot;</span>), token);                                args[i] = tokenBody;                            &#125;                        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-keyword">annotation</span> <span class="hljs-title">instanceof</span> <span class="hljs-title">Body</span>)&#123;// <span class="hljs-title">Post</span>提交<span class="hljs-title">json</span>数据                            <span class="hljs-keyword">if</span>(args[i] instanceof BaseRequest)&#123;                                BaseRequest requestData= (BaseRequest) args[i];                                requestData.setToken(token);                                args[i]=requestData;                            &#125;                        &#125;                    &#125;                &#125;            &#125;            mIsTokenNeedRefresh = <span class="hljs-literal">false</span>;        &#125;    &#125;</code></pre><p>这里我们遍历所有的token字段，并将其替换成新的token。但上述方法仅仅适用于get请求和post请求以表单格式提交。如果是post请求且提交格式为json可以自行添加。另外此种方法不适用于token放在请求头的方式。</p><p><a href="https://blog.csdn.net/qq_20521573/article/details/70991850">（一）Rxjava2+Retrofit完美封装</a><br><a href="https://blog.csdn.net/qq_20521573/article/details/76100558">（二）Rxjava2+Retrofit之Token自动刷新</a><br><a href="https://blog.csdn.net/qq_20521573/article/details/78356747">（三）Rxjava2+Retrofit实现文件上传与下载</a></p><p>参考<br><a href="http://alighters.com/blog/2016/08/22/rxjava-plus-retrofitshi-xian-zhi-demo/">RxJava+Retrofit实现全局过期token自动刷新Demo篇</a> </p><p><a href="https://github.com/zhpanvip/Retrofit2/tree/token">源码下载</a></p><h3 id="好库推荐"><a href="#好库推荐" class="headerlink" title="好库推荐"></a>好库推荐</h3><p>给大家推荐一下<a href="https://github.com/zhpanvip/BannerViewPager">BannerViewPager</a>。这是一个基于ViewPager实现的具有强大功能的无限轮播库。通过<a href="https://github.com/zhpanvip/BannerViewPager">BannerViewPager</a>可以实现腾讯视频、QQ音乐、酷狗音乐、支付宝、天猫、淘宝、优酷视频、喜马拉雅、网易云音乐、哔哩哔哩等APP的Banner样式以及指示器样式。</p><p>欢迎大家到github关注<a href="https://github.com/zhpanvip/BannerViewPager">BannerViewPager</a>！</p>]]></content>
    
    
    
    <tags>
      
      <tag>RxJava</tag>
      
      <tag>token</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RxJava+Retrofit完美封装（一）</title>
    <link href="/2017/04/30/8,RxJava-Retrofit%E5%AE%8C%E7%BE%8E%E5%B0%81%E8%A3%85%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2017/04/30/8,RxJava-Retrofit%E5%AE%8C%E7%BE%8E%E5%B0%81%E8%A3%85%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p><strong><em>本篇文章已授权微信公众号 guolin_blog （郭霖）独家发布</em></strong></p><p>要说2016年最火的Android技术是什么，毫无疑问肯定是RxJava+Retrofit+Mvp。现如今2017年也已经过了快一半了。相信做android开发的小伙伴对RxJava和Retrofit也不再陌生。即使没有刻意的去学习过，也应该对RxJava和Retrofit有个一知半解。去年的时候学习了Rxjava和Retrofit的基本用法，但一直没有在实际项目中运用。今年开做新项目，果断在新项目中引入了RxJava和Retrofit。本篇文章将介绍笔者在项目中对Retrofit的封装。<br>先来看一下封装过后的Retrofit如何使用。</p><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">RetrofitHelper</span>.</span></span>get<span class="hljs-constructor">ApiService()</span>                .get<span class="hljs-constructor">Article()</span>                .compose(RxUtil.&lt;ArticleWrapper&gt;rx<span class="hljs-constructor">SchedulerHelper(<span class="hljs-params">this</span>)</span>)                .subscribe(<span class="hljs-keyword">new</span> DefaultObserver&lt;ArticleWrapper&gt;<span class="hljs-literal">()</span> &#123;                    @Override                    public void on<span class="hljs-constructor">Success(ArticleWrapper <span class="hljs-params">response</span>)</span> &#123;                        show<span class="hljs-constructor">Toast(<span class="hljs-string">&quot;Request Success，size is：&quot;</span> + <span class="hljs-params">response</span>.<span class="hljs-params">getDatas</span>()</span>.size<span class="hljs-literal">()</span>);                    &#125;                &#125;);</code></pre><p>没错，就是这么简洁的一个链式调用，可以显示加载动画，还加入了Retrofit生命周期的管理。<br>开始之前需要先在module项目里的Gradle文件中添加用到的依赖库</p><pre><code class="hljs gradle"><span class="hljs-keyword">compile</span> <span class="hljs-string">&quot;io.reactivex.rxjava2:rxjava:$rootProject.ext.rxjava2Version&quot;</span>   <span class="hljs-keyword">compile</span> <span class="hljs-string">&quot;com.squareup.retrofit2:retrofit:$rootProject.ext.retrofit2Version&quot;</span>   <span class="hljs-keyword">compile</span> <span class="hljs-string">&quot;com.squareup.retrofit2:converter-scalars:$rootProject.ext.retrofit2Version&quot;</span>   <span class="hljs-keyword">compile</span> <span class="hljs-string">&quot;com.squareup.retrofit2:converter-gson:$rootProject.ext.retrofit2Version&quot;</span>   <span class="hljs-keyword">compile</span> <span class="hljs-string">&quot;com.squareup.retrofit2:adapter-rxjava2:$rootProject.ext.retrofit2Version&quot;</span>   <span class="hljs-keyword">compile</span> <span class="hljs-string">&#x27;com.jakewharton.retrofit:retrofit2-rxjava2-adapter:1.0.0&#x27;</span>   <span class="hljs-keyword">compile</span> <span class="hljs-string">&#x27;io.reactivex.rxjava2:rxandroid:2.0.1&#x27;</span>   <span class="hljs-keyword">compile</span> <span class="hljs-string">&#x27;com.squareup.okhttp3:logging-interceptor:3.4.1&#x27;</span>   <span class="hljs-keyword">compile</span> <span class="hljs-string">&quot;com.trello.rxlifecycle2:rxlifecycle:$rootProject.ext.rxlifecycle&quot;</span>   <span class="hljs-comment">//compile &quot;com.trello.rxlifecycle2:rxlifecycle-android:$rootProject.ext.rxlifecycle&quot;</span>   <span class="hljs-keyword">compile</span> <span class="hljs-string">&quot;com.trello.rxlifecycle2:rxlifecycle-components:$rootProject.ext.rxlifecycle&quot;</span></code></pre><p>为了方便依赖库版本的修改我们采用”io.reactivex.rxjava2:rxjava:$rootProject.ext.rxjava2Version”这中方式添加依赖，因此需要在project的build.gradle文件的加上以下内容：</p><pre><code class="hljs lsl">ext &#123;    supportLibVersion = &#x27;<span class="hljs-number">25.1</span><span class="hljs-number">.0</span>&#x27;    butterknifeVersion = &#x27;<span class="hljs-number">8.5</span><span class="hljs-number">.1</span>&#x27;    rxjava2Version = &#x27;<span class="hljs-number">2.0</span><span class="hljs-number">.8</span>&#x27;    retrofit2Version = &#x27;<span class="hljs-number">2.2</span><span class="hljs-number">.0</span>&#x27;    rxlifecycle=&#x27;<span class="hljs-number">2.1</span><span class="hljs-number">.0</span>&#x27;    gsonVersion = &#x27;<span class="hljs-number">2.8</span><span class="hljs-number">.0</span>&#x27;&#125;</code></pre><p>下面将通过几个小节对本次封装作详细的解析：</p><ul><li>服务器响应数据的基类BasicResponse</li><li>构建初始化Retrofit的工具类IdeaApi</li><li>通过GsonConverterFactory获取真实响应数据</li><li>封装DefaultObserver处理服务器响应</li><li>处理加载Loading</li><li>管理Retrofit生命周期</li><li>如何使用封装</li><li>小结</li></ul><h2 id="一-服务器响应数据的基类BasicResponse。"><a href="#一-服务器响应数据的基类BasicResponse。" class="headerlink" title="一.服务器响应数据的基类BasicResponse。"></a>一.服务器响应数据的基类BasicResponse。</h2><p>假定服务器返回的Json数据格式如下：</p><pre><code class="hljs clojure">&#123; <span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-number">200</span>, <span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;成功&quot;</span>, <span class="hljs-string">&quot;content&quot;</span>: &#123;...&#125;&#125;</code></pre><p>根据Json数据格式构建我们的BasicResponse（BasicResponse中的字段内容需要根据自己服务器返回的数据确定）。代码如下：</p><pre><code class="hljs arduino"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BasicResponse</span>&lt;T&gt; &#123;</span>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> code;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> message;    <span class="hljs-keyword">private</span> T content;...此处省去<span class="hljs-built_in">get</span>、<span class="hljs-built_in">set</span>方法。</code></pre><h2 id="二-构建初始化Retrofit的工具类IdeaApi。"><a href="#二-构建初始化Retrofit的工具类IdeaApi。" class="headerlink" title="二.构建初始化Retrofit的工具类IdeaApi。"></a>二.构建初始化Retrofit的工具类IdeaApi。</h2><p>该类通过RetrofitUtils来获取ApiService的实例。代码如下：</p><pre><code class="hljs arduino"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IdeaApi</span> &#123;</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-function">T <span class="hljs-title">getApiService</span><span class="hljs-params">(Class&lt;T&gt; cls,<span class="hljs-keyword">String</span> baseUrl)</span> </span>&#123;        Retrofit retrofit = RetrofitUtils .getRetrofitBuilder(baseUrl).build();        <span class="hljs-keyword">return</span> retrofit.create(cls);    &#125;&#125;</code></pre><p>RetrofitUtils用来构建Retrofit.Builder，并对OkHttp做以下几个方面的配置：</p><ol><li>设置日志拦截器，拦截服务器返回的json数据。Retrofit将请求到json数据直接转换成了实体类，但有时候我们需要查看json数据，Retrofit并没有提供直接获取json数据的功能。因此我们需要自定义一个日志拦截器拦截json数据，并输入到控制台。</li><li>设置Http请求头。给OkHttp 添加请求头拦截器，配置请求头信息。还可以为接口统一添加请求头数据。例如，把用户名、密码（或者token）统一添加到请求头。后续每个接口的请求头中都会携带用户名、密码（或者token）数据，避免了为每个接口单独添加。</li><li>为OkHttp配置缓存。同样可以同过拦截器实现缓存处理。包括控制缓存的最大生命值，控制缓存的过期时间。</li><li>如果采用https，我们还可以在此处理证书校验以及服务器校验。</li><li>为Retrofit添加GsonConverterFactory。此处是一个比较重要的环节，将在后边详细讲解。<br>RetrofitUtils 代码如下：<pre><code class="hljs reasonml">public <span class="hljs-keyword">class</span> RetrofitUtils &#123;    public static OkHttpClient.Builder get<span class="hljs-constructor">OkHttpClientBuilder()</span> &#123;        HttpLoggingInterceptor loggingInterceptor = <span class="hljs-keyword">new</span> <span class="hljs-constructor">HttpLoggingInterceptor(<span class="hljs-params">new</span> HttpLoggingInterceptor.Logger()</span> &#123;            @Override            public void log(String message) &#123;                <span class="hljs-keyword">try</span> &#123;                    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">LogUtils</span>.</span></span>e(<span class="hljs-string">&quot;OKHttp-----&quot;</span>, <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">URLDecoder</span>.</span></span>decode(message, <span class="hljs-string">&quot;utf-8&quot;</span>));                &#125; catch (UnsupportedEncodingException e) &#123;                    e.print<span class="hljs-constructor">StackTrace()</span>;                    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">LogUtils</span>.</span></span>e(<span class="hljs-string">&quot;OKHttp-----&quot;</span>, message);                &#125;            &#125;        &#125;);        loggingInterceptor.set<span class="hljs-constructor">Level(HttpLoggingInterceptor.Level.BODY)</span>;        File cacheFile = <span class="hljs-keyword">new</span> <span class="hljs-constructor">File(Utils.<span class="hljs-params">getContext</span>()</span>.get<span class="hljs-constructor">CacheDir()</span>, <span class="hljs-string">&quot;cache&quot;</span>);        Cache cache = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Cache(<span class="hljs-params">cacheFile</span>, 1024 <span class="hljs-operator">*</span> 1024 <span class="hljs-operator">*</span> 100)</span>; <span class="hljs-comment">//100Mb</span>        return <span class="hljs-keyword">new</span> OkHttpClient.<span class="hljs-constructor">Builder()</span>                .read<span class="hljs-constructor">Timeout(Constants.DEFAULT_TIMEOUT, TimeUnit.MILLISECONDS)</span>                .connect<span class="hljs-constructor">Timeout(Constants.DEFAULT_TIMEOUT, TimeUnit.MILLISECONDS)</span>                .add<span class="hljs-constructor">Interceptor(<span class="hljs-params">loggingInterceptor</span>)</span>                .add<span class="hljs-constructor">Interceptor(<span class="hljs-params">new</span> HttpHeaderInterceptor()</span>)                .add<span class="hljs-constructor">NetworkInterceptor(<span class="hljs-params">new</span> HttpCacheInterceptor()</span>)               <span class="hljs-comment">// .sslSocketFactory(SslContextFactory.getSSLSocketFactoryForTwoWay())  // https认证 如果要使用https且为自定义证书 可以去掉这两行注释，并自行配制证书。</span>               <span class="hljs-comment">// .hostnameVerifier(new SafeHostnameVerifier())</span>                .cache(cache);    &#125;    public static Retrofit.Builder get<span class="hljs-constructor">RetrofitBuilder(String <span class="hljs-params">baseUrl</span>)</span> &#123;        Gson gson = <span class="hljs-keyword">new</span> <span class="hljs-constructor">GsonBuilder()</span>.set<span class="hljs-constructor">DateFormat(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>)</span>.serialize<span class="hljs-constructor">Nulls()</span>.create<span class="hljs-literal">()</span>;        OkHttpClient okHttpClient = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">RetrofitUtils</span>.</span></span>get<span class="hljs-constructor">OkHttpClientBuilder()</span>.build<span class="hljs-literal">()</span>;        return <span class="hljs-keyword">new</span> Retrofit.<span class="hljs-constructor">Builder()</span>                .client(okHttpClient)                .add<span class="hljs-constructor">ConverterFactory(GsonConverterFactory.<span class="hljs-params">create</span>(<span class="hljs-params">gson</span>)</span>)                .add<span class="hljs-constructor">CallAdapterFactory(RxJava2CallAdapterFactory.<span class="hljs-params">create</span>()</span>)                .base<span class="hljs-constructor">Url(<span class="hljs-params">baseUrl</span>)</span>;    &#125;&#125;</code></pre></li></ol><h2 id="三-通过GsonConverterFactory获取真实响应数据"><a href="#三-通过GsonConverterFactory获取真实响应数据" class="headerlink" title="三.通过GsonConverterFactory获取真实响应数据"></a>三.通过GsonConverterFactory获取真实响应数据</h2><p>在第一节中我们构建了服务器响应数据BasicResponse，BasicResponse由code、message、和content三个字段。其中code为服务器返回的错误码。我们会事先和服务器约定成功时的code值，比如200表示请求成功。但通常在请求服务器数据过程中免不了会出现各种错误。例如用户登录时密码错误、请求参数错误的情况。此时服务器会根据错误情况返回对应的错误码。一般来说，我们只关心成功时即code为200时的content数据。而对于code不为200时我们只需要给出对应的Toast提示即可。事实上我们对我们有用的仅仅时code为200时的content数据。因此我们可以考虑过滤掉code和message，在请求成功的回调中只返回content的内容。<br>在此种情况下就需要我们通过自定义GsonConverterFactory来实现了。我们可以直接从Retrofit的源码中copy出GsonConverterFactory的三个相关类来做修改。<br>其中最终要的一部分是修改GsonResponseBodyConverter中的convert方法。在该方法中拿到服务器响应数据并判断code是否为200。如果是，则获取到content并返回，如果不是，则在此处可以抛出对应的自定义的异常。然后再Observer中统一处理异常情况。GsonResponseBodyConverter代码如下：</p><pre><code class="hljs angelscript"><span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-symbol">GsonResponseBodyConverter</span>&lt;<span class="hljs-symbol">T</span>&gt; <span class="hljs-symbol">implements</span> <span class="hljs-symbol">Converter</span>&lt;<span class="hljs-symbol">ResponseBody, <span class="hljs-symbol">Object</span></span>&gt; &#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> TypeAdapter&lt;T&gt; adapter;    GsonResponseBodyConverter(TypeAdapter&lt;T&gt; adapter) &#123;        <span class="hljs-keyword">this</span>.adapter = adapter;    &#125;    @Override    <span class="hljs-keyword">public</span> Object convert(ResponseBody value) throws IOException &#123;        <span class="hljs-keyword">try</span> &#123;            BasicResponse response = (BasicResponse) adapter.fromJson(value.charStream());            <span class="hljs-keyword">if</span> (response.getCode()==<span class="hljs-number">200</span>) &#123;            <span class="hljs-keyword">return</span> response.getResults();            &#125; <span class="hljs-keyword">else</span> &#123;                <span class="hljs-comment">// 特定 API 的错误，在相应的 DefaultObserver 的 onError 的方法中进行处理</span>                throw new ServerResponseException(response.getCode(), response.getMessage());            &#125;        &#125; finally &#123;            value.close();        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;    &#125;&#125;</code></pre><h2 id="四-构建DefaultObserver处理服务器响应。"><a href="#四-构建DefaultObserver处理服务器响应。" class="headerlink" title="四.构建DefaultObserver处理服务器响应。"></a>四.构建DefaultObserver处理服务器响应。</h2><p>上一节中我们讲到了在请求服务器时可能出现的一些例如密码错误、参数错误的情况，服务器给我们返回了对应的错误码，我们根据错误码抛出了对应自定义异常。除此之外在我们发起网络请求时还可能发生一些异常情况。例如没有网络、请求超时或者服务器返回了数据但在解析时出现了数据解析异常等。对于这样的情况我们也要进行统一处理的。那么我们就需要自定义一个DefaultObserver类继承Observer，并重写相应的方法。<br>该类中最重要的两个方法时onNext和onError。<br><strong>1.在服务器返回数据成功的情况下会回调到onNext方法。</strong>因此我们可以在DefaultObserver中定义一个抽象方法onSuccess(T response)，在调用网络时重写onSuccess方法即可。<br><strong>2.如果在请求服务器过程中出现任何异常，都会回调到onError方法中。</strong>包括上节中我们自己抛出的异常都会回调到onError。因此我们的重头戏就是处理onError。在onError中我们根据异常信息给出对应的Toast提示即可。<br>DefaultObserver类的代码如下：</p><pre><code class="hljs reasonml">public abstract <span class="hljs-keyword">class</span> DefaultObserver&lt;T&gt; implements Observer&lt;T&gt; &#123;    @Override    public void on<span class="hljs-constructor">Subscribe(Disposable <span class="hljs-params">d</span>)</span> &#123;    &#125;    @Override    public void on<span class="hljs-constructor">Next(T <span class="hljs-params">response</span>)</span> &#123;        on<span class="hljs-constructor">Success(<span class="hljs-params">response</span>)</span>;        on<span class="hljs-constructor">Finish()</span>;    &#125;    @Override    public void on<span class="hljs-constructor">Error(Throwable <span class="hljs-params">e</span>)</span> &#123;        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">LogUtils</span>.</span></span>e(<span class="hljs-string">&quot;Retrofit&quot;</span>, e.get<span class="hljs-constructor">Message()</span>);        <span class="hljs-keyword">if</span> (e instanceof HttpException) &#123;     <span class="hljs-comment">//   HTTP错误</span>            on<span class="hljs-constructor">Exception(ExceptionReason.BAD_NETWORK)</span>;        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (e instanceof ConnectException<span class="hljs-operator">                || </span>e instanceof UnknownHostException) &#123;   <span class="hljs-comment">//   连接错误</span>            on<span class="hljs-constructor">Exception(ExceptionReason.CONNECT_ERROR)</span>;        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (e instanceof InterruptedIOException) &#123;   <span class="hljs-comment">//  连接超时</span>            on<span class="hljs-constructor">Exception(ExceptionReason.CONNECT_TIMEOUT)</span>;        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (e instanceof JsonParseException<span class="hljs-operator">                || </span>e instanceof JSONException<span class="hljs-operator">                || </span>e instanceof ParseException) &#123;   <span class="hljs-comment">//  解析错误</span>            on<span class="hljs-constructor">Exception(ExceptionReason.PARSE_ERROR)</span>;        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(e instanceof ServerResponseException)&#123;            on<span class="hljs-constructor">Fail(<span class="hljs-params">e</span>.<span class="hljs-params">getMessage</span>()</span>);        &#125; <span class="hljs-keyword">else</span> &#123;            on<span class="hljs-constructor">Exception(ExceptionReason.UNKNOWN_ERROR)</span>;        &#125;        on<span class="hljs-constructor">Finish()</span>;    &#125;    @Override    public void on<span class="hljs-constructor">Complete()</span> &#123;    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 请求成功</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * @param response 服务器返回的数据</span><span class="hljs-comment">     */</span>    abstract public void on<span class="hljs-constructor">Success(T <span class="hljs-params">response</span>)</span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 服务器返回数据，但响应码不为200</span><span class="hljs-comment">     *</span><span class="hljs-comment">     */</span>    public void on<span class="hljs-constructor">Fail(String <span class="hljs-params">message</span>)</span> &#123;        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ToastUtils</span>.</span></span>show(message);    &#125;        public void on<span class="hljs-constructor">Finish()</span>&#123;&#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 请求异常</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * @param reason</span><span class="hljs-comment">     */</span>    public void on<span class="hljs-constructor">Exception(ExceptionReason <span class="hljs-params">reason</span>)</span> &#123;        switch (reason) &#123;            case CONNECT_ERROR:                <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ToastUtils</span>.</span></span>show(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">R</span>.</span></span><span class="hljs-built_in">string</span>.connect_error, Toast.LENGTH_SHORT);                break;            case CONNECT_TIMEOUT:                <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ToastUtils</span>.</span></span>show(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">R</span>.</span></span><span class="hljs-built_in">string</span>.connect_timeout, Toast.LENGTH_SHORT);                break;            case BAD_NETWORK:                <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ToastUtils</span>.</span></span>show(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">R</span>.</span></span><span class="hljs-built_in">string</span>.bad_network, Toast.LENGTH_SHORT);                break;            case PARSE_ERROR:                <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ToastUtils</span>.</span></span>show(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">R</span>.</span></span><span class="hljs-built_in">string</span>.parse_error, Toast.LENGTH_SHORT);                break;            case UNKNOWN_ERROR:            default:                <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ToastUtils</span>.</span></span>show(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">R</span>.</span></span><span class="hljs-built_in">string</span>.unknown_error, Toast.LENGTH_SHORT);                break;        &#125;    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 请求网络失败原因</span><span class="hljs-comment">     */</span>    public enum ExceptionReason &#123;        <span class="hljs-comment">/**</span><span class="hljs-comment">         * 解析数据失败</span><span class="hljs-comment">         */</span>        PARSE_ERROR,        <span class="hljs-comment">/**</span><span class="hljs-comment">         * 网络问题</span><span class="hljs-comment">         */</span>        BAD_NETWORK,        <span class="hljs-comment">/**</span><span class="hljs-comment">         * 连接错误</span><span class="hljs-comment">         */</span>        CONNECT_ERROR,        <span class="hljs-comment">/**</span><span class="hljs-comment">         * 连接超时</span><span class="hljs-comment">         */</span>        CONNECT_TIMEOUT,        <span class="hljs-comment">/**</span><span class="hljs-comment">         * 未知错误</span><span class="hljs-comment">         */</span>        UNKNOWN_ERROR,    &#125;&#125;</code></pre><h2 id="五-处理加载Loading"><a href="#五-处理加载Loading" class="headerlink" title="五.处理加载Loading"></a>五.处理加载Loading</h2><p>关于Loading我们可以通过RxJava的compose操作符来做一个非常优雅的处理。首先定义一个ProgressUtils工具类，然后通过RxJava的ObservableTransformer做一个变换来处理Loading。想要显示Loading，只需要加上.compose(ProgressUtils.&lt; T &gt;applyProgressBar(this))即可。<br>ProgressUtils代码如下：</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProgressUtils</span> </span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-function">ObservableTransformer&lt;T, T&gt; <span class="hljs-title">applyProgressBar</span><span class="hljs-params">(</span></span><span class="hljs-function"><span class="hljs-params">            <span class="hljs-meta">@NonNull</span> <span class="hljs-keyword">final</span> Activity activity, String msg)</span> </span>&#123;        <span class="hljs-keyword">final</span> WeakReference&lt;Activity&gt; activityWeakReference = <span class="hljs-keyword">new</span> WeakReference&lt;&gt;(activity);        <span class="hljs-keyword">final</span> DialogUtils dialogUtils = <span class="hljs-keyword">new</span> DialogUtils();        dialogUtils.showProgress(activityWeakReference.get());        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ObservableTransformer&lt;T, T&gt;() &#123;            <span class="hljs-meta">@Override</span>            <span class="hljs-function"><span class="hljs-keyword">public</span> ObservableSource&lt;T&gt; <span class="hljs-title">apply</span><span class="hljs-params">(Observable&lt;T&gt; upstream)</span> </span>&#123;                <span class="hljs-keyword">return</span> upstream.doOnSubscribe(<span class="hljs-keyword">new</span> Consumer&lt;Disposable&gt;() &#123;                    <span class="hljs-meta">@Override</span>                    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">accept</span><span class="hljs-params">(Disposable disposable)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;                    &#125;                &#125;).doOnTerminate(<span class="hljs-keyword">new</span> Action() &#123;                    <span class="hljs-meta">@Override</span>                    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;                        Activity context;                        <span class="hljs-keyword">if</span> ((context = activityWeakReference.get()) != <span class="hljs-keyword">null</span>                                &amp;&amp; !context.isFinishing()) &#123;                            dialogUtils.dismissProgress();                        &#125;                    &#125;                &#125;).doOnSubscribe(<span class="hljs-keyword">new</span> Consumer&lt;Disposable&gt;() &#123;                    <span class="hljs-meta">@Override</span>                    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">accept</span><span class="hljs-params">(Disposable disposable)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;                        <span class="hljs-comment">/*Activity context;</span><span class="hljs-comment">                        if ((context = activityWeakReference.get()) != null</span><span class="hljs-comment">                                &amp;&amp; !context.isFinishing()) &#123;</span><span class="hljs-comment">                            dialogUtils.dismissProgress();</span><span class="hljs-comment">                        &#125;*/</span>                    &#125;                &#125;);            &#125;        &#125;;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-function">ObservableTransformer&lt;T, T&gt; <span class="hljs-title">applyProgressBar</span><span class="hljs-params">(</span></span><span class="hljs-function"><span class="hljs-params">            <span class="hljs-meta">@NonNull</span> <span class="hljs-keyword">final</span> Activity activity)</span> </span>&#123;        <span class="hljs-keyword">return</span> applyProgressBar(activity, <span class="hljs-string">&quot;&quot;</span>);    &#125;&#125;</code></pre><p>至此关于RxJava和Retrofit的二次封装已经基本完成。但是我们不能忽略了很重要的一点，就是网络请求的生命周期。我们将在下一节中详细讲解。</p><h2 id="六、管理Retrofit生命周期"><a href="#六、管理Retrofit生命周期" class="headerlink" title="六、管理Retrofit生命周期"></a>六、管理Retrofit生命周期</h2><p>当activity被销毁时，网络请求也应该随之终止的。要不然就可能造成内存泄漏。会严重影到响App的性能！因此Retrofit生命周期的管理也是比较重要的一点内容。在这里我们使用 **<a href="https://github.com/trello/RxLifecycle">RxLifecycle</a>**来对Retrofit进行生命周期管理。其使用流程如下：</p><p><strong>1.在gradel中添加依赖如下：</strong></p><pre><code class="hljs apache"><span class="hljs-attribute">compile</span> &#x27;com.trello.rxlifecycle<span class="hljs-number">2</span>:rxlifecycle:<span class="hljs-number">2</span>.<span class="hljs-number">1</span>.<span class="hljs-number">0</span>&#x27;<span class="hljs-attribute">compile</span> &#x27;com.trello.rxlifecycle<span class="hljs-number">2</span>:rxlifecycle-components:<span class="hljs-number">2</span>.<span class="hljs-number">1</span>.<span class="hljs-number">0</span>&#x27;</code></pre><p><strong>2.让我们的BaseActivity继承RxAppCompatActivity。</strong><br>具体代码如下：</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BaseActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">RxAppCompatActivity</span> </span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> </span>&#123;        <span class="hljs-keyword">super</span>.onCreate(savedInstanceState);        setContentView(getLayoutId());        init(savedInstanceState);    &#125;    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">showToast</span><span class="hljs-params">(String msg)</span> </span>&#123;        ToastUtils.show(msg);    &#125;    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">abstract</span> <span class="hljs-meta">@LayoutRes</span> <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getLayoutId</span><span class="hljs-params">()</span></span>;    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(Bundle savedInstanceState)</span></span>;&#125;</code></pre><p>同样我们项目的BaseFragment继承RxFragment（注意使用继承V4包下的RxFragment），如下：</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BaseFragment</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">RxFragment</span> </span>&#123;    <span class="hljs-keyword">public</span> View rootView;    <span class="hljs-keyword">public</span> LayoutInflater inflater;    <span class="hljs-meta">@Nullable</span>    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> View <span class="hljs-title">onCreateView</span><span class="hljs-params">(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)</span> </span>&#123;        <span class="hljs-keyword">super</span>.onCreateView(inflater, container, savedInstanceState);        <span class="hljs-keyword">this</span>.inflater = inflater;        <span class="hljs-keyword">if</span> (rootView == <span class="hljs-keyword">null</span>) &#123;            rootView = inflater.inflate(<span class="hljs-keyword">this</span>.getLayoutId(), container, <span class="hljs-keyword">false</span>);            init(savedInstanceState);        &#125;        ViewGroup parent = (ViewGroup) rootView.getParent();        <span class="hljs-keyword">if</span> (parent != <span class="hljs-keyword">null</span>) &#123;            parent.removeView(rootView);        &#125;        <span class="hljs-keyword">return</span> rootView;    &#125;    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getLayoutId</span><span class="hljs-params">()</span></span>;    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(Bundle savedInstanceState)</span></span>;    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">showToast</span><span class="hljs-params">(String msg)</span> </span>&#123;        ToastUtils.show(msg);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onResume</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">super</span>.onResume();    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onPause</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">super</span>.onPause();    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onDestroyView</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">super</span>.onDestroyView();    &#125;&#125;</code></pre><p>3.使用compose操作符管理Retrofit生命周期了:</p><pre><code class="hljs css"><span class="hljs-selector-tag">myObservable</span>            <span class="hljs-selector-class">.compose</span>(<span class="hljs-selector-tag">bindToLifecycle</span>())            <span class="hljs-selector-class">.subscribe</span>();或者<span class="hljs-selector-tag">myObservable</span>    <span class="hljs-selector-class">.compose</span>(<span class="hljs-selector-tag">RxLifecycle</span><span class="hljs-selector-class">.bindUntilEvent</span>(<span class="hljs-selector-tag">lifecycle</span>, <span class="hljs-selector-tag">ActivityEvent</span><span class="hljs-selector-class">.DESTROY</span>))    <span class="hljs-selector-class">.subscribe</span>();</code></pre><p>关于RxLifecycle的详细使用方法可以参考 <strong><a href="https://github.com/trello/RxLifecycle">RxLifecycle官网</a></strong></p><h2 id="七-如何使用封装"><a href="#七-如何使用封装" class="headerlink" title="七.如何使用封装"></a>七.如何使用封装</h2><p>前面几节内容讲解了如何RxJava进行二次封装，封装部分的代码可以放在我们项目的Library模块中。那么封装好之后我们应该如何在app模块中使用呢？<br><strong>1.定义一个接口来存放我们项目的API</strong></p><pre><code class="hljs less"><span class="hljs-selector-tag">public</span> <span class="hljs-selector-tag">interface</span> <span class="hljs-selector-tag">IdeaApiService</span> &#123;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 此接口服务器响应数据BasicResponse的泛型T应该是List&lt;MeiZi&gt;</span><span class="hljs-comment">     * 即BasicResponse&lt;List&lt;MeiZi&gt;&gt;</span><span class="hljs-comment">     * @return BasicResponse&lt;List&lt;MeiZi&gt;&gt;</span><span class="hljs-comment">     */</span>    <span class="hljs-variable">@Headers</span>(<span class="hljs-string">&quot;Cache-Control: public, max-age=10&quot;</span>)<span class="hljs-comment">//设置缓存 缓存时间为100s</span>    <span class="hljs-variable">@GET</span>(<span class="hljs-string">&quot;福利/10/1&quot;</span>)    Observable&lt;List&lt;MeiZi&gt;&gt; getMezi();    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 登录 接口为假接口 并不能返回数据</span><span class="hljs-comment">     * @return</span><span class="hljs-comment">     */</span>    <span class="hljs-variable">@POST</span>(<span class="hljs-string">&quot;login.do&quot;</span>)    Observable&lt;LoginResponse&gt; login(<span class="hljs-variable">@Body</span> LoginRequest request);    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 刷新token 接口为假接口 并不能返回数据</span><span class="hljs-comment">     * @return</span><span class="hljs-comment">     */</span>    <span class="hljs-variable">@POST</span>(<span class="hljs-string">&quot;refresh_token.do&quot;</span>)    Observable&lt;RefreshTokenResponseBean&gt; refreshToken(<span class="hljs-variable">@Body</span> RefreshTokenRequest request);    <span class="hljs-variable">@Multipart</span>    <span class="hljs-variable">@POST</span>(<span class="hljs-string">&quot;upload/uploadFile.do&quot;</span>)    Observable&lt;BasicResponse&gt; uploadFiles(<span class="hljs-variable">@Part</span> List&lt;MultipartBody.Part&gt; partList);&#125;</code></pre><p><strong>2.定义一个RetrofitHelper 类，通过IdeaApi来获取IdeaApiService的实例。</strong></p><pre><code class="hljs cpp"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RetrofitHelper</span> &#123;</span>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> IdeaApiService mIdeaApiService;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> IdeaApiService <span class="hljs-title">getApiService</span><span class="hljs-params">()</span></span>&#123;        <span class="hljs-keyword">return</span> mIdeaApiService;    &#125;    <span class="hljs-keyword">static</span> &#123;       mIdeaApiService= IdeaApi.getApiService(IdeaApiService.class, Constants.API_SERVER_URL);    &#125;&#125;</code></pre><p><strong>3.在Activity或者Fragment中发起网络请求</strong></p><pre><code class="hljs reasonml"><span class="hljs-comment">/**</span><span class="hljs-comment"> * Get请求</span><span class="hljs-comment"> * @param view</span><span class="hljs-comment"> */</span>public void get<span class="hljs-constructor">Data(View <span class="hljs-params">view</span>)</span> &#123;    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">RetrofitHelper</span>.</span></span>get<span class="hljs-constructor">ApiService()</span>            .get<span class="hljs-constructor">Mezi()</span>            .compose(this.&lt;List&lt;MeiZi&gt;&gt;bind<span class="hljs-constructor">ToLifecycle()</span>)            .compose(ProgressUtils.&lt;List&lt;MeiZi&gt;&gt;apply<span class="hljs-constructor">ProgressBar(<span class="hljs-params">this</span>)</span>)            .subscribe<span class="hljs-constructor">On(Schedulers.<span class="hljs-params">io</span>()</span>)            .observe<span class="hljs-constructor">On(AndroidSchedulers.<span class="hljs-params">mainThread</span>()</span>)            .subscribe(<span class="hljs-keyword">new</span> DefaultObserver&lt;List&lt;MeiZi&gt;&gt;<span class="hljs-literal">()</span> &#123;                @Override                public void on<span class="hljs-constructor">Success(List&lt;MeiZi&gt; <span class="hljs-params">response</span>)</span> &#123;                    show<span class="hljs-constructor">Toast(<span class="hljs-string">&quot;请求成功，妹子个数为&quot;</span> + <span class="hljs-params">response</span>.<span class="hljs-params">size</span>()</span>);                &#125;            &#125;);&#125;</code></pre><h2 id="八-小结"><a href="#八-小结" class="headerlink" title="八.小结"></a>八.小结</h2><p>本篇文章主要讲解了Rxjava和Retrofit的二次封装。以上内容也是笔者参考多方面的资料经过长时间的改动优化而来。但鉴于本人能力有限，其中也避免不了出现不当之处。还请大家多多包涵。另外，在投稿郭神公众号时文章可能还存在很多处理不优雅的地方，比如对响应数据的处理以及对Loading的处理。在投稿被推送后收到了很多小伙伴的建议，因此笔者也参考了大家的意见并做了优化，在此感谢大家。最后如果有疑问欢迎在文章留言评论。</p><p><a href="https://blog.csdn.net/qq_20521573/article/details/76100558">（二）Rxjava2+Retrofit之Token自动刷新</a><br><a href="https://blog.csdn.net/qq_20521573/article/details/78356747">（三）Rxjava2+Retrofit实现文件上传与下载</a></p><p><a href="https://github.com/zhpanvip/Retrofit2"> 源码传送门</a></p><h3 id="好库推荐"><a href="#好库推荐" class="headerlink" title="好库推荐"></a>好库推荐</h3><p>给大家推荐一下<a href="https://github.com/zhpanvip/BannerViewPager">BannerViewPager</a>。这是一个基于ViewPager实现的具有强大功能的无限轮播库。通过<a href="https://github.com/zhpanvip/BannerViewPager">BannerViewPager</a>可以实现腾讯视频、QQ音乐、酷狗音乐、支付宝、天猫、淘宝、优酷视频、喜马拉雅、网易云音乐、哔哩哔哩等APP的Banner样式以及指示器样式。</p><p>欢迎大家到github关注<a href="https://github.com/zhpanvip/BannerViewPager">BannerViewPager</a>！</p>]]></content>
    
    
    
    <tags>
      
      <tag>RxJava</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BaseActivity中封装通用的Toolbar</title>
    <link href="/2017/04/28/7.BaseActivity%E4%B8%AD%E5%B0%81%E8%A3%85%E9%80%9A%E7%94%A8%E7%9A%84Toolbar/"/>
    <url>/2017/04/28/7.BaseActivity%E4%B8%AD%E5%B0%81%E8%A3%85%E9%80%9A%E7%94%A8%E7%9A%84Toolbar/</url>
    
    <content type="html"><![CDATA[<p>之前写过一篇关于如何使用Toolbar的文章，最近在搭建新项目时对Toolbar做了封装。封装的预期目标是只在BaseActivity中引入Toolbar，然后子Activity通过继承BaseActivity就能显示Toolbar。接下来就看看如何实现这样的功能。<br>因为我们使用toolbar作为titlebar，因此首先需要去掉Actionbar。在style文件下修改默认Theme的parent为Theme.AppCompat.Light.NoActionBar便可以去掉默认的Actionbar，如下：</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;AppTheme&quot;</span> <span class="hljs-attr">parent</span>=<span class="hljs-string">&quot;Theme.AppCompat.Light.NoActionBar&quot;</span>&gt;</span><span class="xml">    <span class="hljs-comment">&lt;!-- Customize your theme here. --&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;colorPrimary&quot;</span>&gt;</span>@color/colorPrimary<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;colorPrimaryDark&quot;</span>&gt;</span>@color/colorPrimaryDark<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;colorAccent&quot;</span>&gt;</span>@color/colorAccent<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></code></pre><p>然后定义一个toolbar_layout的xml文件，在toolbar中加入俩个TextView作为标题和子标题，如下：</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">android.support.v7.widget.Toolbar</span></span><span class="hljs-tag">    <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><span class="hljs-tag">    <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/toolbar&quot;</span></span><span class="hljs-tag">    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><span class="hljs-tag">    <span class="hljs-attr">android:background</span>=<span class="hljs-string">&quot;@color/colorPrimary&quot;</span></span><span class="hljs-tag">    <span class="hljs-attr">android:minHeight</span>=<span class="hljs-string">&quot;?attr/actionBarSize&quot;</span>&gt;</span>    <span class="hljs-comment">&lt;!--自定义toolbar的title 和subtitle --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">TextView</span></span><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/tv_right&quot;</span></span><span class="hljs-tag">        <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;@style/TextAppearance.AppCompat.Widget.ActionBar.Subtitle&quot;</span></span><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><span class="hljs-tag">        <span class="hljs-attr">android:maxLines</span>=<span class="hljs-string">&quot;1&quot;</span></span><span class="hljs-tag">        <span class="hljs-attr">android:textColor</span>=<span class="hljs-string">&quot;@color/white&quot;</span></span><span class="hljs-tag">        <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;right&quot;</span></span><span class="hljs-tag">        <span class="hljs-attr">android:paddingRight</span>=<span class="hljs-string">&quot;10dp&quot;</span></span><span class="hljs-tag">        <span class="hljs-attr">android:layout_gravity</span>=<span class="hljs-string">&quot;right&quot;</span> /&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">TextView</span></span><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/tv_title&quot;</span></span><span class="hljs-tag">        <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;@style/TextAppearance.AppCompat.Widget.ActionBar.Title&quot;</span></span><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><span class="hljs-tag">        <span class="hljs-attr">android:lines</span>=<span class="hljs-string">&quot;1&quot;</span></span><span class="hljs-tag">        <span class="hljs-attr">android:ellipsize</span>=<span class="hljs-string">&quot;end&quot;</span></span><span class="hljs-tag">        <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;title&quot;</span></span><span class="hljs-tag">        <span class="hljs-attr">android:scrollHorizontally</span>=<span class="hljs-string">&quot;true&quot;</span></span><span class="hljs-tag">        <span class="hljs-attr">android:textColor</span>=<span class="hljs-string">&quot;@color/white&quot;</span></span><span class="hljs-tag">        <span class="hljs-attr">android:layout_gravity</span>=<span class="hljs-string">&quot;center&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">android.support.v7.widget.Toolbar</span>&gt;</span></code></pre><p>接着在BaseActivity的布局文件中include进toolbar_layout，如下：</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">LinearLayout</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><span class="hljs-tag">    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">layout</span>=<span class="hljs-string">&quot;@layout/toolbar_layout&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">LinearLayout</span>&gt;</span></code></pre><p>这样BaseActivity中就可以正常显示出Toolbar了。那么如何实现子Activity继承BaseActivity而显示toolbar呢？其实我们可以在BaseActivity中做文章。<br>首先在BaseActivity中声明一个LinearLayout,然后把BaseActivity的布局文件添加到该LinearLayout中。我们知道子Activity通过setContentView()方法来关联布局文件，因此我们可以在BaseActivity中去重写setContentView()方法，在重写的setContentView中把子类的布局文件也添加到事先声明的LinearLayout中，接下来应该解决如何将这个LinearLayout与Activity关联。查阅相关资料可以知道，可以通过 findViewById(android.R.id.content)拿到window的ViewGroup然后将刚才声明的LinearLayout添加到这个ViewGroup中，这样就可以在子Activity中显示出BaseActivity中的Toolbar了。（具体原因可以查阅android.R.id.content和 DecorView）代码如下：</p><pre><code class="hljs smali">public<span class="hljs-keyword"> abstract</span> class BaseActivity extends AppCompatActivity&#123;     //the container of this activity layout<span class="hljs-built_in"> and </span>sub-activity layout   <span class="hljs-keyword"> private</span> <span class="hljs-class">LinearLayout parentLinearLayout;</span>        @Override   <span class="hljs-keyword"> public</span> void onCreate(Bundle savedInstanceState) &#123;        super.onCreate(savedInstanceState);        initContentView(R.layout.activity_base);        setContentView(getLayoutId());        initToolBar();        init();    &#125;//  overwrite the function in<span class="hljs-built_in"> sub-activity </span>and<span class="hljs-built_in"> return </span>the layout id of<span class="hljs-built_in"> sub-activity </span>  <span class="hljs-keyword"> protected</span><span class="hljs-keyword"> abstract</span><span class="hljs-built_in"> int </span>getLayoutId(); <span class="hljs-keyword"> private</span> void initContentView(@LayoutRes<span class="hljs-built_in"> int </span>layoutResID) &#123;        ViewGroup viewGroup = (ViewGroup) findViewById(android.R.id.content);        viewGroup.removeAllViews();        parentLinearLayout =<span class="hljs-built_in"> new </span>LinearLayout(this);        parentLinearLayout.setOrientation(<span class="hljs-class">LinearLayout.VERTICAL);</span>// <span class="hljs-built_in"> add </span>parentLinearLayout in viewGroup        viewGroup.addView(parent<span class="hljs-class">LinearLayout);</span>        // <span class="hljs-built_in"> add </span>the layout of BaseActivity in parentLinearLayout        LayoutInflater.from(this).inflate(layoutResID, parent<span class="hljs-class">LinearLayout, true);</span>    &#125;   /**     * @param layoutResID  layout id of sub-activity     */    @Override   <span class="hljs-keyword"> public</span> void setContentView(@LayoutRes<span class="hljs-built_in"> int </span>layoutResID) &#123;        //  added the<span class="hljs-built_in"> sub-activity </span>layout id in parentLinearLayout        LayoutInflater.from(this).inflate(layoutResID, parent<span class="hljs-class">LinearLayout, true);</span>    &#125;&#125;</code></pre><p>上述代码通过initContentView()方法将BaseActivity中的布局文件添加到了声明的parentLinearLayout中，通过setContentView()方法将子Activity的布局也添加到了parentLinearLayout中，然后又将parentLinearLayout添加到了viewGroup中实现了Activity与布局文件的关联。至此我们完成了第一步，使子Activity可以显示出BaseActivity中的Toolbar布局。<br>接下来，我们需要在BaseActivity中对Toolbar进行封装，使其能够更加方便的在子Activity中使用。比如添加toolbar回退键的监听，添加是否显示回退键的方法等。完整的BaseActivity如下：</p><pre><code class="hljs reasonml">public abstract <span class="hljs-keyword">class</span> BaseActivity extends AppCompatActivity&#123;    <span class="hljs-comment">//the container of this activity layout and sub-activity layout </span>    <span class="hljs-keyword">private</span> LinearLayout parentLinearLayout;    <span class="hljs-keyword">private</span> TextView mTvTitle;    <span class="hljs-keyword">private</span> TextView mTvRight;    <span class="hljs-keyword">private</span> Toolbar mToolbar;    @Override    public void on<span class="hljs-constructor">Create(Bundle <span class="hljs-params">savedInstanceState</span>)</span> &#123;        super.on<span class="hljs-constructor">Create(<span class="hljs-params">savedInstanceState</span>)</span>;        init<span class="hljs-constructor">ContentView(R.<span class="hljs-params">layout</span>.<span class="hljs-params">activity_base</span>)</span>;              set<span class="hljs-constructor">ContentView(<span class="hljs-params">getLayoutId</span>()</span>);        init<span class="hljs-constructor">ToolBar()</span>;        set<span class="hljs-constructor">BackIcon()</span>;        init<span class="hljs-literal">()</span>;    &#125;<span class="hljs-comment">//  overwrite the function in sub-activity and return the layout id of sub-activity </span> protected abstract <span class="hljs-built_in">int</span> get<span class="hljs-constructor">LayoutId()</span>; <span class="hljs-keyword">private</span> void init<span class="hljs-constructor">ContentView(@LayoutRes <span class="hljs-params">int</span> <span class="hljs-params">layoutResID</span>)</span> &#123;        ViewGroup viewGroup = (ViewGroup) find<span class="hljs-constructor">ViewById(<span class="hljs-params">android</span>.R.<span class="hljs-params">id</span>.<span class="hljs-params">content</span>)</span>;        viewGroup.remove<span class="hljs-constructor">AllViews()</span>;        parentLinearLayout = <span class="hljs-keyword">new</span> <span class="hljs-constructor">LinearLayout(<span class="hljs-params">this</span>)</span>;        parentLinearLayout.set<span class="hljs-constructor">Orientation(LinearLayout.VERTICAL)</span>;        viewGroup.add<span class="hljs-constructor">View(<span class="hljs-params">parentLinearLayout</span>)</span>;        <span class="hljs-comment">//  add the layout of BaseActivity in parentLinearLayout</span>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">LayoutInflater</span>.</span></span>from(this).inflate(layoutResID, parentLinearLayout, <span class="hljs-literal">true</span>);    &#125;   <span class="hljs-comment">/**</span><span class="hljs-comment">     * @param layoutResID  the layout id of sub Activity</span><span class="hljs-comment">     */</span>    @Override    public void set<span class="hljs-constructor">ContentView(@LayoutRes <span class="hljs-params">int</span> <span class="hljs-params">layoutResID</span>)</span> &#123;        <span class="hljs-comment">//  added the sub-activity layout id in parentLinearLayout</span>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">LayoutInflater</span>.</span></span>from(this).inflate(layoutResID, parentLinearLayout, <span class="hljs-literal">true</span>);    &#125;<span class="hljs-keyword">private</span> void set<span class="hljs-constructor">BackIcon()</span>&#123;        <span class="hljs-keyword">if</span> (null != get<span class="hljs-constructor">Toolbar()</span><span class="hljs-operator"> &amp;&amp; </span>is<span class="hljs-constructor">ShowBacking()</span>) &#123;            get<span class="hljs-constructor">Toolbar()</span>.set<span class="hljs-constructor">NavigationIcon(R.<span class="hljs-params">drawable</span>.<span class="hljs-params">icon_back</span>)</span>;            get<span class="hljs-constructor">Toolbar()</span>.set<span class="hljs-constructor">NavigationOnClickListener((<span class="hljs-params">v</span>)</span> -&gt; on<span class="hljs-constructor">BackPressed()</span>);        &#125;    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * @return TextView in center</span><span class="hljs-comment">     */</span>    public TextView get<span class="hljs-constructor">ToolbarTitle()</span> &#123;        return mTvTitle;    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * @return TextView on the right</span><span class="hljs-comment">     */</span>    public TextView get<span class="hljs-constructor">SubTitle()</span> &#123;        return mTvRight;    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * set Title</span><span class="hljs-comment">     * @param title</span><span class="hljs-comment">     */</span>    public void set<span class="hljs-constructor">ToolBarTitle(CharSequence <span class="hljs-params">title</span>)</span> &#123;        <span class="hljs-keyword">if</span> (mTvTitle != null) &#123;            mTvTitle.set<span class="hljs-constructor">Text(<span class="hljs-params">title</span>)</span>;        &#125; <span class="hljs-keyword">else</span> &#123;            get<span class="hljs-constructor">Toolbar()</span>.set<span class="hljs-constructor">Title(<span class="hljs-params">title</span>)</span>;            set<span class="hljs-constructor">SupportActionBar(<span class="hljs-params">getToolbar</span>()</span>);        &#125;    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * the toolbar of this Activity</span><span class="hljs-comment">     * @return support.v7.widget.Toolbar.</span><span class="hljs-comment">     */</span>    public Toolbar get<span class="hljs-constructor">Toolbar()</span> &#123;        return (Toolbar) find<span class="hljs-constructor">ViewById(R.<span class="hljs-params">id</span>.<span class="hljs-params">toolbar</span>)</span>;    &#125;        <span class="hljs-comment">/**</span><span class="hljs-comment">     * is show back icon,default is none。</span><span class="hljs-comment">     * you can override the function in subclass and return to true show the back icon</span><span class="hljs-comment">     * @return</span><span class="hljs-comment">     */</span>    protected boolean is<span class="hljs-constructor">ShowBacking()</span> &#123;        return <span class="hljs-literal">true</span>;    &#125;&#125;</code></pre><p>最后我们可以在子Activity中去使用toolbar了。<br>我们让MainActivity继承BaseActivity,并在布局文件中添加一个button，切布局文件中没有添加标题栏，布局文件的代码就不再贴出了。然后 重写isShowBacing()方法，使其返回false，隐藏MainActivity的回退键。<br>代码如下：</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MainActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BaseActivity</span> </span>&#123;    <span class="hljs-meta">@BindView(R.id.btn)</span>    Button mBtn1;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getLayoutId</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> R.layout.activity_main;    &#125; <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isShowBacking</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;    &#125;<span class="hljs-meta">@OnClick(&#123;R.id.btn&#125;)</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Onclick</span><span class="hljs-params">(View view)</span></span>&#123;        <span class="hljs-keyword">switch</span> (view.getId())&#123;            <span class="hljs-keyword">case</span> R.id.btn:                startActivity(<span class="hljs-keyword">new</span> Intent(<span class="hljs-keyword">this</span>,TestActivity.class));                <span class="hljs-keyword">break</span>;        &#125;    &#125;&#125;</code></pre><p>创建TestActivity并继承BaseActivity，TestActivity的布局文件中不添加任何view。然后在TestActivity中给toolbar设置内容，如下：</p><pre><code class="hljs scala">public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BaseActivity</span> </span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">protected</span> int getLayoutId() &#123;        <span class="hljs-keyword">return</span> <span class="hljs-type">R</span>.layout.activity_test;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">protected</span> void init() &#123;        getToolbarTitle().setText(<span class="hljs-string">&quot;中间标题&quot;</span>);        getSubTitle().setText(<span class="hljs-string">&quot;右边标题&quot;</span>);        <span class="hljs-type">Toolbar</span> toolbar = getToolbar();        toolbar.setLogo(<span class="hljs-type">R</span>.mipmap.ic_launcher);        toolbar.setNavigationIcon(<span class="hljs-type">R</span>.drawable.back_white);    &#125;&#125;</code></pre><p>效果如下图所示</p><p><img src="https://raw.githubusercontent.com/zhpanvip/Resource/master/image/0701.jfif"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>自定义View之颜色渐变折线图</title>
    <link href="/2017/03/16/6.%E8%87%AA%E5%AE%9A%E4%B9%89View%E4%B9%8B%E9%A2%9C%E8%89%B2%E6%B8%90%E5%8F%98%E6%8A%98%E7%BA%BF%E5%9B%BE/"/>
    <url>/2017/03/16/6.%E8%87%AA%E5%AE%9A%E4%B9%89View%E4%B9%8B%E9%A2%9C%E8%89%B2%E6%B8%90%E5%8F%98%E6%8A%98%E7%BA%BF%E5%9B%BE/</url>
    
    <content type="html"><![CDATA[<p>首先看下要实现的效果图。<br><img src="https://raw.githubusercontent.com/zhpanvip/Resource/master/image/0601.gif"></p><p>折线图的绘制主要有一下几个步骤。<br>一、定义LineChartView类并继承View。<br>二、添加自定义属性。以在value目录下创建attrs.xml文件,文件中我们可以定义一些用到的属性，比如折线颜色、字体大小等属性。文件内容如下：</p><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">declare-styleable</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;LineChartView&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">attr</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;axesColor&quot;</span> <span class="hljs-attr">format</span>=<span class="hljs-string">&quot;color&quot;</span>/&gt;</span> <span class="hljs-comment">&lt;!--坐标轴颜色--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">attr</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;axesWidth&quot;</span> <span class="hljs-attr">format</span>=<span class="hljs-string">&quot;dimension&quot;</span>/&gt;</span><span class="hljs-comment">&lt;!--坐标轴宽度--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">attr</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;textColor&quot;</span> <span class="hljs-attr">format</span>=<span class="hljs-string">&quot;color&quot;</span>/&gt;</span> <span class="hljs-comment">&lt;!--字体颜色--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">attr</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;textSize&quot;</span> <span class="hljs-attr">format</span>=<span class="hljs-string">&quot;dimension&quot;</span>/&gt;</span> <span class="hljs-comment">&lt;!--字体大小--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">attr</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;lineColor&quot;</span> <span class="hljs-attr">format</span>=<span class="hljs-string">&quot;color&quot;</span>/&gt;</span> <span class="hljs-comment">&lt;!--折线颜色--&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">declare-styleable</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span></code></pre><p>接下来在LineChartView的构造方法中解析自定义属性的值并做相应的处理。在构造方法里还初始化了渐变颜色、折线数据的List集合以及初始化画笔等操作代码如下：</p><pre><code class="hljs reasonml">public <span class="hljs-constructor">LineChartView(Context <span class="hljs-params">context</span>, AttributeSet <span class="hljs-params">attrs</span>, <span class="hljs-params">int</span> <span class="hljs-params">defStyleAttr</span>)</span> &#123;       super(context, attrs, defStyleAttr);       TypedArray typedArray = context.obtain<span class="hljs-constructor">StyledAttributes(<span class="hljs-params">attrs</span>, R.<span class="hljs-params">styleable</span>.LineChartView)</span>;       mAxesColor = typedArray.get<span class="hljs-constructor">Color(R.<span class="hljs-params">styleable</span>.LineChartView_axesColor, Color.<span class="hljs-params">parseColor</span>(<span class="hljs-string">&quot;#CCCCCC&quot;</span>)</span>);       mAxesWidth = typedArray.get<span class="hljs-constructor">Dimension(R.<span class="hljs-params">styleable</span>.LineChartView_axesWidth, 1)</span>;       mTextColor = typedArray.get<span class="hljs-constructor">Color(R.<span class="hljs-params">styleable</span>.LineChartView_textColor, Color.<span class="hljs-params">parseColor</span>(<span class="hljs-string">&quot;#ABABAB&quot;</span>)</span>);       mTextSize = typedArray.get<span class="hljs-constructor">Dimension(R.<span class="hljs-params">styleable</span>.LineChartView_textSize, 32)</span>;       mLineColor = typedArray.get<span class="hljs-constructor">Color(R.<span class="hljs-params">styleable</span>.LineChartView_lineColor, Color.RED)</span>;       typedArray.recycle<span class="hljs-literal">()</span>;       <span class="hljs-comment">//  初始化渐变色</span>       shadeColors = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span><span class="hljs-literal">[]</span>&#123;               <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Color</span>.</span></span>argb(<span class="hljs-number">100</span>, <span class="hljs-number">255</span>, <span class="hljs-number">86</span>, <span class="hljs-number">86</span>), <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Color</span>.</span></span>argb(<span class="hljs-number">15</span>, <span class="hljs-number">255</span>, <span class="hljs-number">86</span>, <span class="hljs-number">86</span>),               <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Color</span>.</span></span>argb(<span class="hljs-number">0</span>, <span class="hljs-number">255</span>, <span class="hljs-number">86</span>, <span class="hljs-number">86</span>)&#125;;     <span class="hljs-comment">//  初始化折线数据</span>       mValues = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;<span class="hljs-literal">()</span>;       mMargin10 = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DensityUtils</span>.</span></span>dp2px(context, <span class="hljs-number">10</span>);       init<span class="hljs-literal">()</span>;   &#125;</code></pre><p>三、初始化画笔和路径。代码如下：</p><pre><code class="hljs reasonml"><span class="hljs-keyword">private</span> void init<span class="hljs-literal">()</span> &#123;        <span class="hljs-comment">//  初始化坐标轴画笔</span>        mPaintAxes = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Paint()</span>;        mPaintAxes.set<span class="hljs-constructor">Color(<span class="hljs-params">mAxesColor</span>)</span>;        mPaintAxes.set<span class="hljs-constructor">StrokeWidth(<span class="hljs-params">mAxesWidth</span>)</span>;        <span class="hljs-comment">//  初始化文字画笔</span>        mPaintText = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Paint()</span>;        mPaintText.set<span class="hljs-constructor">Style(Paint.Style.FILL)</span>;        mPaintText.set<span class="hljs-constructor">AntiAlias(<span class="hljs-params">true</span>)</span>; <span class="hljs-comment">//抗锯齿</span>        mPaintText.set<span class="hljs-constructor">TextSize(<span class="hljs-params">mTextSize</span>)</span>;        mPaintText.set<span class="hljs-constructor">Color(<span class="hljs-params">mTextColor</span>)</span>;        mPaintText.set<span class="hljs-constructor">TextAlign(Paint.Align.LEFT)</span>;        <span class="hljs-comment">//  初始化折线画笔</span>        mPaintLine = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Paint()</span>;        mPaintLine.set<span class="hljs-constructor">Style(Paint.Style.STROKE)</span>;        mPaintLine.set<span class="hljs-constructor">AntiAlias(<span class="hljs-params">true</span>)</span>;        mPaintLine.set<span class="hljs-constructor">StrokeWidth(<span class="hljs-params">mAxesWidth</span> <span class="hljs-operator">/</span> 2)</span>;        mPaintLine.set<span class="hljs-constructor">Color(<span class="hljs-params">mLineColor</span>)</span>;        <span class="hljs-comment">//  初始化折线路径</span>        mPath = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Path()</span>;        mPathShader = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Path()</span>;        <span class="hljs-comment">//  阴影画笔</span>        mPaintShader = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Paint()</span>;        mPaintShader.set<span class="hljs-constructor">AntiAlias(<span class="hljs-params">true</span>)</span>;        mPaintShader.set<span class="hljs-constructor">StrokeWidth(2f)</span>;    &#125;</code></pre><p>四、重写onLayout方法。在onLayout方法中获取控件的宽高、初始化原点坐标以及设置控件的背景。代码如下：</p><pre><code class="hljs reasonml">@Override   protected void on<span class="hljs-constructor">Layout(<span class="hljs-params">boolean</span> <span class="hljs-params">changed</span>, <span class="hljs-params">int</span> <span class="hljs-params">left</span>, <span class="hljs-params">int</span> <span class="hljs-params">top</span>, <span class="hljs-params">int</span> <span class="hljs-params">right</span>, <span class="hljs-params">int</span> <span class="hljs-params">bottom</span>)</span> &#123;       super.on<span class="hljs-constructor">Layout(<span class="hljs-params">changed</span>, <span class="hljs-params">left</span>, <span class="hljs-params">top</span>, <span class="hljs-params">right</span>, <span class="hljs-params">bottom</span>)</span>;       <span class="hljs-keyword">if</span> (changed) &#123;           mWidth = get<span class="hljs-constructor">Width()</span>;           mHeight = get<span class="hljs-constructor">Height()</span>;           timeWidth = (<span class="hljs-built_in">int</span>) mPaintText.measure<span class="hljs-constructor">Text(<span class="hljs-params">startTime</span>)</span>;           <span class="hljs-comment">//  初始化原点坐标</span>           xOrigin = <span class="hljs-number">0</span> + mMargin10;           yOrigin = (mHeight - mTextSize - mMargin10);        &#125;   &#125;</code></pre><p>五、重写onDraw方法。在onDraw方法中完成折线图的绘制。代码如下：</p><pre><code class="hljs reasonml">@Override   protected void on<span class="hljs-constructor">Draw(Canvas <span class="hljs-params">canvas</span>)</span> &#123;       super.on<span class="hljs-constructor">Draw(<span class="hljs-params">canvas</span>)</span>;       <span class="hljs-comment">//  Y轴坐标间距</span>       yInterval = (max - min)<span class="hljs-operator"> / </span>(yOrigin - mMargin10);<span class="hljs-comment">//  X轴坐标间距</span>       xInterval = (mWidth - xOrigin)<span class="hljs-operator"> / </span>(mItems.size<span class="hljs-literal">()</span> - <span class="hljs-number">1</span>);       <span class="hljs-comment">//  画坐标轴</span>       draw<span class="hljs-constructor">Axes(<span class="hljs-params">canvas</span>)</span>;       <span class="hljs-comment">//  画文字</span>       draw<span class="hljs-constructor">Text(<span class="hljs-params">canvas</span>)</span>;       <span class="hljs-comment">//  画折线</span>       draw<span class="hljs-constructor">Line(<span class="hljs-params">canvas</span>)</span>;<span class="hljs-comment">//  绘制路径</span>       draw<span class="hljs-constructor">Path(<span class="hljs-params">canvas</span>)</span>;   &#125;</code></pre><p>折线图的绘制可以分三部分：1.绘制坐标轴。2.绘制View上的文字。3.绘制折线。</p><p>1.坐标轴绘制的是第一象限，即左下角的点为原点。绘制坐标轴代码如下：</p><pre><code class="hljs reasonml"><span class="hljs-comment">//  画坐标轴</span>    <span class="hljs-keyword">private</span> void draw<span class="hljs-constructor">Axes(Canvas <span class="hljs-params">canvas</span>)</span> &#123;        <span class="hljs-comment">//  绘制X轴</span>        canvas.draw<span class="hljs-constructor">Line(<span class="hljs-params">xOrigin</span>, <span class="hljs-params">yOrigin</span>, <span class="hljs-params">mWidth</span> - <span class="hljs-params">mMargin10</span>, <span class="hljs-params">yOrigin</span>, <span class="hljs-params">mPaintAxes</span>)</span>;        <span class="hljs-comment">//  绘制X中轴线</span>        canvas.draw<span class="hljs-constructor">Line(<span class="hljs-params">xOrigin</span>, <span class="hljs-params">yOrigin</span> <span class="hljs-operator">/</span> 2, <span class="hljs-params">mWidth</span> - <span class="hljs-params">mMargin10</span>, <span class="hljs-params">yOrigin</span> <span class="hljs-operator">/</span> 2, <span class="hljs-params">mPaintAxes</span>)</span>;        <span class="hljs-comment">//  绘制X上边线</span>        canvas.draw<span class="hljs-constructor">Line(<span class="hljs-params">xOrigin</span>, <span class="hljs-params">mMargin10</span>, <span class="hljs-params">mWidth</span> - <span class="hljs-params">mMargin10</span>, <span class="hljs-params">mMargin10</span>, <span class="hljs-params">mPaintAxes</span>)</span>;        <span class="hljs-comment">//  绘制画Y轴</span>        canvas.draw<span class="hljs-constructor">Line(<span class="hljs-params">xOrigin</span>, <span class="hljs-params">yOrigin</span>, <span class="hljs-params">xOrigin</span>, <span class="hljs-params">mMargin10</span>, <span class="hljs-params">mPaintAxes</span>)</span>;        <span class="hljs-comment">//  绘制Y右边线</span>        canvas.draw<span class="hljs-constructor">Line(<span class="hljs-params">mWidth</span> - <span class="hljs-params">mMargin10</span>, <span class="hljs-params">mMargin10</span>, <span class="hljs-params">mWidth</span> - <span class="hljs-params">mMargin10</span>, <span class="hljs-params">yOrigin</span>, <span class="hljs-params">mPaintAxes</span>)</span>;    &#125;</code></pre><p>2.绘制文字，代码如下：</p><pre><code class="hljs reasonml"><span class="hljs-keyword">private</span> void draw<span class="hljs-constructor">Text(Canvas <span class="hljs-params">canvas</span>)</span> &#123;        <span class="hljs-comment">//  绘制最大值</span>        canvas.draw<span class="hljs-constructor">Text(String.<span class="hljs-params">format</span>(<span class="hljs-string">&quot;%.2f&quot;</span>, <span class="hljs-params">max</span> <span class="hljs-operator">*</span> 100 <span class="hljs-operator">/</span> 100.0)</span> + <span class="hljs-string">&quot;%&quot;</span>, xOrigin + <span class="hljs-number">6</span>, <span class="hljs-number">2</span><span class="hljs-operator"> * </span>mMargin10, mPaintText);        <span class="hljs-comment">//  绘制最小值</span>        canvas.draw<span class="hljs-constructor">Text(String.<span class="hljs-params">format</span>(<span class="hljs-string">&quot;%.2f&quot;</span>, <span class="hljs-params">min</span> <span class="hljs-operator">*</span> 100 <span class="hljs-operator">/</span> 100.0)</span> + <span class="hljs-string">&quot;%&quot;</span>, xOrigin + <span class="hljs-number">6</span>, yOrigin - <span class="hljs-number">6</span>, mPaintText);        <span class="hljs-comment">//  绘制中间值</span>        canvas.draw<span class="hljs-constructor">Text((String.<span class="hljs-params">format</span>(<span class="hljs-string">&quot;%.2f&quot;</span>, (<span class="hljs-params">min</span> + <span class="hljs-params">max</span>)</span><span class="hljs-operator"> * </span><span class="hljs-number">100</span><span class="hljs-operator"> / </span><span class="hljs-number">200.0</span>) + <span class="hljs-string">&quot;%&quot;</span>), xOrigin + <span class="hljs-number">6</span>, (yOrigin + mMargin10)<span class="hljs-operator"> / </span><span class="hljs-number">2</span>, mPaintText);        <span class="hljs-comment">//  绘制开始日期</span>        canvas.draw<span class="hljs-constructor">Text(<span class="hljs-params">startTime</span>, <span class="hljs-params">xOrigin</span>, <span class="hljs-params">mHeight</span> - <span class="hljs-params">mMargin10</span>, <span class="hljs-params">mPaintText</span>)</span>;        <span class="hljs-comment">//  绘制结束日期</span>        canvas.draw<span class="hljs-constructor">Text(<span class="hljs-params">endTime</span>, <span class="hljs-params">mWidth</span> - <span class="hljs-params">timeWidth</span> - <span class="hljs-params">mMargin10</span>, <span class="hljs-params">mHeight</span> - <span class="hljs-params">mMargin10</span>, <span class="hljs-params">mPaintText</span>)</span>;    &#125;</code></pre><p>3.绘制折线及渐变填充</p><pre><code class="hljs reasonml"><span class="hljs-keyword">private</span> void draw<span class="hljs-constructor">Line(Canvas <span class="hljs-params">canvas</span>)</span> &#123;        <span class="hljs-comment">//  画坐标点</span>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; mValues.size<span class="hljs-literal">()</span>; i++) &#123;            <span class="hljs-built_in">float</span> x = i<span class="hljs-operator"> * </span>xInterval + xOrigin + mAxesWidth;            <span class="hljs-keyword">if</span> (i<span class="hljs-operator"> == </span><span class="hljs-number">0</span>) &#123;                mPathShader.move<span class="hljs-constructor">To(<span class="hljs-params">x</span>, <span class="hljs-params">yOrigin</span> - (<span class="hljs-params">mValues</span>.<span class="hljs-params">get</span>(<span class="hljs-params">i</span>)</span> - min)<span class="hljs-operator"> / </span>yInterval);                mPath.move<span class="hljs-constructor">To(<span class="hljs-params">x</span>, <span class="hljs-params">yOrigin</span> - (<span class="hljs-params">mValues</span>.<span class="hljs-params">get</span>(<span class="hljs-params">i</span>)</span> - min)<span class="hljs-operator"> / </span>yInterval);            &#125; <span class="hljs-keyword">else</span> &#123;                mPath.line<span class="hljs-constructor">To(<span class="hljs-params">x</span> - <span class="hljs-params">mMargin10</span> - <span class="hljs-params">mAxesWidth</span>, <span class="hljs-params">yOrigin</span> - (<span class="hljs-params">mValues</span>.<span class="hljs-params">get</span>(<span class="hljs-params">i</span>)</span> - min)<span class="hljs-operator"> / </span>yInterval);                mPathShader.line<span class="hljs-constructor">To(<span class="hljs-params">x</span> - <span class="hljs-params">mMargin10</span> - <span class="hljs-params">mAxesWidth</span>, <span class="hljs-params">yOrigin</span> - (<span class="hljs-params">mValues</span>.<span class="hljs-params">get</span>(<span class="hljs-params">i</span>)</span> - min)<span class="hljs-operator"> / </span>yInterval);                <span class="hljs-keyword">if</span> (i<span class="hljs-operator"> == </span>mValues.size<span class="hljs-literal">()</span> - <span class="hljs-number">1</span>) &#123;                    mPathShader.line<span class="hljs-constructor">To(<span class="hljs-params">x</span> - <span class="hljs-params">mMargin10</span> - <span class="hljs-params">mAxesWidth</span>, <span class="hljs-params">yOrigin</span>)</span>;                    mPathShader.line<span class="hljs-constructor">To(<span class="hljs-params">xOrigin</span>, <span class="hljs-params">yOrigin</span>)</span>;                    mPathShader.close<span class="hljs-literal">()</span>;                &#125;            &#125;        &#125;        <span class="hljs-keyword">if</span> (null<span class="hljs-operator"> == </span>mShadeColors) &#123;            mPaintShader.set<span class="hljs-constructor">Color(Color.<span class="hljs-params">argb</span>(0, 0, 0, 0)</span>);        &#125; <span class="hljs-keyword">else</span> &#123;            Shader mShader = <span class="hljs-keyword">new</span> <span class="hljs-constructor">LinearGradient(0, 0, 0, <span class="hljs-params">getHeight</span>()</span>, mShadeColors, null, Shader.TileMode.CLAMP);            mPaintShader.set<span class="hljs-constructor">Shader(<span class="hljs-params">mShader</span>)</span>;        &#125;        canvas.draw<span class="hljs-constructor">Path(<span class="hljs-params">mPathShader</span>, <span class="hljs-params">mPaintShader</span>)</span>;    &#125;</code></pre><p>六、折线图添加动画。</p><p>1.折线图的动画使用属性动画，首先需要计算动画的进度，因此需要先添加setPercentage方法，当动画开始时，我们可以在该方法中拿到percentage的值</p><pre><code class="hljs cpp"><span class="hljs-comment">/**</span><span class="hljs-comment"> * Animate this property. It is the percentage of the path that is drawn.</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * @param percentage float the percentage of the path.</span><span class="hljs-comment"> */</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setPercentage</span><span class="hljs-params">(<span class="hljs-keyword">float</span> percentage)</span> </span>&#123;    <span class="hljs-keyword">if</span> (percentage &lt; <span class="hljs-number">0.0f</span> || percentage &gt; <span class="hljs-number">1.0f</span>) &#123;        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(                <span class="hljs-string">&quot;setPercentage not between 0.0f and 1.0f&quot;</span>);    &#125;    mProgress = percentage;    invalidate();&#125;</code></pre><p>2.通过Path来绘制折线路径，代码如下：</p><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">drawPath</span><span class="hljs-params">(Canvas canvas)</span> </span>&#123;       PathMeasure measure = <span class="hljs-keyword">new</span> PathMeasure(mPath, <span class="hljs-literal">false</span>);       <span class="hljs-keyword">float</span> pathLength = measure.getLength();       PathEffect effect = <span class="hljs-keyword">new</span> DashPathEffect(<span class="hljs-keyword">new</span> <span class="hljs-keyword">float</span>[]&#123;pathLength,               pathLength&#125;, pathLength - pathLength * mProgress);       mPaintLine.setPathEffect(effect);       canvas.drawPath(mPath, mPaintLine);   &#125;</code></pre><p>3.通过ObjectAnimator 开启动画，注意ObjectAnimator.ofFloat(lineChartView, “percentage”, 0.0f, 1.0f)中第二个参数必须为“percentage”，对应前那边的setPercentage方法，属性动画会根据“percentage”参数通过反射调用setPercentage：</p><pre><code class="hljs reasonml"><span class="hljs-comment">/**</span><span class="hljs-comment">   * @param lineChartView</span><span class="hljs-comment">   * @param duration      动画持续时间</span><span class="hljs-comment">   */</span>  public void start<span class="hljs-constructor">Anim(LineChartView <span class="hljs-params">lineChartView</span>, <span class="hljs-params">long</span> <span class="hljs-params">duration</span>)</span> &#123;      ObjectAnimator anim = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ObjectAnimator</span>.</span></span><span class="hljs-keyword">of</span><span class="hljs-constructor">Float(<span class="hljs-params">lineChartView</span>, <span class="hljs-string">&quot;percentage&quot;</span>, 0.0f, 1.0f)</span>;      anim.set<span class="hljs-constructor">Duration(<span class="hljs-params">duration</span>)</span>;      anim.set<span class="hljs-constructor">Interpolator(<span class="hljs-params">new</span> LinearInterpolator()</span>);      anim.start<span class="hljs-literal">()</span>;  &#125;</code></pre><p>至此，折线图的绘制已经全部完成。最后还可以添加get() set()方法，暴露出属性接口，以供外部调用。代码就不再贴出来了。</p><p>七、使用LineChartView<br>1.在布局文件中添加LineChartView,可设置折线颜色、字体颜色、等属性，如下：</p><pre><code class="hljs routeros">&lt;com.example.zhpan.linechartview.LineChartView        android:<span class="hljs-attribute">id</span>=<span class="hljs-string">&quot;@+id/lcv&quot;</span>        android:<span class="hljs-attribute">layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span>        android:<span class="hljs-attribute">layout_height</span>=<span class="hljs-string">&quot;200dp&quot;</span>        android:<span class="hljs-attribute">layout_marginBottom</span>=<span class="hljs-string">&quot;20dp&quot;</span>        android:<span class="hljs-attribute">layout_marginLeft</span>=<span class="hljs-string">&quot;15dp&quot;</span>        android:<span class="hljs-attribute">layout_marginRight</span>=<span class="hljs-string">&quot;15dp&quot;</span>        android:<span class="hljs-attribute">layout_marginTop</span>=<span class="hljs-string">&quot;15dp&quot;</span>        app:<span class="hljs-attribute">lineColor</span>=<span class="hljs-string">&quot;#FF0000&quot;</span>        app:<span class="hljs-attribute">textColor</span>=<span class="hljs-string">&quot;#ABABAB&quot;</span>        app:<span class="hljs-attribute">textSize</span>=<span class="hljs-string">&quot;12dp&quot;</span>/&gt;</code></pre><p>2.在Activity中为LineChartView设置数据，也可以通过代码为其设置属性。</p><pre><code class="hljs angelscript"><span class="hljs-keyword">private</span> <span class="hljs-built_in">void</span> initData() &#123;        <span class="hljs-comment">//  初始化折线数据</span>        List&lt;Float&gt; listValues = new ArrayList&lt;&gt;();        Random random = new Random();        <span class="hljs-built_in">float</span> startValue = random.nextFloat() * <span class="hljs-number">10</span>;        listValues.add(startValue);        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">30</span>; i++) &#123;            startValue += random.nextFloat() * <span class="hljs-number">10</span> - <span class="hljs-number">5</span>;            listValues.add(startValue);        &#125;        List&lt;Integer&gt; listShadeColors = new ArrayList&lt;&gt;();        listShadeColors.add(Color.argb(<span class="hljs-number">100</span>, <span class="hljs-number">255</span>, <span class="hljs-number">86</span>, <span class="hljs-number">86</span>));        listShadeColors.add(Color.argb(<span class="hljs-number">15</span>, <span class="hljs-number">255</span>, <span class="hljs-number">86</span>, <span class="hljs-number">86</span>));        listShadeColors.add(Color.argb(<span class="hljs-number">0</span>, <span class="hljs-number">255</span>, <span class="hljs-number">86</span>, <span class="hljs-number">86</span>));        <span class="hljs-comment">//  设置折线数据</span>        mLineChartView.setValues(listValues);        <span class="hljs-comment">//  设置渐变颜色</span>        mLineChartView.setShadeColors(listShadeColors);        <span class="hljs-comment">//  设置动画插值器</span>        mLineChartView.setInterpolator(new DecelerateInterpolator());        mLineChartView.setAxisMinValue(<span class="hljs-number">-30</span>);        mLineChartView.setAxisMaxValue(<span class="hljs-number">30</span>);        mLineChartView.setStartTime(<span class="hljs-string">&quot;2017-03-15&quot;</span>);        mLineChartView.setEndTime(<span class="hljs-string">&quot;2017-04-14&quot;</span>);        <span class="hljs-comment">//  开启动画</span>        mLineChartView.startAnim(<span class="hljs-number">2500</span>);    &#125;</code></pre><p><a href="https://github.com/zhpanvip/CustomView">源码下载</a></p><h3 id="好库推荐"><a href="#好库推荐" class="headerlink" title="好库推荐"></a>好库推荐</h3><p>给大家推荐一下<a href="https://github.com/zhpanvip/BannerViewPager">BannerViewPager</a>。这是一个基于ViewPager实现的具有强大功能的无限轮播库。通过<a href="https://github.com/zhpanvip/BannerViewPager">BannerViewPager</a>可以实现腾讯视频、QQ音乐、酷狗音乐、支付宝、天猫、淘宝、优酷视频、喜马拉雅、网易云音乐、哔哩哔哩等APP的Banner样式以及指示器样式。</p><p>欢迎大家到github关注<a href="https://github.com/zhpanvip/BannerViewPager">BannerViewPager</a>！</p>]]></content>
    
    
    
    <tags>
      
      <tag>自定义View</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android搜索关键字高亮显示及开发中遇到的坑</title>
    <link href="/2016/12/15/5.Android%E6%90%9C%E7%B4%A2%E5%85%B3%E9%94%AE%E5%AD%97%E9%AB%98%E4%BA%AE%E6%98%BE%E7%A4%BA%E5%8F%8A%E5%BC%80%E5%8F%91%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/"/>
    <url>/2016/12/15/5.Android%E6%90%9C%E7%B4%A2%E5%85%B3%E9%94%AE%E5%AD%97%E9%AB%98%E4%BA%AE%E6%98%BE%E7%A4%BA%E5%8F%8A%E5%BC%80%E5%8F%91%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/</url>
    
    <content type="html"><![CDATA[<p>公司项目中有一个搜索功能，需求是要把搜索关键字高亮显示出来。本来觉得是一个很简单的问题，开发过程也比较顺利。但在测试阶段还是出了些Bug。而且有些问题还挺莫名其妙！<br>最初的想法，定义一个工具类，然后封装一个处理高亮的方法，需要高亮显示的直接调用这个工具类就行了。工具类封装了一个matcherSearchContent()的静态方法，然后用SpannableStringBuilder去处理关键字高亮显示，处理完成后方法返回处理好的SpannableStringBuilder。然后就可以直接给TextView去set处理好的SpannableStringBuilder。具体代码如下：</p><pre><code class="hljs">public class TextHighLight &#123;    public static SpannableStringBuilder matcherSearchContent(String text,String[] keyword)&#123;        SpannableStringBuilder spannable=new SpannableStringBuilder(text);        CharacterStyle span=null;        for(int i=0;i&lt;keyword.length;i++)&#123;            Pattern pattern=Pattern.compile(keyword[i]);            Matcher matcher=pattern.matcher(text);            while(m.find())&#123;                span=new ForegroundColorSpan(Color.parseColor(&quot;#ff5656&quot;));                            spannable.setSpan(span,m.start(),matcher.end(), Spannable.SPAN_MARK_MARK);            &#125;        &#125;        return spannable;    &#125;&#125;</code></pre><p>但是后来需求说字母是要忽略大小写的。这个该怎么实现啊，用逻辑实现还是很麻烦的。还好，可以用到正则表达式来完成加上一行代码 “(?i)” + keyword[i] 就可以了。修改后代码如下：</p><pre><code class="hljs reasonml">public <span class="hljs-keyword">class</span> TextHighLight &#123;    public static SpannableStringBuilder matcher<span class="hljs-constructor">SearchContent(String <span class="hljs-params">text</span>,String[] <span class="hljs-params">keyword</span>)</span>&#123;        SpannableStringBuilder spannable=<span class="hljs-keyword">new</span> <span class="hljs-constructor">SpannableStringBuilder(<span class="hljs-params">text</span>)</span>;        CharacterStyle span=null;        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;keyword.length;i++)&#123;            wordReg = <span class="hljs-string">&quot;(?i)&quot;</span> + keyword<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span>;   <span class="hljs-comment">//忽略字母大小写</span>            Pattern pattern = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Pattern</span>.</span></span>compile(wordReg);            Matcher matcher=pattern.matcher(text);            <span class="hljs-keyword">while</span>(m.find<span class="hljs-literal">()</span>)&#123;                span=<span class="hljs-keyword">new</span> <span class="hljs-constructor">ForegroundColorSpan(Color.<span class="hljs-params">parseColor</span>(<span class="hljs-string">&quot;#ff5656&quot;</span>)</span>);                spannable.set<span class="hljs-constructor">Span(<span class="hljs-params">span</span>,<span class="hljs-params">m</span>.<span class="hljs-params">start</span>()</span>,matcher.<span class="hljs-keyword">end</span><span class="hljs-literal">()</span>, Spannable.SPAN_MARK_MARK);            &#125;        &#125;        return spannable;    &#125;&#125;</code></pre><p>嗯 这个解决的比较轻松。接下来测试阶段出现的问题。当输入特殊字符比如“*”时，程序出现异常闪退。调试发现原因是因为“*”号导致。在正则表达式中“*”是通配符，因此在匹配正则表达式时出现了异常。。解决办法也比较简单吗，就是判读如果包含“<em>”号的话就加上一个“&quot;转义一下就行了嘛！于是就有了下面的代码（因为测试的时候只有搜索“\</em>“、”(“、”)”时出现闪退，因此只对这三个字符作了处理）</p><pre><code class="hljs reasonml">public <span class="hljs-keyword">class</span> TextHighLight &#123;    <span class="hljs-comment">/**</span><span class="hljs-comment">     *   关键字高亮显示</span><span class="hljs-comment">     *   </span><span class="hljs-comment">     *   @param text 文字</span><span class="hljs-comment">     *      </span><span class="hljs-comment">     *   @param keyword1 文字中的关键字数组</span><span class="hljs-comment">     *              </span><span class="hljs-comment">     *   @return</span><span class="hljs-comment">     *  </span><span class="hljs-comment">     */</span>    public static SpannableStringBuilder matcher<span class="hljs-constructor">SearchContent(String <span class="hljs-params">text</span>, String[] <span class="hljs-params">keyword</span>)</span> &#123;        SpannableStringBuilder spannable = <span class="hljs-keyword">new</span> <span class="hljs-constructor">SpannableStringBuilder(<span class="hljs-params">text</span>)</span>;        CharacterStyle span;        String wordReg;        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; keyword.length; i++) &#123;            String key = <span class="hljs-string">&quot;&quot;</span>;            <span class="hljs-comment">//  处理通配符问题</span>            <span class="hljs-keyword">if</span> (keyword<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span>.contains(<span class="hljs-string">&quot;*&quot;</span>)<span class="hljs-operator"> || </span>keyword<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span>.contains(<span class="hljs-string">&quot;(&quot;</span>)<span class="hljs-operator"> || </span>keyword<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span>.contains(<span class="hljs-string">&quot;)&quot;</span>)) &#123;                <span class="hljs-built_in">char</span><span class="hljs-literal">[]</span> chars = keyword<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span>.<span class="hljs-keyword">to</span><span class="hljs-constructor">CharArray()</span>;                <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> k = <span class="hljs-number">0</span>; k &lt; chars.length; k++) &#123;                    <span class="hljs-keyword">if</span> (chars<span class="hljs-literal">[<span class="hljs-identifier">k</span>]</span><span class="hljs-operator"> == </span><span class="hljs-character">&#x27;*&#x27;</span><span class="hljs-operator"> || </span>chars<span class="hljs-literal">[<span class="hljs-identifier">k</span>]</span><span class="hljs-operator"> == </span><span class="hljs-character">&#x27;(&#x27;</span><span class="hljs-operator"> || </span>chars<span class="hljs-literal">[<span class="hljs-identifier">k</span>]</span><span class="hljs-operator"> == </span><span class="hljs-character">&#x27;)&#x27;</span>) &#123;                        key = key + <span class="hljs-string">&quot;\\&quot;</span> + <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">String</span>.</span></span>value<span class="hljs-constructor">Of(<span class="hljs-params">chars</span>[<span class="hljs-params">k</span>])</span>;                    &#125; <span class="hljs-keyword">else</span> &#123;                        key = key + <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">String</span>.</span></span>value<span class="hljs-constructor">Of(<span class="hljs-params">chars</span>[<span class="hljs-params">k</span>])</span>;                    &#125;                &#125;                keyword<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span> = key;            &#125;            wordReg = <span class="hljs-string">&quot;(?i)&quot;</span> + keyword<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span>;   <span class="hljs-comment">//忽略字母大小写</span>            Pattern pattern = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Pattern</span>.</span></span>compile(wordReg);            Matcher matcher = pattern.matcher(text);            <span class="hljs-keyword">while</span> (matcher.find<span class="hljs-literal">()</span>) &#123;                span = <span class="hljs-keyword">new</span> <span class="hljs-constructor">ForegroundColorSpan(Color.<span class="hljs-params">parseColor</span>(<span class="hljs-string">&quot;#ff5656&quot;</span>)</span>);                spannable.set<span class="hljs-constructor">Span(<span class="hljs-params">span</span>, <span class="hljs-params">matcher</span>.<span class="hljs-params">start</span>()</span>, matcher.<span class="hljs-keyword">end</span><span class="hljs-literal">()</span>, Spannable.SPAN_MARK_MARK);            &#125;        &#125;        return spannable;    &#125;&#125;</code></pre><p>上边代码先判断了字符串中是否包含“*”、”（”、”)”号，如果包含的话就遍历字符串然后在“*、”（”、”)”号前边加上“&quot;转义。嗯 这次一定没问题了。然后运行测试，跑起来看效果。嗯，果真正常了！以为这样就完了那就太天真了。当在一级搜索页面测试的时候一个很奇怪的问题出现了！！输入“*”搜索时发现“*”竟然没有高亮显示！效果图如下：</p><table><thead><tr><th>一级搜索页面</th><th>二级搜索页面</th></tr></thead><tbody><tr><td><img src="https://raw.githubusercontent.com/zhpanvip/Resource/master/image/0501.jfif"></td><td><img src="https://raw.githubusercontent.com/zhpanvip/Resource/master/image/0502.jfif"></td></tr></tbody></table><p>很诡异，有木有！两个页面调用的同一个Adapter，调用的同一个处理高亮的方法，为什么一个显示了高亮效果而一个却不正常显示呢！接下来经过漫长的调试、打log、对比两个页面。看下面的log日志信息：</p><p><img src="https://raw.githubusercontent.com/zhpanvip/Resource/master/image/0503.jfif"></p><p>嗯？要匹配的字符串怎么变成了“\ \ *”了？正常来说应该匹配“\<em>“ 的这样在正则表达式中”\</em>“正好被转义成“<em>”的，难怪出现没有匹配高亮显示，问题就出在了上边的for循环添加”&quot;那段代码。看上边代码发现经过处理转义字符后将keyword[i]进行了一次重新赋值，而调用处理高亮的方法时传过来的参数关键字数组仅仅是一个引用，而实际的数组是在堆内存中存储的，因此重新赋值致使堆内存数据发生了改变！<br>既然找到了问题所在就应该分析引起问题的原因，为什么转义字符会被添加了两次？<br>调试的时候发现getView()方法确实是被重复执行了多次。这个原因就很奇怪了，按理说getView()方法的调用应该是跟ListView条目对应的。即有多少条数据，getView()就会被调用多少次。但是为什么在这个页面getView()会被重复执行，而在另一个页面getView()却只调用了一次？后来通过查阅资料发现是由于ListView的布局原因引起的。**</em>当ListView的layout_height属性设置为wrap_content的时候，getView()就会出现被重复调用的问题！，而layout_height设置位match_parent的时候getView()的调用则是正常的***，现在再会过头来看两个页面的布局，上边第一张图片是出现问题的布局，因为该页面有多个ListView，因此单个ListView的layout_height都被定义成了wrap_content从而出现了上述getView()被重复调用问题。而第二张图片中只有一个ListView,layout_height属性设置的是match_parent,因此这个页面getView()只被调用了一次，所以高亮显示也就正常了！</p><p>问题原因找到了，也就好解决了。解决的方案有两个，第一就是更改ListView()的layout_height属性，给其设置为定值。第二就是在matcherSearchContent（）的方法里复制出来关键字的数组，然后再去匹配。这里采用的是第二种方案。修改后代码如下：</p><pre><code class="hljs reasonml">public <span class="hljs-keyword">class</span> TextHighLight &#123;    <span class="hljs-comment">/**</span><span class="hljs-comment">     *   关键字高亮显示</span><span class="hljs-comment">     *   </span><span class="hljs-comment">     *   @param text 文字</span><span class="hljs-comment">     *      </span><span class="hljs-comment">     *   @param keyword1 文字中的关键字数组</span><span class="hljs-comment">     *              </span><span class="hljs-comment">     *   @return</span><span class="hljs-comment">     *  </span><span class="hljs-comment">     */</span>    public static SpannableStringBuilder matcher<span class="hljs-constructor">SearchContent(String <span class="hljs-params">text</span>, String[] <span class="hljs-params">keyword1</span>)</span> &#123;        String<span class="hljs-literal">[]</span> keyword = <span class="hljs-keyword">new</span> String<span class="hljs-literal">[<span class="hljs-identifier">keyword1</span>.<span class="hljs-identifier">length</span>]</span>;        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>arraycopy(keyword1, <span class="hljs-number">0</span>, keyword, <span class="hljs-number">0</span>, keyword1.length);        SpannableStringBuilder spannable = <span class="hljs-keyword">new</span> <span class="hljs-constructor">SpannableStringBuilder(<span class="hljs-params">text</span>)</span>;        CharacterStyle span;        String wordReg;        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; keyword.length; i++) &#123;            String key = <span class="hljs-string">&quot;&quot;</span>;            <span class="hljs-comment">//  处理通配符问题</span>            <span class="hljs-keyword">if</span> (keyword<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span>.contains(<span class="hljs-string">&quot;*&quot;</span>)<span class="hljs-operator"> || </span>keyword<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span>.contains(<span class="hljs-string">&quot;(&quot;</span>)<span class="hljs-operator"> || </span>keyword<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span>.contains(<span class="hljs-string">&quot;)&quot;</span>)) &#123;                <span class="hljs-built_in">char</span><span class="hljs-literal">[]</span> chars = keyword<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span>.<span class="hljs-keyword">to</span><span class="hljs-constructor">CharArray()</span>;                <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> k = <span class="hljs-number">0</span>; k &lt; chars.length; k++) &#123;                    <span class="hljs-keyword">if</span> (chars<span class="hljs-literal">[<span class="hljs-identifier">k</span>]</span><span class="hljs-operator"> == </span><span class="hljs-character">&#x27;*&#x27;</span><span class="hljs-operator"> || </span>chars<span class="hljs-literal">[<span class="hljs-identifier">k</span>]</span><span class="hljs-operator"> == </span><span class="hljs-character">&#x27;(&#x27;</span><span class="hljs-operator"> || </span>chars<span class="hljs-literal">[<span class="hljs-identifier">k</span>]</span><span class="hljs-operator"> == </span><span class="hljs-character">&#x27;)&#x27;</span>) &#123;                        key = key + <span class="hljs-string">&quot;\\&quot;</span> + <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">String</span>.</span></span>value<span class="hljs-constructor">Of(<span class="hljs-params">chars</span>[<span class="hljs-params">k</span>])</span>;                    &#125; <span class="hljs-keyword">else</span> &#123;                        key = key + <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">String</span>.</span></span>value<span class="hljs-constructor">Of(<span class="hljs-params">chars</span>[<span class="hljs-params">k</span>])</span>;                    &#125;                &#125;                keyword<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span> = key;            &#125;            wordReg = <span class="hljs-string">&quot;(?i)&quot;</span> + keyword<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span>;   <span class="hljs-comment">//忽略字母大小写</span>            Pattern pattern = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Pattern</span>.</span></span>compile(wordReg);            Matcher matcher = pattern.matcher(text);            <span class="hljs-keyword">while</span> (matcher.find<span class="hljs-literal">()</span>) &#123;                span = <span class="hljs-keyword">new</span> <span class="hljs-constructor">ForegroundColorSpan(Color.<span class="hljs-params">parseColor</span>(<span class="hljs-string">&quot;#ff5656&quot;</span>)</span>);                spannable.set<span class="hljs-constructor">Span(<span class="hljs-params">span</span>, <span class="hljs-params">matcher</span>.<span class="hljs-params">start</span>()</span>, matcher.<span class="hljs-keyword">end</span><span class="hljs-literal">()</span>, Spannable.SPAN_MARK_MARK);            &#125;        &#125;        return spannable;    &#125;&#125;</code></pre><p>到这里关于关键字高亮的所有问题总算是解决了。</p><h3 id="好库推荐"><a href="#好库推荐" class="headerlink" title="好库推荐"></a>好库推荐</h3><p>给大家推荐一下<a href="https://github.com/zhpanvip/BannerViewPager">BannerViewPager</a>。这是一个基于ViewPager实现的具有强大功能的无限轮播库。通过<a href="https://github.com/zhpanvip/BannerViewPager">BannerViewPager</a>可以实现腾讯视频、QQ音乐、酷狗音乐、支付宝、天猫、淘宝、优酷视频、喜马拉雅、网易云音乐、哔哩哔哩等APP的Banner样式以及指示器样式。</p><p>欢迎大家到github关注<a href="https://github.com/zhpanvip/BannerViewPager">BannerViewPager</a>！</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>RecyclerView/ListView嵌套CheckBox选中状态错乱解决方案</title>
    <link href="/2016/09/25/4.RecyclerView-ListView%E5%B5%8C%E5%A5%97CheckBox%E9%80%89%E4%B8%AD%E7%8A%B6%E6%80%81%E9%94%99%E4%B9%B1%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <url>/2016/09/25/4.RecyclerView-ListView%E5%B5%8C%E5%A5%97CheckBox%E9%80%89%E4%B8%AD%E7%8A%B6%E6%80%81%E9%94%99%E4%B9%B1%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    
    <content type="html"><![CDATA[<p>在讨论这个问题之前应该先了解ListView的复用机制<br>ListView复用的原理：ListView中的每一个Item显示都需要Adapter调用一次getView的方法，这个方法会传入一个convertView的参数，返回的View就是这个Item显示的View。如果当Item的数量足够大，再为每一个Item都创建一个View对象，必将占用很多内存，创建View对象（mInflater.inflate(R.layout.lv_item, null);从xml中生成View，这是属于IO操作）也是耗时操作，所以必将影响性能。<br>Android提供了一个叫做Recycler(反复循环器)的构件，就是当ListView的Item从上方滚出屏幕视角之外，对应Item的View会被缓存到Recycler中，相应的会从下方生成一个Item，而此时调用的getView中的convertView参数就是滚出屏幕的Item的View，所以说如果能重用这个convertView，就会大大改善性能。<br>如果一个屏幕最多显示7个Item，当Item1滑出屏幕，此时Item1 的View被添加进Recycler中，相应的在下部要产生一个Item8，这时调用getView方法，convertView参数就是Item1 的View。 其原理图如下：<br><img src="https://raw.githubusercontent.com/zhpanvip/Resource/master/image/0401.jfif"></p><p>ListView的复用虽然大大提升了性能，但是却也带来很多问题。比如在加载图片时，由于下边的item复用了上边的item，造成下边item刚加载出来时显示的还是上边被复用的item的图片，等到这个新的item加载图片完毕时才会正常显示，这就是convert view复用造成listview图片加载错乱的问题。<br>与上边问题相似，在listview的item中存在CheckBox时也会由于复用convert view导致CheckBox的选中状态错乱，本片内容将解决由于复用导致CheckBox选中状态错乱的问题。<br>先看下存在问题的效果图<br><img src="https://raw.githubusercontent.com/zhpanvip/Resource/master/image/0402.jfif"></p><p>上图中只选中了北京市和天津市，当下滑ListView时发现下边的河南省和山东省也被选中了，再往下滑四川省和台湾省也被选中。其实可以发现一个规律，每一屏都会有两个条目被选中，其实这两个被选中的条目就是因为复用了第一屏的两个被选中的条目所导致的。<br>先看下ListView没有优化前的代码：</p><pre><code class="hljs routeros">public class MainActivity extends AppCompatActivity &#123;    private ListView mListView;    private List&lt;String&gt; mStringList;    @Override    protected void onCreate(Bundle savedInstanceState) &#123;        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        <span class="hljs-attribute">mStringList</span>=new ArrayList&lt;&gt;();        mStringList.<span class="hljs-builtin-name">add</span>(<span class="hljs-string">&quot;北京市&quot;</span>);mStringList.<span class="hljs-builtin-name">add</span>(<span class="hljs-string">&quot;天津市&quot;</span>);mStringList.<span class="hljs-builtin-name">add</span>(<span class="hljs-string">&quot;上海市&quot;</span>);mStringList.<span class="hljs-builtin-name">add</span>(<span class="hljs-string">&quot;重庆市&quot;</span>);        mStringList.<span class="hljs-builtin-name">add</span>(<span class="hljs-string">&quot;河北省&quot;</span>);mStringList.<span class="hljs-builtin-name">add</span>(<span class="hljs-string">&quot;山西省&quot;</span>);mStringList.<span class="hljs-builtin-name">add</span>(<span class="hljs-string">&quot;辽宁省&quot;</span>);mStringList.<span class="hljs-builtin-name">add</span>(<span class="hljs-string">&quot;河南省&quot;</span>);        mStringList.<span class="hljs-builtin-name">add</span>(<span class="hljs-string">&quot;山东省&quot;</span>);mStringList.<span class="hljs-builtin-name">add</span>(<span class="hljs-string">&quot;湖北省&quot;</span>);mStringList.<span class="hljs-builtin-name">add</span>(<span class="hljs-string">&quot;湖南省&quot;</span>);mStringList.<span class="hljs-builtin-name">add</span>(<span class="hljs-string">&quot;江西省&quot;</span>);        mStringList.<span class="hljs-builtin-name">add</span>(<span class="hljs-string">&quot;福建省&quot;</span>);mStringList.<span class="hljs-builtin-name">add</span>(<span class="hljs-string">&quot;陕西省&quot;</span>);mStringList.<span class="hljs-builtin-name">add</span>(<span class="hljs-string">&quot;四川省&quot;</span>);mStringList.<span class="hljs-builtin-name">add</span>(<span class="hljs-string">&quot;台湾省&quot;</span>);        mListView= (ListView) findViewById(R.id.lv_main);        MyAdapter <span class="hljs-attribute">adapter</span>=new MyAdapter(this,mStringList);        mListView.setAdapter(adapter);    &#125;&#125;</code></pre><p>MainActivity中的代码为ListView适配数据和适配Adapter，不作过多解释。</p><pre><code class="hljs reasonml"><span class="hljs-comment">/**</span><span class="hljs-comment"> * Created by zhpan on 2016/9/24.</span><span class="hljs-comment"> */</span>public <span class="hljs-keyword">class</span> MyAdapter extends BaseAdapter &#123;    List&lt;String&gt; mStringList;    Context mContext;    public <span class="hljs-constructor">MyAdapter(Context <span class="hljs-params">context</span>, List&lt;String&gt; <span class="hljs-params">stringList</span>)</span> &#123;        mStringList = stringList;        mContext=context;    &#125;    @Override    public long get<span class="hljs-constructor">ItemId(<span class="hljs-params">int</span> <span class="hljs-params">position</span>)</span> &#123;        return <span class="hljs-number">0</span>;    &#125;    @Override    public View get<span class="hljs-constructor">View(<span class="hljs-params">final</span> <span class="hljs-params">int</span> <span class="hljs-params">position</span>, View <span class="hljs-params">convertView</span>, ViewGroup <span class="hljs-params">parent</span>)</span> &#123;        MyViewHolder holder;        <span class="hljs-keyword">if</span>(convertView==null)&#123;            convertView=<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">View</span>.</span></span>inflate(mContext,<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">R</span>.</span></span>layout.item,null);            holder=<span class="hljs-keyword">new</span> <span class="hljs-constructor">MyViewHolder()</span>;            holder.mTextView= (TextView) convertView.find<span class="hljs-constructor">ViewById(R.<span class="hljs-params">id</span>.<span class="hljs-params">tv_item</span>)</span>;            holder.mCheckBox= (CheckBox) convertView.find<span class="hljs-constructor">ViewById(R.<span class="hljs-params">id</span>.<span class="hljs-params">cb_item</span>)</span>;            convertView.set<span class="hljs-constructor">Tag(<span class="hljs-params">holder</span>)</span>;        &#125;<span class="hljs-keyword">else</span> &#123;            holder= (MyViewHolder) convertView.get<span class="hljs-constructor">Tag()</span>;        &#125;        holder.mTextView.set<span class="hljs-constructor">Text(<span class="hljs-params">mStringList</span>.<span class="hljs-params">get</span>(<span class="hljs-params">position</span>)</span>);        return convertView;    &#125;    @Override    public <span class="hljs-built_in">int</span> get<span class="hljs-constructor">Count()</span> &#123;        return mStringList.size<span class="hljs-literal">()</span>;    &#125;    @Override    public Object get<span class="hljs-constructor">Item(<span class="hljs-params">int</span> <span class="hljs-params">position</span>)</span> &#123;        return null;    &#125;    public static <span class="hljs-keyword">class</span>  MyViewHolder &#123;        TextView mTextView;        CheckBox mCheckBox;    &#125;&#125;</code></pre><p>在Adapter中只是复用了convertView,没有对CheckBox做任何处理，那么这样写的代码是存在上图中的CheckBox选中状态错乱问题的。为了解决这个问题我们需要对CheckBox的选中状态做下保存，可以在Adapter中声明一个Map集合用来保存被选中的CheckBox。修改后代码如下：</p><pre><code class="hljs arduino"><span class="hljs-comment">/**</span><span class="hljs-comment"> * Created by zhpan on 2016/9/24.</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyAdapter</span> <span class="hljs-title">extends</span> <span class="hljs-title">BaseAdapter</span> &#123;</span>    List&lt;<span class="hljs-keyword">String</span>&gt; mStringList;    Context mContext;    <span class="hljs-keyword">private</span> Map&lt;Integer,Boolean&gt; <span class="hljs-built_in">map</span>=<span class="hljs-keyword">new</span> HashMap&lt;&gt;();<span class="hljs-comment">// 存放已被选中的CheckBox</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyAdapter</span><span class="hljs-params">(Context context, List&lt;<span class="hljs-keyword">String</span>&gt; stringList)</span> </span>&#123;        mStringList = stringList;        mContext=context;    &#125;    @Override    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">long</span> <span class="hljs-title">getItemId</span><span class="hljs-params">(<span class="hljs-keyword">int</span> <span class="hljs-built_in">position</span>)</span> </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;    &#125;    @Override    <span class="hljs-function"><span class="hljs-keyword">public</span> View <span class="hljs-title">getView</span><span class="hljs-params">(<span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> <span class="hljs-built_in">position</span>, View convertView, ViewGroup parent)</span> </span>&#123;        MyViewHolder holder;        <span class="hljs-keyword">if</span>(convertView==null)&#123;            convertView=View.inflate(mContext,R.layout.item,null);            holder=<span class="hljs-keyword">new</span> MyViewHolder();            holder.mTextView= (TextView) convertView.findViewById(R.id.tv_item);            holder.mCheckBox= (CheckBox) convertView.findViewById(R.id.cb_item);            convertView.setTag(holder);        &#125;<span class="hljs-keyword">else</span> &#123;            holder= (MyViewHolder) convertView.getTag();        &#125;        holder.mTextView.setText(mStringList.<span class="hljs-built_in">get</span>(<span class="hljs-built_in">position</span>));        holder.mCheckBox.setOnCheckedChangeListener(<span class="hljs-keyword">new</span> CompoundButton.OnCheckedChangeListener() &#123;            @Override            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> onCheckedChanged(CompoundButton buttonView, <span class="hljs-keyword">boolean</span> isChecked) &#123;                <span class="hljs-keyword">if</span>(isChecked==<span class="hljs-literal">true</span>)&#123;                    <span class="hljs-built_in">map</span>.<span class="hljs-built_in">put</span>(<span class="hljs-built_in">position</span>,<span class="hljs-literal">true</span>);                &#125;<span class="hljs-keyword">else</span> &#123;                    <span class="hljs-built_in">map</span>.<span class="hljs-built_in">remove</span>(<span class="hljs-built_in">position</span>);                &#125;            &#125;        &#125;);        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">map</span>!=null&amp;&amp;<span class="hljs-built_in">map</span>.containsKey(<span class="hljs-built_in">position</span>))&#123;            holder.mCheckBox.setChecked(<span class="hljs-literal">true</span>);        &#125;<span class="hljs-keyword">else</span> &#123;            holder.mCheckBox.setChecked(<span class="hljs-literal">false</span>);        &#125;        <span class="hljs-keyword">return</span> convertView;    &#125;    @Override    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getCount</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> mStringList.<span class="hljs-built_in">size</span>();    &#125;    @Override    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">getItem</span><span class="hljs-params">(<span class="hljs-keyword">int</span> <span class="hljs-built_in">position</span>)</span> </span>&#123;        <span class="hljs-keyword">return</span> null;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span>  <span class="hljs-title">MyViewHolder</span> &#123;</span>        TextView mTextView;        CheckBox mCheckBox;    &#125;&#125;</code></pre><p>针对这个问题我们子Adapter中加入了一个Map集合，其中Map的key用来存储条被选中的checkbox的position，value用来存储checkbox被选中。代码中还添加了checkbox的监听事件，在监听事件中判断点击的checkbox是否被选中，如果被选中了则将position添加到集合，并设置状态未true，否则就将该checkbox从集合中移除。然后通过if语句判断集合中是否存在该checkbox，如果存在则证明是被选中的,遂将该checkbox设置为选中状态setChecked(true)，否则证明checkbox没有选中则设置setChecked(false)。这样就解决了checkbox选中状态错乱的问题。<br>看下优化后的效果图<br><img src="https://raw.githubusercontent.com/zhpanvip/Resource/master/image/0403.jfif"></p><p>可以看到优化后CheckBox的选中状态不会再出现错乱问题了。</p><p><a href="http://download.csdn.net/detail/qq_20521573/9639225">源码下载</a></p><h3 id="好库推荐"><a href="#好库推荐" class="headerlink" title="好库推荐"></a>好库推荐</h3><p>给大家推荐一下<a href="https://github.com/zhpanvip/BannerViewPager">BannerViewPager</a>。这是一个基于ViewPager实现的具有强大功能的无限轮播库。通过<a href="https://github.com/zhpanvip/BannerViewPager">BannerViewPager</a>可以实现腾讯视频、QQ音乐、酷狗音乐、支付宝、天猫、淘宝、优酷视频、喜马拉雅、网易云音乐、哔哩哔哩等APP的Banner样式以及指示器样式。</p><p>欢迎大家到github关注<a href="https://github.com/zhpanvip/BannerViewPager">BannerViewPager</a>！</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>浅析Java设计模式（三）</title>
    <link href="/2016/07/26/3.%E6%B5%85%E6%9E%90Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <url>/2016/07/26/3.%E6%B5%85%E6%9E%90Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>本篇文章继续来学习Java的设计模式，这篇文章来解析行为型模式种的几种比较常用的设计模式。</p><p>一、观察者模式<br>观察者模式定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象。这个主题对象在状态发生变化时，会通知所有的观察者对象，使它们能够自动更新自己。以微信推送腾讯新闻为例，用户在微信订阅了腾讯新闻后，用户会收到腾讯的新闻推送。如果用户取消了新闻订阅，那么就不会再收到推送。<br>1.创建一个被观察者Observer 接口，接口中有update方法</p><pre><code class="hljs routeros">public<span class="hljs-built_in"> interface </span>Observer &#123;void update(String news);&#125;</code></pre><p>2.创建观察者Observable接口，接口中有订阅、取消订阅、通知三个方法。</p><pre><code class="hljs routeros">public<span class="hljs-built_in"> interface </span>Observable &#123;void subscribe(Observer observer);void unsubscribe(Observer observer);void notifyObserver();&#125;</code></pre><p>3.创建TencentNewsObservable并实现Observable接口</p><pre><code class="hljs haxe"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TencentNewsObservable</span> <span class="hljs-keyword"><span class="hljs-keyword">implements</span> <span class="hljs-type">Observable</span></span> </span>&#123;<span class="hljs-keyword">private</span> List&lt;Observer&gt; observers=<span class="hljs-keyword">new</span> <span class="hljs-type">ArrayList</span>&lt;Observer&gt;();<span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> <span class="hljs-keyword">new</span><span class="hljs-type">s</span>;@Override<span class="hljs-keyword">public</span> void subscribe(Observer observer) &#123;observers.add(observer);&#125;@Override<span class="hljs-keyword">public</span> void unsubscribe(Observer observer) &#123;observers.remove(observer);&#125;@Override<span class="hljs-keyword">public</span> void notifyObserver() &#123;<span class="hljs-keyword">for</span>(Observer observer:<span class="hljs-type">observers</span>) &#123;observer.update(<span class="hljs-keyword">new</span><span class="hljs-type">s</span>);&#125;&#125;<span class="hljs-keyword">public</span> void sendNews(<span class="hljs-keyword">String</span> <span class="hljs-keyword">new</span><span class="hljs-type">s</span>) &#123;<span class="hljs-built_in">this</span>.<span class="hljs-keyword">new</span><span class="hljs-type">s</span>=<span class="hljs-keyword">new</span><span class="hljs-type">s</span>;notifyObserver();&#125;&#125;</code></pre><p>4.定义一个UserObserver并实现Observer接口</p><pre><code class="hljs haxe"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserObserver</span> <span class="hljs-keyword"><span class="hljs-keyword">implements</span> <span class="hljs-type">Observer</span></span></span>&#123;<span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> name;<span class="hljs-keyword">public</span> UserObserver(<span class="hljs-keyword">String</span> name) &#123;<span class="hljs-built_in">this</span>.name=name;&#125;@Override<span class="hljs-keyword">public</span> void update(<span class="hljs-keyword">String</span> <span class="hljs-keyword">new</span><span class="hljs-type">s</span>) &#123;System.out.println(name+<span class="hljs-string">&quot;收到一条消息：&quot;</span>+<span class="hljs-keyword">new</span><span class="hljs-type">s</span>);&#125;&#125;</code></pre><p>5.编写测试类</p><pre><code class="hljs haxe"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ObserverTest</span> </span>&#123;<span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> void main(<span class="hljs-keyword">String</span>[] args) &#123;UserObserver mike=<span class="hljs-keyword">new</span> <span class="hljs-type">UserObserver</span>(<span class="hljs-string">&quot;Mike&quot;</span>);UserObserver lucy=<span class="hljs-keyword">new</span> <span class="hljs-type">UserObserver</span>(<span class="hljs-string">&quot;Lucy&quot;</span>);UserObserver kate=<span class="hljs-keyword">new</span> <span class="hljs-type">UserObserver</span>(<span class="hljs-string">&quot;Kate&quot;</span>);TencentNewsObservable observerable=<span class="hljs-keyword">new</span> <span class="hljs-type">TencentNewsObservable</span>();observerable.subscribe(mike);observerable.subscribe(lucy);observerable.subscribe(kate);observerable.sendNews(<span class="hljs-string">&quot;this is an ad&quot;</span>);&#125;&#125;</code></pre><p>运行结果：</p><blockquote><p>Mike收到一条消息：this is an advertisement<br>Lucy收到一条消息：this is an advertisement<br>Kate收到一条消息：this is an advertisement</p></blockquote><p>此时Mike收到推送打开后一看，竟然是一条广告，愤怒之下取消了订阅！</p><pre><code class="hljs abnf">System.out.println(<span class="hljs-string">&quot;Mike unsubscribe news&quot;</span>)<span class="hljs-comment">;</span>observerable.unsubscribe(mike)<span class="hljs-comment">;</span>observerable.sendNews(<span class="hljs-string">&quot;this is a news&quot;</span>)<span class="hljs-comment">;</span></code></pre><p>运行结果：</p><blockquote><p>Mike收到一条消息：this is an advertisement<br>Lucy收到一条消息：this is an advertisement<br>Kate收到一条消息：this is an advertisement<br>Mike unsubscribe news<br>Lucy收到一条消息：this is a news<br>Kate收到一条消息：this is a news</p></blockquote><p>取消订阅后Mike再也没有收到新闻推送。</p><p>二、策略模式<br>策略模式定义了一系列的算法，并将每一个算法封装起来，而且使他们可以相互替换，让算法独立于使用它的客户而独立变化。策略模式设计三个角色，环境(Context)角色、抽象策略(Strategy)角色以及具体策略(ConcreteStrategy)角色。<br>来看一个现实生活的例子，假设一个商场有三种会员（Strategy），分别为普通会员（StandardMemberStraegy）、白银会员（SilverMemberStrategy）以及黄金会员（GoldenMemberStrategy）。针对三种会员分别制定了不同的优方案。普通会员打九折、白银会员打八折、黄金会员打七折。来看如何用策略模式实现上述场景。<br>1.创建抽象策略类</p><pre><code class="hljs arduino"><span class="hljs-keyword">public</span> abstract <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Strategy</span> &#123;</span><span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> strategy;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">String</span> <span class="hljs-title">getStrategy</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-keyword">return</span> strategy;&#125;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Strategy</span><span class="hljs-params">(<span class="hljs-keyword">String</span> strategy)</span> </span>&#123;super();<span class="hljs-keyword">this</span>.strategy = strategy;&#125;<span class="hljs-function">abstract <span class="hljs-keyword">double</span> <span class="hljs-title">getPrice</span><span class="hljs-params">(<span class="hljs-keyword">double</span> normalPrice)</span></span>;&#125;</code></pre><p>2.创建环境类（Context）并持有抽象策略类</p><pre><code class="hljs reasonml">public <span class="hljs-keyword">class</span> Context &#123;<span class="hljs-keyword">private</span> Strategy mStrategy;public void set<span class="hljs-constructor">Strategy(Strategy <span class="hljs-params">strategy</span>)</span> &#123;mStrategy=strategy;&#125;public double execute<span class="hljs-constructor">Price(<span class="hljs-params">double</span> <span class="hljs-params">normalPrice</span>)</span> &#123;<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(mStrategy.get<span class="hljs-constructor">Strategy()</span>+<span class="hljs-string">&quot;Member，折后价：&quot;</span>+mStrategy.get<span class="hljs-constructor">Price(<span class="hljs-params">normalPrice</span>)</span>);return mStrategy.get<span class="hljs-constructor">Price(<span class="hljs-params">normalPrice</span>)</span>;&#125;&#125;</code></pre><p>3.创建三种会员策略类</p><pre><code class="hljs scala">public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StandardMemberStraegy</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Strategy</span> </span>&#123;public <span class="hljs-type">StandardMemberStraegy</span>(<span class="hljs-type">String</span> strategy) &#123;<span class="hljs-keyword">super</span>(strategy);&#125;<span class="hljs-meta">@Override</span>public double getPrice(double normalPrice) &#123;<span class="hljs-keyword">return</span> <span class="hljs-number">0.9</span>*normalPrice;&#125;&#125;public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SilverMemberStrategy</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Strategy</span></span>&#123;public <span class="hljs-type">SilverMemberStrategy</span>(<span class="hljs-type">String</span> strategy) &#123;<span class="hljs-keyword">super</span>(strategy);&#125;<span class="hljs-meta">@Override</span>public double getPrice(double normalPrice) &#123;<span class="hljs-keyword">return</span> <span class="hljs-number">0.8</span>*normalPrice;&#125;&#125;public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GoldenMemberStrategy</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Strategy</span> </span>&#123;public <span class="hljs-type">GoldenMemberStrategy</span>(<span class="hljs-type">String</span> strategy) &#123;<span class="hljs-keyword">super</span>(strategy);&#125;<span class="hljs-meta">@Override</span>public double getPrice(double normalPrice) &#123;<span class="hljs-keyword">return</span> <span class="hljs-number">0.7</span>*normalPrice;&#125;&#125;</code></pre><p>4.创建策略模式测试类</p><pre><code class="hljs reasonml">public <span class="hljs-keyword">class</span> StrategyTest &#123;public static void main(String<span class="hljs-literal">[]</span> args) &#123;StandardMemberStraegy standar=<span class="hljs-keyword">new</span> <span class="hljs-constructor">StandardMemberStraegy(<span class="hljs-string">&quot;Standar&quot;</span>)</span>;SilverMemberStrategy silver=<span class="hljs-keyword">new</span> <span class="hljs-constructor">SilverMemberStrategy(<span class="hljs-string">&quot;Silver&quot;</span>)</span>;GoldenMemberStrategy golden=<span class="hljs-keyword">new</span> <span class="hljs-constructor">GoldenMemberStrategy(<span class="hljs-string">&quot;Golden&quot;</span>)</span>;Context context=<span class="hljs-keyword">new</span> <span class="hljs-constructor">Context()</span>;context.set<span class="hljs-constructor">Strategy(<span class="hljs-params">standar</span>)</span>;context.execute<span class="hljs-constructor">Price(100)</span>;context.set<span class="hljs-constructor">Strategy(<span class="hljs-params">silver</span>)</span>;context.execute<span class="hljs-constructor">Price(100)</span>;context.set<span class="hljs-constructor">Strategy(<span class="hljs-params">golden</span>)</span>;context.execute<span class="hljs-constructor">Price(100)</span>;&#125;&#125;</code></pre><p>运行结果：</p><blockquote><p>StandarMember，折后价：90.0<br>SilverMember，折后价：80.0<br>GoldenMember，折后价：70.0</p></blockquote><h3 id="好库推荐"><a href="#好库推荐" class="headerlink" title="好库推荐"></a>好库推荐</h3><p>给大家推荐一下<a href="https://github.com/zhpanvip/BannerViewPager">BannerViewPager</a>。这是一个基于ViewPager实现的具有强大功能的无限轮播库。通过<a href="https://github.com/zhpanvip/BannerViewPager">BannerViewPager</a>可以实现腾讯视频、QQ音乐、酷狗音乐、支付宝、天猫、淘宝、优酷视频、喜马拉雅、网易云音乐、哔哩哔哩等APP的Banner样式以及指示器样式。</p><p>欢迎大家到github关注<a href="https://github.com/zhpanvip/BannerViewPager">BannerViewPager</a>！</p>]]></content>
    
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浅析Java设计模式（二）</title>
    <link href="/2016/07/25/2.%E6%B5%85%E6%9E%90Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <url>/2016/07/25/2.%E6%B5%85%E6%9E%90Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>上篇文章我们学习了几种创建型模式 的设计模式，那么本篇文章就继续来学习一下结构型模式的几个常用设计模式。</p><h2 id="一、代理模式（Proxy-Pattern）"><a href="#一、代理模式（Proxy-Pattern）" class="headerlink" title="一、代理模式（Proxy Pattern）"></a>一、代理模式（Proxy Pattern）</h2><p>代理模式即为其它对象提供一种代理控制对这个对象的访问。在代理模式中，一个类代表另一个类的功能。这种类型的设计模式属于结构型模式。在代理模式中，我们创建具有现有对象的对象，以便向外界提供功能接口。代理模式的机构图如下：<br><img src="https://raw.githubusercontent.com/zhpanvip/Resource/master/image/0201.png" alt="静态代理"></p><p>Subject类中定义一个抽象request()方法,RealSubject和Proxy共用接口，这样就在任何使用RealSubject的地方都可以使用Proxy。<br>1.Subject类代码如下：</p><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Subject</span> &#123;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">request</span>(<span class="hljs-params"></span>)</span>;&#125;</code></pre><p>2.RealSubject集成Subject类</p><pre><code class="hljs scala">public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RealSubject</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Subject</span></span>&#123;<span class="hljs-meta">@Override</span>public void request() &#123;<span class="hljs-type">System</span>.out.println(<span class="hljs-string">&quot;Real Request&quot;</span>);&#125;&#125;</code></pre><p>3.Proxy实现Subject类</p><pre><code class="hljs scala">public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Proxy</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Subject</span> </span>&#123;<span class="hljs-keyword">private</span> <span class="hljs-type">RealSubject</span> mRealSubject;<span class="hljs-meta">@Override</span>public void request() &#123;<span class="hljs-keyword">if</span>(mRealSubject==<span class="hljs-literal">null</span>) &#123;mRealSubject=<span class="hljs-keyword">new</span> <span class="hljs-type">RealSubject</span>();&#125;mRealSubject.request();&#125;&#125;</code></pre><p>4.代理测试类</p><pre><code class="hljs routeros">public class ProxyTest &#123;public static void main(String[] args) &#123;<span class="hljs-built_in">Proxy </span><span class="hljs-attribute">proxy</span>=new Proxy();proxy.request();&#125;&#125;</code></pre><p>输出结果：</p><blockquote><p>Real Request</p></blockquote><h2 id="二、装饰模式（Decorator-Pattern）"><a href="#二、装饰模式（Decorator-Pattern）" class="headerlink" title="二、装饰模式（Decorator Pattern）"></a>二、装饰模式（Decorator Pattern）</h2><p>装饰模式（Decorator Pattern）允许向一个现有的对象添加新的功能，同时又不改变其结构。这种类型的设计模式属于结构型模式，它是作为现有的类的一个包装。</p><p>我们将创建一个 Shape 接口和实现了 Shape 接口的实体类。然后我们创建一个实现了 Shape 接口的抽象装饰类 ShapeDecorator，并把 Shape 对象作为它的实例变量。RedShapeDecorator 是实现了 ShapeDecorator 的实体类。DecoratorPatternDemo，我们的演示类使用 RedShapeDecorator 来装饰 Shape 对象。UML图如下：<br><img src="https://raw.githubusercontent.com/zhpanvip/Resource/master/image/0202.jfif" alt="装饰模式"></p><p>1.创建Shape接口</p><pre><code class="hljs routeros">public<span class="hljs-built_in"> interface </span>Shape &#123;void draw();&#125;</code></pre><p>2.创建Circle类和Rectangle类并实现Shape接口</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Circle</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Shape</span> </span>&#123;<span class="hljs-meta">@Override</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span> </span>&#123;System.out.println(<span class="hljs-string">&quot;Draw Circle&quot;</span>);&#125;&#125;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Rectangle</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Shape</span> </span>&#123;<span class="hljs-meta">@Override</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span> </span>&#123;System.out.println(<span class="hljs-string">&quot;Draw Rectangle&quot;</span>);&#125;&#125;</code></pre><p>3.创建实现了 Shape 接口的抽象装饰类</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ShapeDecorator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Shape</span> </span>&#123;<span class="hljs-keyword">protected</span> Shape decoratedShape;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ShapeDecorator</span><span class="hljs-params">(Shape decoratedShape)</span> </span>&#123;<span class="hljs-keyword">this</span>.decoratedShape=decoratedShape;&#125;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span> </span>&#123;decoratedShape.draw();&#125;&#125;</code></pre><p>4.创建RedShapeDecorator装饰类并继承ShapeDecorator</p><pre><code class="hljs scala">public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RedShapeDecorator</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ShapeDecorator</span>  </span>&#123;public <span class="hljs-type">RedShapeDecorator</span>(<span class="hljs-type">Shape</span> decoratedShape) &#123;<span class="hljs-keyword">super</span>(decoratedShape);&#125;<span class="hljs-meta">@Override</span>public void draw() &#123;decoratedShape.draw();setRedBorder(decoratedShape);&#125;<span class="hljs-keyword">private</span> void setRedBorder(<span class="hljs-type">Shape</span> decoratedShape) &#123;<span class="hljs-type">System</span>.out.println(<span class="hljs-string">&quot;Red Border Corlor&quot;</span>);&#125;&#125;</code></pre><p>5.装饰模式测试类</p><pre><code class="hljs pgsql"><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> DecoratorTest &#123;<span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> main(String[] args) &#123;Shape <span class="hljs-type">circle</span>=<span class="hljs-built_in">new</span> Circle();Shape redCircle=<span class="hljs-built_in">new</span> RedShapeDecorator(<span class="hljs-built_in">new</span> Circle());Shape redRectangle=<span class="hljs-built_in">new</span> RedShapeDecorator(<span class="hljs-built_in">new</span> Rectangle());<span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;Circle with normal border&quot;);<span class="hljs-type">circle</span>.draw();<span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;Circle whit red border&quot;);redCircle.draw();<span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;Rectangle with red border&quot;);redRectangle.draw();&#125;&#125;</code></pre><p>输出结果：</p><blockquote><p>Circle with normal border<br>Draw Circle<br>Circle whit red border<br>Draw Circle<br>Red Border Corlor<br>Rectangle with red border<br>Draw Rectangle<br>Red Border Corlor</p></blockquote><h2 id="三、适配器模式"><a href="#三、适配器模式" class="headerlink" title="三、适配器模式"></a>三、适配器模式</h2><p>适配器模式（Adapter Pattern）是作为两个不兼容的接口之间的桥梁。这种类型的设计模式属于结构型模式，它结合了两个独立接口的功能。通常来说，在软件开发中，系统的数据和行为都正确，但接口不符合时，我们应该考虑用适配器，目的是使控制范围之外的一个原有对象与某个接口匹配。</p><p>现在假定在我们的应用中使用了两种地图，分别是Google地图和Baidu地图。这两个地图接口对我们而言是隐藏不可修改的，但是由于我们应用的特殊需求，可能会使用两个地图获取位置。那么此时我们就可以用适配器模式来实现。<br>1.当前我们拥有百度地图和Google地图两个接口均可以获取地理位置。</p><pre><code class="hljs arduino"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BaiduMap</span> &#123;</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">String</span> <span class="hljs-title">getBaiduLocation</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-string">&quot;this is baidu location&quot;</span>;&#125;&#125;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GoogleMap</span> &#123;</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">String</span> <span class="hljs-title">getGoogleLocation</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-string">&quot;this is Google location&quot;</span>;&#125;&#125;</code></pre><p>2.创建一个Map接口</p><pre><code class="hljs routeros">public<span class="hljs-built_in"> interface </span>Map &#123;String getLocation(String mapType);&#125;</code></pre><p>3.创建LocationAdapter实现Map接口</p><pre><code class="hljs haxe"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LocationAdapter</span> <span class="hljs-keyword"><span class="hljs-keyword">implements</span> <span class="hljs-type">Map</span></span> </span>&#123;@Override<span class="hljs-keyword">public</span> <span class="hljs-keyword">String</span> getLocation(<span class="hljs-keyword">String</span> mapType) &#123;<span class="hljs-keyword">String</span> location=<span class="hljs-string">&quot;&quot;</span>;<span class="hljs-keyword">switch</span>(mapType) &#123;<span class="hljs-keyword">case</span> <span class="hljs-string">&quot;Baidu&quot;</span>:<span class="hljs-type"></span><span class="hljs-type">location</span>=<span class="hljs-keyword">new</span> <span class="hljs-type">BaiduMap</span>().getBaiduLocation();<span class="hljs-keyword">break</span>;<span class="hljs-keyword">case</span> <span class="hljs-string">&quot;Google&quot;</span>:<span class="hljs-type"></span><span class="hljs-type">location</span>=<span class="hljs-keyword">new</span> <span class="hljs-type">GoogleMap</span>().getGoogleLocation();<span class="hljs-keyword">break</span>;&#125;<span class="hljs-keyword">return</span> location;&#125;&#125;</code></pre><p>3.测试适配器模式</p><pre><code class="hljs arduino"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AdapterTest</span> &#123;</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">String</span>[] args)</span> </span>&#123;LocationAdapter adapter=<span class="hljs-keyword">new</span> LocationAdapter();System.out.<span class="hljs-built_in">println</span>(adapter.getLocation(<span class="hljs-string">&quot;Baidu&quot;</span>));System.out.<span class="hljs-built_in">println</span>(adapter.getLocation(<span class="hljs-string">&quot;Google&quot;</span>));&#125;&#125;</code></pre><p>输出结果：</p><blockquote><p>this is baidu location<br>this is Google location</p></blockquote><h3 id="好库推荐"><a href="#好库推荐" class="headerlink" title="好库推荐"></a>好库推荐</h3><p>给大家推荐一下<a href="https://github.com/zhpanvip/BannerViewPager">BannerViewPager</a>。这是一个基于ViewPager实现的具有强大功能的无限轮播库。通过<a href="https://github.com/zhpanvip/BannerViewPager">BannerViewPager</a>可以实现腾讯视频、QQ音乐、酷狗音乐、支付宝、天猫、淘宝、优酷视频、喜马拉雅、网易云音乐、哔哩哔哩等APP的Banner样式以及指示器样式。</p><p>欢迎大家到github关注<a href="https://github.com/zhpanvip/BannerViewPager">BannerViewPager</a>！</p>]]></content>
    
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浅析Java设计模式（一）</title>
    <link href="/2016/07/24/1.%E6%B5%85%E6%9E%90Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2016/07/24/1.%E6%B5%85%E6%9E%90Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>设计模式可以分为三大类<br><strong>1.创建型模式</strong> 这些设计模式提供了一种在创建对象的同时隐藏创建逻辑的方式，而不是使用 new 运算符直接实例化对象。这使得程序在判断针对某个给定实例需要创建哪些对象时更加灵活。该类设计模式有五种:</p><ul><li>简单工厂模式（Factory Pattern） </li><li>建造者模式（Builder Pattern）</li><li>单例模式（SingletonPattern）    </li><li>原型模式（Prototype Pattern）</li><li>抽象工厂模式（Abstract Factory Pattern） </li></ul><p><strong>2.结构型模式</strong> 这些设计模式关注类和对象的组合。继承的概念被用来组合接口和定义组合对象获得新功能的方式。该类模式有五种：</p><ul><li>代理模式（Proxy Pattern）</li><li>装饰器模式（Decorator Pattern）  </li><li>适配器模式（Adapter Pattern）</li><li>组合模式（Composite Pattern）   </li><li>桥接模式（Bridge Pattern）  </li><li>外观模式（FacadePattern）   </li><li>过滤器模式（Filter、CriteriaPattern）  </li></ul><p><strong>3.行为型模式</strong>  这些设计模式特别关注对象之间的通信。</p><ul><li>观察者模式（Observer Pattern）</li><li>中介者模式（Mediator Pattern）</li><li>策略模式（Strategy Pattern）</li><li>责任链模式（Chain of Responsibility Pattern）</li><li>命令模式（Command Pattern）</li><li>解释器模式（Interpreter Pattern）</li><li>迭代器模式（Iterator Pattern）</li><li>备忘录模式（Memento Pattern）</li><li>状态模式（State Pattern）</li><li>空对象模式（Null Object Pattern）</li><li>模板模式（Template Pattern）</li><li>访问者模式（Visitor Pattern）<br>《浅析Java设计模式》将分为三篇分别对三类设计模式中比较常用且典型的几种模式做讲解。本篇文章是第一篇将从创建型模式中挑选简单工厂模式、单例模式以及建造者模式来解析。</li></ul><h2 id="一、简单工厂模式"><a href="#一、简单工厂模式" class="headerlink" title="一、简单工厂模式"></a>一、简单工厂模式</h2><p>简单工厂模式就是建立一个工厂类，对实现了同一接口的一些类进行实例的创建。简单工厂模式的实质是由一个工厂类根据传入的参数，动态决定应该创建哪一个产品类（这些产品类继承自一个父类或接口）的实例。<br>简单工厂模式UML<br>我们以画矩形、三角形以及圆为例，对于三种图形，可以抽象出来一个Shape，它们有共同的draw方法。并且让三种图形均实现Shape接口。简单工厂模式UML图如下所示：<br><img src="https://raw.githubusercontent.com/zhpanvip/Resource/master/image/0101.jfif" alt="简单工厂模式"></p><p>1.首先定义Shape接口，接口中有三种图形共有的draw方法：</p><pre><code class="hljs routeros">public<span class="hljs-built_in"> interface </span>Shape &#123;void draw();&#125;</code></pre><p>2.创建三种形状并实现Shape接口：<br>矩形类：</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Rectangle</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Shape</span> </span>&#123;<span class="hljs-meta">@Override</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span> </span>&#123;System.out.println(<span class="hljs-string">&quot;Draw a Rectangle&quot;</span>);&#125;&#125;</code></pre><p>三角形：</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Triangle</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Shape</span> </span>&#123;<span class="hljs-meta">@Override</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span> </span>&#123;System.out.println(<span class="hljs-string">&quot;Draw a Triangle&quot;</span>);&#125;&#125;</code></pre><p>圆形：</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Circle</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Shape</span> </span>&#123;<span class="hljs-meta">@Override</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span> </span>&#123;System.out.println(<span class="hljs-string">&quot;Draw a circle&quot;</span>);&#125;&#125;</code></pre><p>3.创建工厂类，并根据参数信息画出对应的图形：</p><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">ShapFactory</span> &#123; <span class="hljs-comment">//使用 getShape 方法获取形状类型的对象</span>   <span class="hljs-function"><span class="hljs-keyword">public</span> Shape <span class="hljs-title">getShape</span>(<span class="hljs-params">String shapeType</span>)</span>&#123;      <span class="hljs-keyword">if</span>(shapeType == <span class="hljs-literal">null</span>)&#123;         <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;      &#125;              <span class="hljs-keyword">if</span>(shapeType.<span class="hljs-keyword">equals</span>(<span class="hljs-string">&quot;Circle&quot;</span>))&#123;         <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Circle();      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(shapeType.<span class="hljs-keyword">equals</span>(<span class="hljs-string">&quot;Rectangle&quot;</span>))&#123;         <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Rectangle();      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(shapeType.<span class="hljs-keyword">equals</span>(<span class="hljs-string">&quot;Triangle&quot;</span>))&#123;         <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Triangle();      &#125;      <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;   &#125;&#125;</code></pre><p>4.接下来，我们创建一个测试类：</p><pre><code class="hljs mipsasm">public class FactoryTest &#123;public static void main(String[] args) &#123;<span class="hljs-keyword">ShapFactory </span><span class="hljs-keyword">shapFactory </span>= new <span class="hljs-keyword">ShapFactory();</span><span class="hljs-keyword"></span><span class="hljs-keyword"></span><span class="hljs-keyword">Shape </span><span class="hljs-keyword">shapeCircle </span>= <span class="hljs-keyword">shapFactory.getShape(&quot;Circle&quot;);</span><span class="hljs-keyword"></span><span class="hljs-keyword">shapeCircle.draw();</span><span class="hljs-keyword"></span><span class="hljs-keyword"></span><span class="hljs-keyword">Shape </span><span class="hljs-keyword">shapeRectangle </span>= <span class="hljs-keyword">shapFactory.getShape(&quot;Rectangle&quot;);</span><span class="hljs-keyword"></span><span class="hljs-keyword">shapeRectangle.draw();</span><span class="hljs-keyword"></span><span class="hljs-keyword"></span><span class="hljs-keyword">Shape </span><span class="hljs-keyword">shapeTriangle </span>= <span class="hljs-keyword">shapFactory.getShape(&quot;Triangle&quot;);</span><span class="hljs-keyword"></span><span class="hljs-keyword">shapeTriangle.draw();</span><span class="hljs-keyword"></span><span class="hljs-keyword"></span><span class="hljs-keyword">Shape </span><span class="hljs-keyword">shapeSquare </span>= <span class="hljs-keyword">shapFactory.getShape(&quot;Square&quot;);</span><span class="hljs-keyword"></span>if (<span class="hljs-keyword">shapeSquare </span>== null) &#123;System.out.println(<span class="hljs-string">&quot;shapeSquare is null!&quot;</span>);&#125; else &#123;<span class="hljs-keyword">shapeSquare.draw();</span><span class="hljs-keyword"></span>&#125;&#125;&#125;</code></pre><p> 输出结果： </p><blockquote><p>Draw a circle<br>Draw a Rectangle<br> Draw a Triangle<br>shapeSquare isnull!</p></blockquote><h2 id="二、单例模式"><a href="#二、单例模式" class="headerlink" title="二、单例模式"></a>二、单例模式</h2><p>单例模式（Singleton Pattern），保证一个类仅有一个实例，并提供一个访问它的全局访问方法。单例模式需要我们把显示定义的构造方法私有化，不允许外部对它实例化。单例模式的结构图如下所示。</p><p><img src="https://raw.githubusercontent.com/zhpanvip/Resource/master/image/0102.png" alt="单例模式"></p><p><strong>1.一个简单的单例模式实现。</strong></p><pre><code class="hljs routeros">public class Singleton &#123;private static Singleton instance;private Singleton() &#123;&#125;public static Singleton getInstance() &#123;<span class="hljs-keyword">if</span>(<span class="hljs-attribute">instance</span>==null) &#123;<span class="hljs-built_in">instance </span>= new Singleton();&#125;return instance;&#125;public void openWindow() &#123;System.out.println(<span class="hljs-string">&quot;Open a Window&quot;</span>);&#125;&#125;</code></pre><p>上面就是一个最简单的单例模式，我们来写一个测试类：</p><pre><code class="hljs arduino"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SingleTest</span> &#123;</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">String</span>[] args)</span> </span>&#123;Singleton single1=Singleton.getInstance();Singleton single2=Singleton.getInstance();System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;single1.equals(single2)---&quot;</span>+single1.equals(single2));&#125;&#125;</code></pre><p>输出结果：</p><blockquote><p>single1.equals(single2)—true</p></blockquote><p>从输出结果可以看出两次调用getInstance得到的是同一个Singleton 实例。</p><p>上面仅仅是实现单例的一种方式，在调用时实例化对象我们称之为懒汉式，上面的代码有一个弊端，就是不支持多线程调用，在多线程调用的情况下可能会被实例化出多个实例，因此，严格来讲它并不是真正的单例模式！接下来我们继续来看几种单例模式的实现方法，并且来保证它的线程安全。<br><strong>2.线程安全的懒汉式单例模式</strong></p><pre><code class="hljs routeros">public class Singleton &#123;private static Singleton instance;private Singleton() &#123;&#125;public static synchronized  Singleton getInstance() &#123;<span class="hljs-keyword">if</span>(<span class="hljs-attribute">instance</span>==null) &#123;<span class="hljs-built_in">instance </span>= new Singleton();&#125;return instance;&#125;public void openWindow() &#123;System.out.println(<span class="hljs-string">&quot;Open a Window&quot;</span>);&#125;&#125;</code></pre><p>如上代码，我们仅仅在getInstance方法上加了一个synchronized 锁，从而保证了线程的安全。但是我们又不得不考虑一个问题，即每次调用getInstance的时候都会加锁，这种做法势必影响了程序的性能，所以还有待改良。<br><strong>3.双重锁定的单例模式</strong></p><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span> &#123;<span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Singleton instance;<span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span>(<span class="hljs-params"></span>)</span> &#123;&#125;<span class="hljs-comment">//双重校验锁 线程安全  不用让线程每次都加锁，只有在未实例化时加锁，提高性能。</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton2 <span class="hljs-title">getInstance3</span>(<span class="hljs-params"></span>)</span> &#123;<span class="hljs-keyword">if</span> (instance == <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">//先判断实例是否存在，不存在再加锁处理</span>synchronized (Singleton2.class) &#123;<span class="hljs-keyword">if</span>(instance==<span class="hljs-literal">null</span>) &#123;instance=<span class="hljs-keyword">new</span> Singleton2();&#125;&#125;&#125;<span class="hljs-keyword">return</span> instance;&#125;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">openWindow</span>(<span class="hljs-params"></span>)</span> &#123;System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;Open a Window&quot;</span>);&#125;&#125;</code></pre><p>上述代码中为什么两次判断instance是否为null？假如instance为null并且同时又两个线程调用getInstance()方法，它们将同时通过第一重instance==null的判断。然后由于锁机制，这两个线程只能有一个进入，另一个在外排队等候。等到第一个执行完后另一个线程才能进入。而此时如果没有第二重instance是否为空的判断，则第一个线程创建了实例，而第二个线程还是可以继续创建实例。这样没有达到单例的目的。<br><strong>4.饿汉式实现单例模式</strong><br>前三种我们讲解了懒汉式实现单例。那么还有一种在类加载时就创建对象的单例模式的实现方法我们称之为饿汉式。代码如下：</p><pre><code class="hljs arduino"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span> &#123;</span><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Singleton instance=<span class="hljs-keyword">new</span> Singleton();<span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span><span class="hljs-params">()</span> </span>&#123;&#125;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-keyword">return</span> instance;&#125;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">openWindow</span><span class="hljs-params">()</span> </span>&#123;System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;Open a Window&quot;</span>);&#125;&#125;</code></pre><p>这种单例模式基于 classloader 机制避免了多线程的同步问题。但因为instance在类加载时就被实例化了，因此存在内存浪费的可能性。</p><h2 id="三、建造者模式"><a href="#三、建造者模式" class="headerlink" title="三、建造者模式"></a>三、建造者模式</h2><p>建造者模式是将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。<br>我们以画卡通人物为例，画一个卡通人物需要完成头、身体、手、腿的绘制。那么，我们就可以抽象出一个IDrawPerson的接口</p><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title">IDrawPerson</span> &#123; <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">drawHead</span>(<span class="hljs-params"></span>)</span>;  <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">drawBody</span>(<span class="hljs-params"></span>)</span>;  <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">drawHand</span>(<span class="hljs-params"></span>)</span>;  <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">drawLeg</span>(<span class="hljs-params"></span>)</span>;  <span class="hljs-function">Person <span class="hljs-title">buildPerson</span>(<span class="hljs-params"></span>)</span>;&#125;</code></pre><p>接下来，我想画一个比较瘦的卡通人物，那么定义PersonThinBuilder并实现IDrawPerson类</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;<span class="hljs-keyword">private</span> String head;<span class="hljs-keyword">private</span> String body;<span class="hljs-keyword">private</span> String hand;<span class="hljs-keyword">private</span> String leg;...  <span class="hljs-comment">//省去get、set方法</span>&#125;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PersonThinBuilder</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">IDrawPerson</span> </span>&#123;<span class="hljs-keyword">private</span> Person mPerson;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">PersonThinBuilder</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-keyword">super</span>();mPerson=<span class="hljs-keyword">new</span> Person();&#125;<span class="hljs-meta">@Override</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">drawHead</span><span class="hljs-params">()</span> </span>&#123;mPerson.setHead(<span class="hljs-string">&quot;draw head&quot;</span>);&#125;<span class="hljs-meta">@Override</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">drawBody</span><span class="hljs-params">()</span> </span>&#123;mPerson.setBody(<span class="hljs-string">&quot;draw thin body&quot;</span>);&#125;<span class="hljs-meta">@Override</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">drawHand</span><span class="hljs-params">()</span> </span>&#123;mPerson.setHand(<span class="hljs-string">&quot;draa hand&quot;</span>);&#125;<span class="hljs-meta">@Override</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">drawLeg</span><span class="hljs-params">()</span> </span>&#123;mPerson.setLeg(<span class="hljs-string">&quot;draw leg&quot;</span>);&#125;<span class="hljs-meta">@Override</span><span class="hljs-function"><span class="hljs-keyword">public</span> Person <span class="hljs-title">buildPerson</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-keyword">return</span> mPerson;&#125;&#125;</code></pre><p>同样，如果我想再画一个胖人或者高个子都用类似代码实现这个类就可以了。</p><p>接下来看建造者模式中很重要的一个类，指挥者类，用这个类来控制建造过程或者隔离用户与建造过程的关联。</p><pre><code class="hljs reasonml">public <span class="hljs-keyword">class</span> PersonDirector &#123;public Person <span class="hljs-constructor">CreatePerson(IDrawPerson <span class="hljs-params">buildPerson</span>)</span> &#123;buildPerson.draw<span class="hljs-constructor">Head()</span>;buildPerson.draw<span class="hljs-constructor">Body()</span>;buildPerson.draw<span class="hljs-constructor">Hand()</span>;buildPerson.draw<span class="hljs-constructor">Leg()</span>;return buildPerson.build<span class="hljs-constructor">Person()</span>;&#125;&#125;</code></pre><p>最后来看创建一个建造者模式的测试类：</p><pre><code class="hljs arduino"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BuildTest</span> &#123;</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">String</span>[] args)</span> </span>&#123;PersonDirector personDirector=<span class="hljs-keyword">new</span> PersonDirector();Person thinPerson=personDirector.CreatePerson(<span class="hljs-keyword">new</span> PersonThinBuilder());System.out.<span class="hljs-built_in">println</span>(thinPerson.getBody());&#125;&#125;</code></pre><p>输出结果：</p><blockquote><p>draw thin body</p></blockquote><h3 id="好库推荐"><a href="#好库推荐" class="headerlink" title="好库推荐"></a>好库推荐</h3><p>给大家推荐一下<a href="https://github.com/zhpanvip/BannerViewPager">BannerViewPager</a>。这是一个基于ViewPager实现的具有强大功能的无限轮播库。通过<a href="https://github.com/zhpanvip/BannerViewPager">BannerViewPager</a>可以实现腾讯视频、QQ音乐、酷狗音乐、支付宝、天猫、淘宝、优酷视频、喜马拉雅、网易云音乐、哔哩哔哩等APP的Banner样式以及指示器样式。</p><p>欢迎大家到github关注<a href="https://github.com/zhpanvip/BannerViewPager">BannerViewPager</a>！</p>]]></content>
    
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
